{"version":3,"names":["COLOR_PALETTE","chart_wrapper","div_wrapper","this","constructor","Error","_n_charts_created","id","download_chart_container","undefined","controls_container","chartjs_chart_wrapper","call","canvas","chart","histogram_wrapper","data","xlabel","_data","_density","_n_bins_default","Math","ceil","sqrt","length","_n_bins","_xlabel","_n_decimals","_max_bins_multiplier","_bar_color","bar_chart_wrapper","ylabel","Array","isArray","_check_array_valid","_parse_array","_check_object_valid","_parse_object","_ylabel","_bar_colors","labels","fill","d3_chart_wrapper","svg","toggle_visibility","element","attr","transition","linspace","start","stop","nsteps","delta","d3","range","map","i","boxvio_chart_wrapper","_metrics","name","values","Object","entries","calc_metrics","_outliers","filter","v","lower_fence","upper_fence","_data_extent","extent","flat","_full_width","_full_height","_chart","margin","top","right","bottom","left","width","height","yscale","scaleLinear","domain","clamp","yaxis","axisLeft","violin_scale_default","violin_scale","box_scale_default","box_scale","xscale","scaleBand","keys","xaxis","axisBottom","n_bins_default","n_bins","max_bins_multiplier","histogram","bin","thresholds","value","d","bins","key","_graphics","root_g","violins_g","boxes_g","outliers","metrics","max","quartile3","median","mean","iqr","quartile1","min","quantile","prototype","id_string","render","self","replaceChildren","common","create_dom_element","element_type","class_name","style","display","parent","format_select","format","get_supported_export_formats","text_content","toUpperCase","addEventListener","download_chart","filename","download_func_name","setPrototypeOf","download_chart_as_png","tmpLink","href","toBase64Image","setAttribute","click","remove","download_chart_as_svg","_tweak_c2s","offsetWidth","offsetHeight","options","animation","reponsive","svgContext","C2S","Chart","config","_config","encodeURIComponent","getSerializedSvg","getContext","contextId","__canvas","getAttribute","type","listener","eventListenerOptions","get_density","set_density","density","bin_centers","plot_data","half_bin_width","data_min","data_max","_get_plotting_data","datasets","label","_get_density_string","scales","y","title","text","update","get_n_bins","set_n_bins","x","ticks","stepSize","plugins","tooltip","callbacks","_get_tooltip_title_callback","get_bar_color","set_bar_color","bar_color","backgroundColor","bin_width","apply","index","j","sum","reduce","partialSum","val","n_decimals","items","dataIndex","toFixed","_render_chart","_render_control_panel","chart_data","categoryPercentage","barPercentage","scales_options","offset","grid","callback","Number","font","size","plugins_options","legend","parsing","normalized","slider","density_checkbox_id","density_checkbox","Boolean","checked","color_picker_container","window","iro","ColorPicker","color","layoutDirection","layout","component","ui","Wheel","Slider","sliderType","on","rgbaString","arr","ele","slice","a","indexOf","obj","get_bar_colors","set_bar_colors","bar_colors","isInteger","bar_select_id","bar_select","String","color_picker","set","select","append","svg_data","node","outerHTML","svg_blob","Blob","url","URL","createObjectURL","revokeObjectURL","selectAll","_render_violins","set_violin_scale","scale","set_box_scale","_render_boxes","_render_axis","g","is_g_ready","max_count","group","longest","xNum","bandwidth","enter","datum","area","x0","x1","curve","curveCatmullRom","boxes","box_width","group_box","outlier","whiskers","controls_container_id","n_bins_slider","show_violins_checkbox_id","show_violins_checkbox","show_boxes_checkbox_id","show_boxes_checkbox","show_outliers_checkbox_id","show_outliers_checkbox","violin_scale_slider","box_scale_slider","analysis","form","area_name","row","export_data_container","form_items_container","diameter_chart_container","weight_chart_container","diameter_chart_wrapper","weight_chart_wrapper","set_up","form_node","render_form","appendChild","fragment","DocumentFragment","form_factory","form_row","item_factory","tstring","mint","q_column","value_wrapper","eq","eq_in","eq_out","is_term","form_item","activate_autocomplete","table","q_table","number_key","denomination","submit_group","search","e","preventDefault","form_submit","reset","location","replace","pathname","operators_node","build_operators_node","form_obj","scroll_result","form_items","build_filter","scrollIntoView","behavior","block","inline","search_rows","limit","then","parsed_data","event_manager","publish","console","log","term","split","includes","tmpData","calculable","full_coins_reference_calculable","diameter_max","full_coins_reference_diameter_max","diameter_min","full_coins_reference_diameter_min","weight","full_coins_reference_weight","diameters","props","weights","ar_fields","order","lang","page_globals","WEB_CURRENT_LANG_CODE","process_result","Promise","resolve","sql_filter","parse_sql_filter","request_body","dedalo_get","join","count","data_manager","request","body","response","page","parse_catalog_data","result"],"sources":["charts/chart-wrapper.js","charts/chartjs/chartjs-chart-wrapper.js","charts/chartjs/histogram-wrapper.js","charts/chartjs/bar-chart-wrapper.js","charts/d3/d3-chart-wrapper.js","charts/d3/utils.js","charts/d3/boxvio-chart-wrapper.js","analysis.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Width (in pixels) of color picker\n * @type {number}\n */\nexport const COLOR_PICKER_WIDTH = 200\n\n/**\n * Default name for the chart -> when exporting,\n * `<name>.<format>`\n * @type {string}\n */\nconst DEFAULT_CHART_NAME = 'chart'\n\n/**\n * Color palette, totally stolen from matplotlib\n * @type {string[]}\n */\nexport const COLOR_PALETTE = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']\n\n\n/**\n * Chart wrapper class\n * \n * It clears the container div during render, so subclasses should work with the dom\n * after the render method of this superclass has been called\n * @class\n * @abstract\n * @param {Element} div_wrapper \n */\nexport function chart_wrapper(div_wrapper) {\n    if (this.constructor === chart_wrapper) {\n        throw new Error(\"Abstract class 'chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper._n_charts_created++;\n    /**\n     * Unique identifier for the chart.\n     * \n     * Subclasses MUST use this in order to assing IDs\n     * to DOM elements, in order to avoid bugs and cross-chart events\n     * @type {number}\n     */\n    this.id = chart_wrapper._n_charts_created\n    /**\n     * Div element wrapping the chart itself and\n     * the controls\n     * @type {Element}\n     * @protected\n     */\n    this.div_wrapper = div_wrapper\n    /**\n     * Div container for chart download\n     * @type {Element}\n     * @protected\n     */\n    this.download_chart_container = undefined\n    /**\n     * Div container for user controls\n     * Used freely by each subclass\n     * @type {Element}\n     * @protected\n     */\n    this.controls_container = undefined\n}\n\n/**\n * Amount of created charts\n * @type {number}\n * @static\n * @private\n */\nchart_wrapper._n_charts_created = 0;\n\n/**\n * Get a string representing the ID of the chart\n * @returns {string} the id as a string\n *          (`'chart1'`, `'chart2'`, ...)\n */\nchart_wrapper.prototype.id_string = function () {\n    return `chart${this.id}`\n}\n\n/**\n * Render the chart and controls\n * \n * Empties the div wrapper and resets properties\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name chart_wrapper#render\n * @function\n */\nchart_wrapper.prototype.render = function () {\n    // Save this chart_wrapper intance\n    /**\n     * This chart_wrapper intance\n     * @type {chart_wrapper}\n     */\n    const self = this\n    // Remove all children in the div_wrapper\n    this.div_wrapper.replaceChildren()\n    // Set controls container to undefined\n    this.controls_container = undefined\n    // Create the chart download section\n    this.download_chart_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'download_chart_container',\n        class_name: 'o-purple',\n        style: {\n            'display': 'flex',\n            'flex-direction': 'row',\n            'justify-content': 'center',\n        },\n        parent: this.div_wrapper,\n    })\n    const format_select = common.create_dom_element({\n        element_type: 'select',\n        id: 'chart_export_format',\n        style: {\n            'width': '80%',\n        },\n        parent: this.download_chart_container,\n        // TODO: add ARIA attributes?\n    })\n    for (const format of this.get_supported_export_formats()) {\n        common.create_dom_element({\n            element_type: 'option',\n            value: format,\n            text_content: format.toUpperCase(),\n            parent: format_select,\n        })\n    }\n    const chart_download_button = common.create_dom_element({\n        element_type: 'button',\n        text_content: 'Download',\n        style: {\n            'width': '20%',\n        },\n        parent: this.download_chart_container,\n    })\n    chart_download_button.addEventListener('click', () => {\n        self.download_chart(format_select.value)\n    })\n}\n\n/**\n * Download the chart as an image\n * \n * For each supported format in the subclass,\n * @see chart_wrapper#get_supported_export_formats\n * the subclass must implement a method called\n * `download_chart_as_<format>`\n * @param {string} format the image format\n * @function\n * @abstract\n * @name chart_wrapper#download_chart\n */\nchart_wrapper.prototype.download_chart = function (format) {\n    /**\n     * File name for the chart\n     * @type {string}\n     */\n    const filename = `${DEFAULT_CHART_NAME}.${format}`\n    /**\n     * Function name for downloading with the particular format\n     * @type {string}\n     */\n    const download_func_name = `download_chart_as_${format}`\n    if (this[download_func_name] === undefined) {\n        throw new Error(`${download_func_name} is not implemented!`)\n    }\n    this[download_func_name](filename)\n}\n\n/**\n * Get the supported chart export formats\n * \n * Subclasses must return their own supported formats, e.g.,\n * `['png', 'jpg', 'eps']`\n * @function\n * @returns {string[]} the supported formats\n * @abstract\n * @name chart_wrapper#get_supported_export_formats\n */\nchart_wrapper.prototype.get_supported_export_formats = function () {\n    throw new Error(`Abstract method 'chart_wrapper.download_chart' cannot be called`)\n}","\"use strict\";\n\nimport { chart_wrapper } from \"../chart-wrapper.js\";\n\n/**\n * Chart.js chart wrapper class\n * @class\n * @abstract\n * @param {Element} div_wrapper the div conatining the chart\n * @extends chart_wrapper\n */\nexport function chartjs_chart_wrapper(div_wrapper) {\n    if (this.constructor === chartjs_chart_wrapper) {\n        throw new Error(\"Abstract class 'chartjs_chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper.call(this, div_wrapper)\n    /**\n     * Canvas instance, will be created during\n     * render\n     * @type {HTMLCanvasElement}\n     * @protected\n     */\n    this.canvas = undefined\n    /**\n     * Chart instance (chart.js)\n     * @protected\n     */\n    this.chart = undefined\n}\n// Set prototype chain\nObject.setPrototypeOf(chartjs_chart_wrapper.prototype, chart_wrapper.prototype)\n\n/**\n * Render the chart (chartjs) and controls\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name chartjs_chart_wrapper#render\n * @function\n */\nchartjs_chart_wrapper.prototype.render = function () {\n    chart_wrapper.prototype.render.call(this)\n    // Create canvas\n    this.canvas = common.create_dom_element({\n        element_type: 'canvas',\n        id: 'result_graph',\n        class_name: 'o-blue',\n        parent: this.div_wrapper,\n    })\n    // Set chart instance to undefined\n    this.chart = undefined\n}\n\n/**\n * Get the supported chart export formats\n * @function\n * @returns {string[]} the supported formats\n * @name chartjs_chart_wrapper#get_supported_export_formats\n */\nchartjs_chart_wrapper.prototype.get_supported_export_formats = function () {\n    return ['png']\n}\n\n/**\n * Download the chart as png\n * @param {string} filename the name of the file\n * @function\n * @name chartjs_chart_wrapper#_download_chart_as_png\n */\nchartjs_chart_wrapper.prototype.download_chart_as_png = function (filename) {\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: this.chart.toBase64Image(),\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n}\n\n/**\n * FIXME: this is not working...\n * Download the chart as svg\n * @param {string} filename the name of the file\n * @function\n * @name chartjs_chart_wrapper#_download_chart_as_svg\n */\nchartjs_chart_wrapper.prototype.download_chart_as_svg = function (filename) {\n    // Tweak C2S library\n    this._tweak_c2s()\n    // Get original width and height\n    const width = this.canvas.offsetWidth\n    const height = this.canvas.offsetHeight\n    // TODO: Turn off responsiveness and animations\n    this.chart.options.animation = false\n    this.chart.options.reponsive = false\n    // Replicate chart in C2S space\n    const svgContext = C2S(width, height)\n    const svgChart = new Chart(svgContext, this.chart.config._config)\n    // Download\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: 'data:image/svg+xml;utf8,'\n            + encodeURIComponent(svgContext.getSerializedSvg()),\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n    // TODO: Turn on responsiveness and animations\n    this.chart.options.animation = true\n    this.chart.options.reponsive = true\n}\n\n/**\n * Some tweaks to the canvas2svg library are required for svg export to work\n * \n * Via: https://stackoverflow.com/questions/62249315/export-canvas-to-svg-file\n * @function\n * @private\n * @name chartjs_chart_wrapper#_tweak_c2s\n */\nchartjs_chart_wrapper.prototype._tweak_c2s = function () {\n    C2S.prototype.getContext = function (contextId) {\n        if (contextId === '2d' || contextId === '2D') {\n            return this;\n        }\n        return null;\n    }\n    C2S.prototype.style = function () {\n        return this.__canvas.style;\n    }\n    C2S.prototype.getAttribute = function (name) {\n        return this[name];\n    }\n    C2S.prototype.addEventListener = function (type, listener, eventListenerOptions) {\n        // nothing to do here, but we need this function :)\n    }\n}","\"use strict\";\n\nimport { chartjs_chart_wrapper } from \"./chartjs-chart-wrapper.js\";\nimport { COLOR_PICKER_WIDTH, COLOR_PALETTE } from \"../chart-wrapper.js\";\n\n/**\n * Histogram wrapper\n * @param {Element}  div_wrapper the div to work in\n * @param {number[]} data the data\n * @param {string} xlabel the label for the x-axis\n * @class\n * @extends chartjs_chart_wrapper\n */\nexport function histogram_wrapper(div_wrapper, data, xlabel) {\n    /*\n     * <Function>.call is a method that executes the defined function,\n     * but with the \"this\" variable pointing to the first argument,\n     * and the rest of the arguments being arguments of the function\n     * that is being \"called\". This essentially performs all of\n     * chart_wrapper's constructor logic on histogram_wrapper's \"this\".\n     */\n    chartjs_chart_wrapper.call(this, div_wrapper)\n\n    /**\n     * Data values\n     * @type {number[]}\n     * @private\n     */\n    this._data = data\n    /**\n     * Whether to perform a density plot\n     * @type {boolean}\n     * @private\n     */\n    this._density = false\n    /**\n     * Default number of bins\n     * @type {number}\n     * @private\n     */\n    this._n_bins_default = Math.ceil(Math.sqrt(this._data.length))\n    /**\n     * Number of bins in the histogram\n     * \n     * Defined as the square root of the\n     * amount of datapoints, computed\n     * during render\n     * @type {number}\n     * @private\n     */\n    this._n_bins = undefined\n    /** Label for the xaxis\n     * @type {string}\n     * @private\n    */\n    this._xlabel = xlabel\n    /**\n     * Number of decimals to display\n     * @type {number}\n     * @private\n     */\n    this._n_decimals = 3\n    /**\n     * Maximum number of bins as mutiplier of default\n     * @type {number}\n     * @private\n     */\n    this._max_bins_multiplier = 3\n    /**\n     * Default color for the bars in rgba\n     * @type {string}\n     * @private\n     */\n    this._bar_color = COLOR_PALETTE[0]\n}\n// Set prototype chain\nObject.setPrototypeOf(histogram_wrapper.prototype, chartjs_chart_wrapper.prototype)\n\n/**\n * Check whether we are doing a density plot\n * @returns {boolean} `true` if density plot,\n * \t\t\t`false` otherwise\n * @name histogram_wrapper#get_density\n * @function\n */\nhistogram_wrapper.prototype.get_density = function () {\n    return this._density\n}\n\n/**\n * Change the density plot attribute\n * @param density {boolean} `true` if density, `false` otherwise\n * @function\n * @name histogram_wrapper#set_density\n */\nhistogram_wrapper.prototype.set_density = function (density) {\n    this._density = density\n    if (!this.chart) {\n        return\n    }\n    // Update chart\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n    this.chart.data.datasets[0].label = this._get_density_string()\n    this.chart.data.datasets[0].data = plot_data\n    this.chart.options.scales.y.title.text = this._get_density_string()\n    this.chart.update()\n}\n\n/**\n * Get a string representing the plot mode\n * @returns {string} `'Density'` if we are in density\n * \t\t\tmode, `'Frequency'` otherwise\n * @function\n * @private\n * @name histogram_wrapper#_get_density_string\n */\nhistogram_wrapper.prototype._get_density_string = function () {\n    return this._density ? 'Density' : 'Frequency'\n}\n\n/**\n * Get the amount of bins in the histogram\n * @returns {number} the amount of bins\n * @function\n * @name histogram_wrapper#get_n_bins\n */\nhistogram_wrapper.prototype.get_n_bins = function () {\n    return this._n_bins\n}\n\n/**\n * Set a new number of bins for the histogram\n * \n * Updates chart instance accordingly\n * @param {number} n_bins amount of bins\n * @function\n * @name histogram_wrapper#set_n_bins\n */\nhistogram_wrapper.prototype.set_n_bins = function (n_bins) {\n    this._n_bins = n_bins\n    if (!this.chart) {\n        return\n    }\n    // Update chart\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n    this.chart.data.datasets[0].data = plot_data\n    this.chart.options.scales.x.min = data_min\n    this.chart.options.scales.x.max = data_max\n    this.chart.options.scales.x.ticks.stepSize = 2 * half_bin_width\n    this.chart.options.plugins.tooltip.callbacks.title =\n        this._get_tooltip_title_callback(bin_centers, half_bin_width)\n    this.chart.update()\n}\n\n/**\n * Get the color of the bars in the histogram\n * @returns {string} the bar color as an rgba string\n * @function\n * @name histogram_wrapper#get_bar_color\n */\nhistogram_wrapper.prototype.get_bar_color = function () {\n    return this._bar_color\n}\n\n/**\n * Set a new color for the bars in the histogram\n * \n * Updates the chart instance accordingly\n * @param {string} bar_color the new bar color for the histogram\n * @function\n * @name histogram_wrapper#set_bar_color\n */\nhistogram_wrapper.prototype.set_bar_color = function (bar_color) {\n    this._bar_color = bar_color\n    if (!this.chart) {\n        return\n    }\n    this.chart.data.datasets[0].backgroundColor = this._bar_color\n    this.chart.update()\n}\n\n/**\n * Get data needed to generate the chart\n * TODO: there is no need to recompute bin_centers unless the number of bins\n* \t\t has changed\n* @function\n* @name histogram_wrapper#_get_plotting_data\n* @private\n* \n* @returns {[number[], {x: number, y: number}[], number, number, number]}\n* \t\t\tthe bin centers, {bin centers, count per bin}, half of the bin width,\n* \t\t\tthe minimum and maximum of input data\n */\nhistogram_wrapper.prototype._get_plotting_data = function () {\n    const data_max = Math.max(...this._data)\n    const data_min = Math.min(...this._data)\n    const bin_width = (data_max - data_min) / this._n_bins\n    const half_bin_width = 0.5 * bin_width\n    /**\n     * Center of each bin\n     * @type {number[]}\n     */\n    const bin_centers = Array.apply(null, Array(this._n_bins)).map(\n        (value, index) => data_min + (2 * index + 1) * half_bin_width\n    )\n    // We bin with right-open intervals\n    /**\n     * Count per bin\n     * @type {number[]}\n     */\n    let entries = Array.apply(null, Array(this._n_bins)).map(() => 0)\n    for (let i = 0; i < this._data.length; i++) {\n        // If value is max, add it to last bin\n        if (this._data[i] === data_max) {\n            entries[this._n_bins - 1]++\n            continue\n        }\n        // Proceed as usual\n        for (let j = 0; j < this._n_bins; j++) {\n            if (this._data[i] >= bin_centers[j] - half_bin_width\n                && this._data[i] < bin_centers[j] + half_bin_width) {\n                entries[j]++\n                break\n            }\n        }\n    }\n    // Normalize if density\n    if (this._density) {\n        const sum = entries.reduce((partialSum, val) => partialSum + val, 0)\n        for (let j = 0; j < this._n_bins; j++) {\n            entries[j] /= (sum * bin_width);\n        }\n    }\n    return [\n        bin_centers,\n        bin_centers.map((val, i) => ({ x: val, y: entries[i] })),\n        half_bin_width,\n        data_min,\n        data_max,\n    ]\n}\n\n/**\n * Get callback function for tooltip title\n * @param {number[]} bin_centers the bin centers\n * @param {number} half_bin_width half of the bin width\n * @returns the callback function\n * @function\n * @private\n * @name histogram_wrapper#_get_tooltip_title_callback\n */\nhistogram_wrapper.prototype._get_tooltip_title_callback = function (bin_centers, half_bin_width) {\n    // Cannot use `this` inside inner function!!!\n    const xlabel = this._xlabel\n    const n_decimals = this._n_decimals\n    /**\n     * Callback function for the tooltip title\n     * @param {TooltipItem[]} items the tooltip item contexts\n     * @returns {string} the title of the tooltip\n     * @function\n     * @name histogram_wrapper#_get_tooltip_title_callback~inner\n     */\n    const callback = function (items) {\n        if (!items.length) {\n            return ''\n        }\n        const item = items[0]\n        const index = item.dataIndex\n        const min = bin_centers[index] - half_bin_width\n        const max = bin_centers[index] + half_bin_width\n        return `${xlabel}: ${min.toFixed(n_decimals)} `\n            + `- ${max.toFixed(n_decimals)}`\n    }\n    return callback\n}\n\n/**\n * Render the chart and the control panel\n * @function\n * @name histogram_wrapper#render\n */\nhistogram_wrapper.prototype.render = function () {\n    // Call super render method\n    chartjs_chart_wrapper.prototype.render.call(this)\n    // Render chart\n    this._render_chart()\n    // Render control panel\n    this._render_control_panel()\n}\n\n/**\n * Render the chart\n * @function\n * @private\n * @name histogram_wrapper#_render_chart\n */\nhistogram_wrapper.prototype._render_chart = function () {\n    this._n_bins = this._n_bins_default\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n\n    // Split chart options\n    const chart_data = {\n        datasets: [{\n            label: this._get_density_string(),\n            data: plot_data,\n            categoryPercentage: 1,\n            barPercentage: 1,\n            backgroundColor: this._bar_color,\n        }],\n    }\n    const scales_options = {\n        x: {\n            type: 'linear',  // otherwise it goes to a category axis...\n            min: data_min,\n            max: data_max,\n            offset: false,\n            grid: {\n                offset: false,\n            },\n            ticks: {\n                stepSize: 2 * half_bin_width,\n                callback: (label, index, labels) => {\n                    return Number(label).toFixed(this._n_decimals)\n                }\n            },\n            title: {\n                display: true,\n                text: this._xlabel,\n                font: {\n                    size: 14\n                },\n            }\n        },\n        y: {\n            title: {\n                display: true,\n                text: this._get_density_string(),\n                font: {\n                    size: 14,\n                },\n            },\n        },\n    }\n    const plugins_options = {\n        legend: {\n            display: false,\n        },\n        tooltip: {\n            callbacks: {\n                title: this._get_tooltip_title_callback(bin_centers, half_bin_width),\n            },\n        },\n    }\n\n    // Render the graph\n    this.chart = new Chart(this.canvas, {\n        type: 'bar',\n        data: chart_data,\n        options: {\n            scales: scales_options,\n            plugins: plugins_options,\n            parsing: false,\n            normalized: true,\n        },\n    })\n}\n\n\n/**\n * Render the control panel\n * @function\n * @private\n * @name histogram_wrapper#_render_control_panel\n */\nhistogram_wrapper.prototype._render_control_panel = function () {\n    // Save this histogram wrapper instance, because when we change scope\n    // we may still need to refer to it\n    /**\n     * This histogram_wrapper instance\n     * @type {histogram_wrapper}\n     */\n    const self = this\n    // Create controls container\n    this.controls_container = common.create_dom_element({\n        element_type: 'div',\n        id: `${this.id_string()}_controls`,\n        class_name: 'o-green',\n        parent: this.div_wrapper,\n    })\n    /**\n     * Slider for number of bins\n     * @type {Element}\n     */\n    const slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        value: this._n_bins_default,\n        parent: this.controls_container,\n    })\n    slider.setAttribute('min', 1)\n    slider.setAttribute('max', this._max_bins_multiplier * this._n_bins_default)\n    slider.addEventListener('input', () => {\n        this.set_n_bins(Number(slider.value))\n    })\n    /**\n     * Reset button for the slider\n     * @type {Element}\n     */\n    const slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    slider_reset.addEventListener('click', () => {\n        slider.value = this._n_bins_default\n        this.set_n_bins(Number(slider.value))\n    })\n\n    const density_checkbox_id = `${this.id_string()}_density_checkbox`\n    /**\n     * Checkbox for density plot\n     * @type {Element}\n     */\n    const density_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: density_checkbox_id,\n        parent: this.controls_container,\n    })\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const density_checkbox_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Density',\n        parent: this.controls_container,\n    })\n    density_checkbox_label.setAttribute('for', density_checkbox_id)\n    density_checkbox.addEventListener('change', () => {\n        this.set_density(Boolean(density_checkbox.checked))\n    })\n    /** iro.js color picker */\n    const color_picker_container = common.create_dom_element({\n        element_type: 'div',\n        id: `${this.id_string()}_color_picker_container`,\n        parent: this.controls_container\n    })\n    const color_picker = new window.iro.ColorPicker(color_picker_container, {\n        color: this._bar_color,\n        width: COLOR_PICKER_WIDTH,\n        layoutDirection: 'horizontal',\n        layout: [\n            {\n                component: window.iro.ui.Wheel,\n            },\n            {\n                component: window.iro.ui.Slider,\n            },\n            {\n                component: window.iro.ui.Slider,\n                options: {\n                    sliderType: 'alpha',\n                }\n            },\n        ],\n    })\n    color_picker.on('color:change', function (color) {\n        self.set_bar_color(color.rgbaString)\n    })\n}","\"use strict\";\n\nimport { chartjs_chart_wrapper } from \"./chartjs-chart-wrapper.js\";\nimport { COLOR_PALETTE, COLOR_PICKER_WIDTH } from \"../chart-wrapper.js\";\n\n/**\n * Bar chart wrapper\n * @param {Element} div_wrapper the div to work in\n * @param {number[] | string[] | {[key: string | number]: number}} data\n * \t\t  input data. Either an array of occurences, which are parsed by\n * \t\t  the bar chart wrapper (e.g., `['bronze', 'bronze', 'iron']`), or\n * \t\t  an object with keys and counts (e.g. `{'bronze': 2, 'iron': 1}`)\n * @param {string} ylabel the label for the y-axis\n * @class\n * @extends chartjs_chart_wrapper\n */\nexport function bar_chart_wrapper(div_wrapper, data, ylabel) {\n    chartjs_chart_wrapper.call(this, div_wrapper)\n    /**\n     * Data for the bar chart\n     * @type {{labels: string[] | number[], values: number[]}}\n     * @private\n     */\n    this._data = undefined\n    if (Array.isArray(data)) {\n        this._check_array_valid(data)\n        this._data = this._parse_array(data)\n    } else {\n        this._check_object_valid(data)\n        this._data = this._parse_object(data)\n    }\n    /**\n     * Label for the y-axis\n     * @type {string}\n     * @private\n     */\n    this._ylabel = ylabel\n    /**\n     * Color for each bar\n     * @type {string[]}\n     * @private\n     */\n    this._bar_colors = Array(this._data.labels.length).fill(COLOR_PALETTE[0])\n}\n// Set prototype chain\nObject.setPrototypeOf(bar_chart_wrapper.prototype, chartjs_chart_wrapper.prototype)\n\n/**\n * Check if the input data array is valid\n * \n * Throws error otherwise\n * @param {string[] | number[]} arr the array to check\n * @function\n * @private\n * @name bar_chart_wrapper#_check_array_valid\n */\nbar_chart_wrapper.prototype._check_array_valid = function (arr) {\n    if (!arr.length) {\n        throw new Error(\"Input array is empty!\")\n    }\n    /**\n     * Type of the first element of the array\n     * @type {string}\n     */\n    const type = typeof arr[0]\n    if (type !== 'number' && type !== 'string') {\n        throw new Error(\"Input array is not made of numbers or strings\")\n    }\n    for (const ele of arr.slice(1)) {\n        if (typeof ele !== type) {\n            throw new Error(\"Input array combines multiple types\")\n        }\n    }\n}\n\n/**\n * Parse the input data array\n * \n * @param {string[] | number[]} arr the input array\n * @returns {{labels: string[] | number[], values: number[]}}\n * \t\t\tthe parsed input data in internal format\n * @function\n * @private\n * @name bar_chart_wrapper#_parse_array\n */\nbar_chart_wrapper.prototype._parse_array = function (arr) {\n    /**\n     * Unique values of the input array\n     * @type {number[] | string[]}\n     */\n    const labels = arr.filter((v, i, a) => a.indexOf(v) === i)\n    /**\n     * Count for each unique value in the input array\n     * @type {number[]}\n     */\n    const values = labels.map((v) => arr.filter((ele) => ele === v).length)\n    /**\n     * Parsed data\n     * @type {{labels: string[] | number[], values: number[]}}\n     */\n    let parsed = {\n        labels: labels,\n        values: values,\n    }\n    return parsed\n}\n\n/**\n * Check if the input data object is valid\n * \n * Throws error otherwise\n * @param {{[key: string | number]: number}} obj the object to check\n * @function\n * @private\n * @name bar_chart_wrapper#_check_object_valid\n */\nbar_chart_wrapper.prototype._check_object_valid = function (obj) {\n    if (!obj) {\n        throw new Error(\"Input data object is null or undefined\")\n    }\n    /**\n     * Keys of the input data object\n     * @type {number[] | string[]}\n     */\n    const keys = Object.keys(obj)\n    if (!keys.length) {\n        throw new Error(\"Input data object is empty\")\n    }\n    /**\n     * Values of the input data object\n     * @type {number}\n     */\n    const values = Object.values(obj)\n    for (const val of values) {\n        if (typeof val !== 'number') {\n            throw new Error(\"A value in the input data object is not a number\")\n        }\n    }\n}\n\n/**\n * Parse the input data object\n * \n * @param {{[key: string | number]: number}} obj the input array\n * @returns {{labels: string[] | number[], values: number[]}}\n * \t\t\tthe parsed input data in internal format\n * @function\n * @private\n * @name bar_chart_wrapper#_parse_object\n */\nbar_chart_wrapper.prototype._parse_object = function (obj) {\n    return {\n        labels: Object.keys(obj),\n        values: Object.values(obj),\n    }\n}\n\n/**\n * Get the bar colors\n * @returns {string[]} the bar colors as rgba strings\n */\nbar_chart_wrapper.prototype.get_bar_colors = function () {\n    return this._bar_colors\n}\n\n/**\n * Set new bar colors\n * \n * Updates chart instance accordingly\n * @param {string[]} bar_colors the new bar colors as rgba strings\n */\nbar_chart_wrapper.prototype.set_bar_colors = function (bar_colors) {\n    this._bar_colors = bar_colors\n    this.chart.data.datasets[0].backgroundColor = bar_colors\n    this.chart.update()\n}\n\n/**\n * Set a color for a given bar\n * @param {number} index the index of the bar \n * @param {string} bar_color the new bar color as an rgba string\n */\nbar_chart_wrapper.prototype.set_bar_color = function (index, bar_color) {\n    if (typeof index !== 'number') {\n        throw new Error(\"Index is not a number\")\n    } else if (!Number.isInteger(index)) {\n        throw new Error(\"Index is not an integer\")\n    } else if (index < 0 || index >= this._data.labels.length) {\n        throw new Error(\"Index is out of bounds\")\n    }\n    this._bar_colors[index] = bar_color\n    this.chart.data.datasets[0].backgroundColor[index] = bar_color\n    this.chart.update()\n}\n\n/**\n * Render the chart and the control panel\n * @function\n * @name bar_chart_wrapper#render\n */\nbar_chart_wrapper.prototype.render = function () {\n    // Call super render method\n    chartjs_chart_wrapper.prototype.render.call(this)\n    // Render chart\n    this._render_chart()\n    // Render control panel\n    this._render_control_panel()\n}\n\n/**\n * Render the chart\n * @function\n * @private\n * @name bar_chart_wrapper#_render_chart\n */\nbar_chart_wrapper.prototype._render_chart = function () {\n    const chart_data = {\n        labels: this._data.labels,\n        datasets: [{\n            label: this._ylabel,\n            data: this._data.values,\n            backgroundColor: this._bar_colors,\n        }],\n    }\n    const scales_options = {\n        y: {\n            title: {\n                display: true,\n                text: this._ylabel,\n                font: {\n                    size: 14,\n                }\n            },\n        },\n    }\n    const plugins_options = {\n        legend: {\n            display: false,\n        },\n    }\n    // Render the graph\n    this.chart = new Chart(this.canvas, {\n        type: 'bar',\n        data: chart_data,\n        options: {\n            scales: scales_options,\n            plugins: plugins_options,\n            normalized: true,\n        },\n    })\n}\n\n/**\n * Render the control panel\n * @function\n * @private\n * @name bar_chart_wrapper#_render_control_panel\n */\nbar_chart_wrapper.prototype._render_control_panel = function () {\n    /**\n     * This bar_chart_wrapper instance\n     * @type {bar_chart_wrapper}\n     */\n    const self = this\n    // Create controls container\n    this.controls_container = common.create_dom_element({\n        element_type: 'div',\n        id: `${this.id_string()}_controls`,\n        class_name: 'o-green',\n        parent: this.div_wrapper,\n    })\n\n    const bar_select_id = `${this.id_string()}_bar_select`\n    /**\n     * Select for bar choice\n     * @type {Element}\n     */\n    const bar_select = common.create_dom_element({\n        element_type: 'select',\n        id: bar_select_id,\n        parent: this.controls_container,\n        // TODO: add ARIA attributes?\n    })\n    for (const [index, label] of this._data.labels.entries()) {\n        common.create_dom_element({\n            element_type: 'option',\n            value: String(index),  // 0 as a number becomes false as a boolean...\n            text_content: label,\n            parent: bar_select,\n        })\n    }\n\n    /** iro.js color picker */\n    const color_picker_container = common.create_dom_element({\n        element_type: 'div',\n        id: `${this.id_string()}_color_picker_container`,\n        parent: this.controls_container\n    })\n    const color_picker = new window.iro.ColorPicker(color_picker_container, {\n        color: this._bar_colors[0],\n        width: COLOR_PICKER_WIDTH,\n        layoutDirection: 'horizontal',\n        layout: [\n            {\n                component: window.iro.ui.Wheel,\n            },\n            {\n                component: window.iro.ui.Slider,\n            },\n            {\n                component: window.iro.ui.Slider,\n                options: {\n                    sliderType: 'alpha',\n                }\n            },\n        ],\n    })\n    // Bar select change event\n    bar_select.addEventListener('change', () => {\n        const index = Number(bar_select.value)\n        color_picker.color.set(self._bar_colors[index])\n    })\n    // Color change event\n    color_picker.on('color:change', function (color) {\n        const index = Number(bar_select.value)\n        self.set_bar_color(index, color.rgbaString)\n    })\n}","\"use strict\";\n\nimport { chart_wrapper } from \"../chart-wrapper\";\n\n/**\n * D3 chart wrapper class\n * \n * Appends an `svg` tag to the provided div, so that it spans all width\n * \n * Subclasses MUST specify the viewBox of the svg, so that it responds to window resizing\n * @param {Element} div_wrapper the div containing the chart\n * @class\n * @abstract\n * @extends chart_wrapper\n */\nexport function d3_chart_wrapper(div_wrapper) {\n    if (this.constructor === d3_chart_wrapper) {\n        throw new Error(\"Abstract class 'd3_chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper.call(this, div_wrapper)\n    /**\n     * D3 selection object for the root `svg` tag\n     * @protected\n     */\n    this.svg = undefined\n\n}\n// Set prototype chain\nObject.setPrototypeOf(d3_chart_wrapper.prototype, chart_wrapper.prototype)\n\n/**\n * Render the chart (d3) and controls\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name d3_chart_wrapper#render\n * @function\n */\nd3_chart_wrapper.prototype.render = function () {\n    chart_wrapper.prototype.render.call(this)\n\n    this.svg = d3.select(this.div_wrapper)\n        .append('svg')\n        .attr('version', '1.1') // When drawing SVG to canvas with an `Image`, if we don't add version and xmlns the `Image` will never load :(\n        .attr('xmlns', 'http://www.w3.org/2000/svg')\n        .attr('width', '100%')\n}\n\n/**\n * Get the supported chart export formats\n * @function\n * @returns {string[]} the supported formats\n * @name d3_chart_wrapper#get_supported_export_formats\n */\nd3_chart_wrapper.prototype.get_supported_export_formats = function () {\n    return ['svg']\n}\n\n/**\n * Download the chart as svg\n * @param {string} filename the name of the file\n * @function\n * @name d3_chart_wrapper#_download_chart_as_svg\n */\nd3_chart_wrapper.prototype.download_chart_as_svg = function (filename) {\n    const svg_data = this.svg.node().outerHTML\n    const svg_blob = new Blob([svg_data], { type: \"image/svg+xml;charset=utf-8\" })\n    const url = URL.createObjectURL(svg_blob)\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: url,\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n    URL.revokeObjectURL(url)\n}","/**\n * Toggle visibility of a d3 selection element\n * @param {d3.selection} element the elememt\n */\nexport function toggle_visibility(element) {\n    if (element.attr('opacity') == 0) {\n        element.transition().attr('opacity', 1)\n    } else {\n        element.transition().attr('opacity', 0)\n    }\n}\n\n/**\n * Get an array of values, evenly spaced over an\n * interval\n * \n * https://gist.github.com/davebiagioni/1ac21feb1c2db04be4e6\n * @param {number} start start value\n * @param {number} stop stop value\n * @param {number} nsteps amount of spets\n * @returns {number[]} the values\n */\nexport function linspace(start, stop, nsteps){\n    const delta = (stop-start)/(nsteps-1)\n    return d3.range(nsteps).map((i) => start+i*delta)\n}","\"use strict\";\n\nimport { d3_chart_wrapper } from \"./d3-chart-wrapper\";\nimport { COLOR_PALETTE } from \"../chart-wrapper\";\nimport { toggle_visibility, linspace } from \"./utils\";\n\n\n/**\n * Boxplot + violin chart wrapper\n * \n * Inspired in http://bl.ocks.org/asielen/d15a4f16fa618273e10f\n * \n * @param {Element}  div_wrapper the div to work in\n * @param {{[group_name: string]: number[]}} data the input data: group name\n *        and array of values\n * @param {string} ylabel the y label\n * @class\n * @extends d3_chart_wrapper\n */\nexport function boxvio_chart_wrapper(div_wrapper, data, ylabel) {\n    d3_chart_wrapper.call(this, div_wrapper)\n    /**\n     * Data: group name to array of values\n     * @type {Object.<string, number[]>}\n     * @private\n     */\n    this._data = data\n    /**\n     * The label for the y axis\n     * @type {string}\n     * @private\n     */\n    this._ylabel = ylabel\n    /**\n     * Boxplot metrics for each group name\n     * @type {{[group_name: string]: {\n     *  max: number,\n     *  upper_fence: number,\n     *  quartile3: number,\n     *  median: number,\n     *  mean: number,\n     *  iqr: number,\n     *  quartile1: number,\n     *  lower_fence: number,\n     *  min: number,\n     * }}}\n     * @private\n     */\n    this._metrics = {}\n    for (const [name, values] of Object.entries(data)) {\n        this._metrics[name] = calc_metrics(values)\n    }\n    /**\n     * Outliers per group name\n     * @type {{[group_name: string]: number[]}}\n     * @private\n     */\n    this._outliers = {}\n    for (const [name, values] of Object.entries(this._data)) {\n        this._outliers[name] = values.filter(\n            (v) => v < this._metrics[name].lower_fence || v > this._metrics[name].upper_fence\n        )\n    }\n    /**\n     * Maximum and minimum of the input data\n     * @type {[number, number]}\n     */\n    this._data_extent = d3.extent(Object.values(this._data).flat())\n    /**\n     * Full width of svg\n     * @type {number}\n     */\n    this._full_width = 960\n    /**\n     * Full height of svg\n     * @type {number}\n     */\n    this._full_height = 420\n    /**\n     * Non-graphic components of the chart: setting, scales, etc.\n     * @private\n     */\n    this._chart = {}\n    this._chart.margin = { top: 15, right: 3, bottom: 23, left: 50 }\n    this._chart.width = this._full_width - this._chart.margin.left - this._chart.margin.right\n    this._chart.height = this._full_height - this._chart.margin.top - this._chart.margin.bottom\n    this._chart.yscale = d3.scaleLinear()\n        .range([this._chart.height, 0])\n        .domain(this._data_extent)\n        .clamp(true)  // when input outside of domain, its output is clamped to range\n    this._chart.yaxis = d3.axisLeft(this._chart.yscale)\n    this._chart.violin_scale_default = 0.8\n    this._chart.violin_scale = this._chart.violin_scale_default\n    this._chart.box_scale_default = 0.3\n    this._chart.box_scale = this._chart.box_scale_default\n    this._chart.xscale = d3.scaleBand()\n        .domain(Object.keys(this._data))\n        .range([0, this._chart.width])\n        // .padding(1-this._chart.violin_scale)     // This is important: it is the space between 2 groups. 0 means no padding. 1 is the maximum.\n    this._chart.xaxis = d3.axisBottom(this._chart.xscale)\n    this._chart.n_bins_default = 15\n    this._chart.n_bins = this._chart.n_bins_default\n    this._chart.max_bins_multiplier = 3\n    this._chart.histogram = d3.bin()\n        .domain(this._chart.yscale.domain())\n        // TODO: compute number of bins automatically depending on the range of the data\n        .thresholds(\n            linspace(this._data_extent[0], this._data_extent[1], this._chart.n_bins+1)\n        )\n        .value((d) => d)\n    this._chart.bins = Object.entries(this._data).map(\n        ([name, values]) => {return {key: name, value: this._chart.histogram(values)}}\n    )\n    /**\n     * Graphic components of the chart: d3 selection objects\n     * @private\n     * @type {{[name: string]: d3.selection}}\n     */\n    this._graphics = {\n        root_g: null,\n        violins_g: null,\n        boxes_g: null,\n        outliers: {},\n    }\n}\n// Set prototype chain\nObject.setPrototypeOf(boxvio_chart_wrapper.prototype, d3_chart_wrapper.prototype)\n\n/**\n * Set a new number of bins for the violin plot\n * @function\n * @param {number} n_bins the number of bins\n * @name boxvio_chart_wrapper#set_n_bins\n */\nboxvio_chart_wrapper.prototype.set_n_bins = function (n_bins) {\n    this._chart.n_bins = n_bins\n    this._chart.histogram.thresholds(\n        linspace(this._data_extent[0], this._data_extent[1], n_bins+1)\n    )\n    this._chart.bins = Object.entries(this._data).map(\n        ([name, values]) => {return {key: name, value: this._chart.histogram(values)}}\n    )\n    // Remove the violin graphics, only leaving its root g tag (violins_g)\n    this._graphics.violins_g.selectAll('*').remove()\n    this._render_violins(true)\n}\n\n/**\n * Set the scale for the violins\n * @function\n * @param {number} scale the scale [0, 1]\n * @name boxvio_chart_wrapper#set_violin_scale\n */\nboxvio_chart_wrapper.prototype.set_violin_scale = function (scale) {\n    this._chart.violin_scale = scale\n    // Remove the violin graphics, only leaving its root g tag (violins_g)\n    this._graphics.violins_g.selectAll('*').remove()\n    this._render_violins(true)\n}\n\n/**\n * Set the scale for the boxes\n * @function\n * @param {number} scale the scale [0, 1]\n * @name boxvio_chart_wrapper#set_box_scale\n */\n boxvio_chart_wrapper.prototype.set_box_scale = function (scale) {\n    this._chart.box_scale = scale\n    // Remove the box graphics, only leaving its root g tag (boxes_g)\n    this._graphics.boxes_g.selectAll('*').remove()\n    this._render_boxes(true)\n}\n\n/**\n * Render the chart and the control panel\n * @function\n * @name boxvio_chart_wrapper#render\n */\nboxvio_chart_wrapper.prototype.render = function () {\n    // Call super render method\n    d3_chart_wrapper.prototype.render.call(this)\n    // Render chart\n    this._render_chart()\n    // Render control panel\n    this._render_control_panel()\n}\n\n/**\n * Render the chart\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_chart\n */\nboxvio_chart_wrapper.prototype._render_chart = function () {\n\n    // Set viewBox of svg\n    this.svg.attr('viewBox', `0 0 ${this._full_width} ${this._full_height}`)\n\n    // Root g tag\n    this._graphics.root_g = this.svg.append('g')\n        .attr('transform', `translate(${this._chart.margin.left},${this._chart.margin.top})`)\n\n    this._render_axis()\n    this._render_violins()\n    this._render_boxes()\n\n}\n\n/**\n * Render the axis\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_axis\n */\nboxvio_chart_wrapper.prototype._render_axis = function () {\n    const g = this._graphics.root_g\n    // Render x axis\n    g.append('g')\n        .attr('transform', `translate(0,${this._chart.height})`)\n        .call(this._chart.xaxis)\n    // Render y axis\n    g.append('g')\n        .call(this._chart.yaxis)\n\n    // Render Y axis label\n    g.append('text')\n        .attr('text-anchor', 'middle')\n        .attr('transform', 'rotate(-90)')\n        .attr('y', -this._chart.margin.left + 20)\n        .attr('x', -this._chart.height / 2)\n        .text(this._ylabel);\n}\n\n/**\n * Render the violins\n * @function\n * @private\n * @param {boolean} is_g_ready whether the g tag for violins is\n *        set up (default: `false`)\n * @name boxvio_chart_wrapper#_render_violins\n */\nboxvio_chart_wrapper.prototype._render_violins = function (is_g_ready=false) {\n\n    const chart = this._chart\n    const g = this._graphics.root_g\n\n    // Get the largest count in a bin, as it will be the maximum width\n    let max_count = 0\n    for (const group of chart.bins) {\n        const longest = d3.max(group.value.map((v) => v.length))\n        if (longest > max_count) {\n            max_count = longest\n        }\n    }\n\n    // Make a scale linear to map bin counts to bandwidth\n    const xNum = d3.scaleLinear()\n        .range([0, chart.xscale.bandwidth()])\n        .domain([-max_count, max_count])\n\n    // Render\n    if (!is_g_ready) {\n        this._graphics.violins_g = g.append('g')\n    }\n    this._graphics.violins_g\n        .selectAll('violin')\n        .data(chart.bins)\n        .enter()  // Working per group now\n        .append('g')\n            .attr('transform', (d) => `translate(${chart.xscale(d.key)},0)`)\n        .append('path')\n            .datum((d) => d.value)  // Working per bin within a group\n            .style('stroke', 'gray')\n            .style('stroke-width', 0.4)\n            .style('fill', 'ghostwhite')\n            .attr('d', d3.area()\n                .x0((d) => xNum(-d.length*chart.violin_scale))\n                .x1((d) => xNum(d.length*chart.violin_scale))\n                .y((d) => chart.yscale(d.x0))\n                .curve(d3.curveCatmullRom)\n        )\n\n}\n\n/**\n * Render the boxes (including whiskers and outliers)\n * @function\n * @private\n * @param {boolean} is_g_ready whether the g tag for boxes is\n *        set up (default: `false`)\n * @name boxvio_chart_wrapper#_render_boxes\n */\nboxvio_chart_wrapper.prototype._render_boxes = function (is_g_ready=false) {\n\n    const chart = this._chart\n    const g = this._graphics.root_g\n\n    // Draw\n    if (!is_g_ready) {\n        this._graphics.boxes_g = g.append('g')\n    }\n    const boxes = this._graphics.boxes_g\n    const bandwidth = chart.xscale.bandwidth()\n    const box_width = this._chart.box_scale * bandwidth\n\n    const whiskers_lw = 2\n    const median_lw = 3\n\n    // Iterate over the groups\n    for (const [i, name] of Object.entries(Object.keys(this._data))) {\n\n        const metrics = this._metrics[name]\n        const color = COLOR_PALETTE[i % COLOR_PALETTE.length]  // loop around!\n\n        const group_box = boxes.append('g')\n            .attr('transform', `translate(${chart.xscale(name) + bandwidth / 2},0)`)\n\n        // Draw outliers\n        this._graphics.outliers[name] = group_box.append('g')\n        const outliers = this._graphics.outliers[name]\n        for (const outlier of this._outliers[name]) {\n            outliers.append('circle')\n                .attr('cx', 0)\n                .attr('cy', chart.yscale(outlier))\n                .attr('r', 0.027*bandwidth)\n                .style('fill', color)\n                .style('opacity', 0.7)\n        }\n\n        // Draw whiskers\n        const whiskers = group_box.append('g')\n        whiskers.append('line')  // vertical line\n            .attr('x1', 0)\n            .attr('y1', chart.yscale(metrics.lower_fence))\n            .attr('x2', 0)\n            .attr('y2', chart.yscale(metrics.upper_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n        whiskers.append('line') // lower horizontal\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.lower_fence))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.lower_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n        whiskers.append('line') // upper horizontal\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.upper_fence))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.upper_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n\n        // Draw IQR box\n        const iqr = group_box.append('g')\n        iqr.append('rect')  // iqr rect\n            .attr('x', -box_width / 2)\n            .attr('y', chart.yscale(metrics.quartile3))\n            .attr('width', box_width)\n            .attr('height', chart.yscale(metrics.quartile1) - chart.yscale(metrics.quartile3))\n            .attr('fill', color)\n        iqr.append('line')  // median line\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.median))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.median))\n            .attr('stroke', 'black')\n            .attr('stroke-width', median_lw)\n        iqr.append('circle')  // median dot\n            .attr('cx', 0)\n            .attr('cy', chart.yscale(metrics.median))\n            .attr('r', 4.5)\n            .style('fill', 'white')\n            .attr('stroke', 'black')\n            .attr('stroke-width', 2)\n    }\n\n}\n\n\n\n/**\n * Render the control panel\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_control_panel\n */\nboxvio_chart_wrapper.prototype._render_control_panel = function () {\n\n    // Create controls container\n    const controls_container_id = `${this.id_string()}_controls`\n    this.controls_container = common.create_dom_element({\n        element_type: 'div',\n        id: controls_container_id,\n        class_name: 'o-green',\n        parent: this.div_wrapper,\n    })\n\n    /**\n     * Slider for number of bins\n     * @type {Element}\n     */\n    const n_bins_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        value: this._chart.n_bins_default,\n        parent: this.controls_container,\n    })\n    n_bins_slider.setAttribute('min', 1)\n    n_bins_slider.setAttribute('max', this._chart.max_bins_multiplier * this._chart.n_bins_default)\n    n_bins_slider.addEventListener('input', () => {\n        this.set_n_bins(Number(n_bins_slider.value))\n    })\n    /**\n     * Reset button for the n_bins_slider\n     * @type {Element}\n     */\n    const n_bins_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    n_bins_slider_reset.addEventListener('click', () => {\n        n_bins_slider.value = this._chart.n_bins_default\n        this.set_n_bins(Number(n_bins_slider.value))\n    })\n\n    const show_violins_checkbox_id = `${this.id_string()}_show_violins_checkbox`\n    /**\n     * Checkbox for showing violins\n     * @type {Element}\n     */\n    const show_violins_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: show_violins_checkbox_id,\n        parent: this.controls_container,\n    })\n    show_violins_checkbox.checked = true\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const show_violins_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Show violins',\n        parent: this.controls_container,\n    })\n    show_violins_label.setAttribute('for', show_violins_checkbox_id)\n    show_violins_checkbox.addEventListener('change', () => {\n        toggle_visibility(this._graphics.violins_g)\n    })\n\n    const show_boxes_checkbox_id = `${this.id_string()}_show_boxes_checkbox`\n    /**\n     * Checkbox for showing boxes\n     * @type {Element}\n     */\n     const show_boxes_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: show_boxes_checkbox_id,\n        parent: this.controls_container,\n    })\n    show_boxes_checkbox.checked = true\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const show_boxes_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Show boxes',\n        parent: this.controls_container,\n    })\n    show_boxes_label.setAttribute('for', show_boxes_checkbox_id)\n    show_boxes_checkbox.addEventListener('change', () => {\n        toggle_visibility(this._graphics.boxes_g)\n    })\n\n    const show_outliers_checkbox_id = `${this.id_string()}_show_outliers_checkbox`\n    /**\n     * Checkbox for showing outliers\n     * @type {Element}\n     */\n    const show_outliers_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: show_outliers_checkbox_id,\n        parent: this.controls_container,\n    })\n    show_outliers_checkbox.checked = true\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const show_outliers_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Show outliers',\n        parent: this.controls_container,\n    })\n    show_outliers_label.setAttribute('for', show_outliers_checkbox_id)\n    show_outliers_checkbox.addEventListener('change', () => {\n        for (const group of Object.values(this._graphics.outliers)) {\n            toggle_visibility(group)\n        }\n    })\n\n    /**\n     * Slider for violin scale\n     * @type {Element}\n     */\n    const violin_scale_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        // value: this._chart.violin_scale_default,  // This does not work here?\n        parent: this.controls_container,\n    })\n    violin_scale_slider.setAttribute('min', 0)\n    violin_scale_slider.setAttribute('max', 1)\n    violin_scale_slider.setAttribute('step', 0.05)\n    violin_scale_slider.value = this._chart.violin_scale_default\n    violin_scale_slider.addEventListener('input', () => {\n        this.set_violin_scale(Number(violin_scale_slider.value))\n    })\n    /**\n     * Reset button for the violin_scale_slider\n     * @type {Element}\n     */\n    const violin_scale_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    violin_scale_slider_reset.addEventListener('click', () => {\n        violin_scale_slider.value = this._chart.violin_scale_default\n        this.set_violin_scale(Number(violin_scale_slider.value))\n    })\n\n    /**\n     * Slider for box scale\n     * @type {Element}\n     */\n     const box_scale_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        // value: this._chart.box_scale_default,  // This does not work here?\n        parent: this.controls_container,\n    })\n    box_scale_slider.setAttribute('min', 0)\n    box_scale_slider.setAttribute('max', 1)\n    box_scale_slider.setAttribute('step', 0.05)\n    box_scale_slider.value = this._chart.box_scale_default\n    box_scale_slider.addEventListener('input', () => {\n        this.set_box_scale(Number(box_scale_slider.value))\n    })\n    /**\n     * Reset button for the box_scale_slider\n     * @type {Element}\n     */\n    const box_scale_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    box_scale_slider_reset.addEventListener('click', () => {\n        box_scale_slider.value = this._chart.box_scale_default\n        this.set_box_scale(Number(box_scale_slider.value))\n    })\n\n}\n\n// HELPER FUNCTIONS\n\n/**\n * Compute (boxplot) metrics for the data\n * @param {number[]} values the data values\n * @returns {{\n *  max: number,\n *  upper_fence: number,\n *  quartile3: number,\n *  median: number,\n *  mean: number,\n *  iqr: number,\n *  quartile1: number,\n *  lower_fence: number,\n *  min: number,\n * }}\n */\nfunction calc_metrics(values) {\n    const metrics = {\n        max: null,\n        upper_fence: null,\n        quartile3: null,\n        median: null,\n        mean: null,\n        iqr: null,\n        quartile1: null,\n        lower_fence: null,\n        min: null,\n    }\n\n    metrics.min = d3.min(values)\n    metrics.quartile1 = d3.quantile(values, 0.25)\n    metrics.median = d3.median(values)\n    metrics.mean = d3.mean(values)\n    metrics.quartile3 = d3.quantile(values, 0.75)\n    metrics.max = d3.max(values)\n    metrics.iqr = metrics.quartile3 - metrics.quartile1\n    metrics.lower_fence = metrics.quartile1 - 1.5 * metrics.iqr\n    metrics.upper_fence = metrics.quartile3 + 1.5 * metrics.iqr\n\n    return metrics\n}","/*global tstring, page_globals, Promise, data_manager, common */\n/*eslint no-undef: \"error\"*/\n\n\"use strict\";\n\n\nimport { chart_wrapper } from \"./charts/chart-wrapper.js\";\nimport { histogram_wrapper } from \"./charts/chartjs/histogram-wrapper.js\";\nimport { bar_chart_wrapper } from \"./charts/chartjs/bar-chart-wrapper.js\";\nimport { boxvio_chart_wrapper } from \"./charts/d3/boxvio-chart-wrapper.js\";\n\n\nexport const analysis =  {\n\n\t// Form factory instance\n\tform: null,\n\n\tarea_name\t\t\t\t: null,\n\trow\t\t\t\t\t\t: null,\n\n\t// DOM containers\n\texport_data_container\t\t: null,\n\tform_items_container\t\t: null,\n\tdiameter_chart_container\t: null,\n\tweight_chart_container\t\t: null,\n\n\t/**\n\t * Chart wrapper instance for diameter\n\t * @type {chart_wrapper}\n\t */\n\tdiameter_chart_wrapper: null,\n\t/**\n\t * Chart wrapper instance for weight\n\t * @type {chart_wrapper}\n\t */\n\tweight_chart_wrapper: null,\n\n\n\tset_up : function(options) {\n\n\t\tconst self = this\n\n\t\t// options\n\t\t\tself.area_name\t\t\t\t\t= options.area_name\n\t\t\tself.export_data_container\t\t= options.export_data_container\n\t\t\tself.row\t\t\t\t\t\t= options.row\n\t\t\tself.form_items_container\t\t= options.form_items_container\n\t\t\tself.diameter_chart_container\t= options.diameter_chart_container\n\t\t\tself.weight_chart_container\t\t= options.weight_chart_container\n\n\t\t// form\n\t\tconst form_node = self.render_form()\n\t\tself.form_items_container.appendChild(form_node)\n\n\t\treturn true\n\t},//end set_up\n\n\t/**\n\t * RENDER FORM\n\t */\n\trender_form : function() {\n\n\t\tconst self = this\n\n\t\t// DocumentFragment is like a virtual DOM\n\t\tconst fragment = new DocumentFragment()\n\n\t\t// form_factory instance\n\t\t\tself.form = self.form || new form_factory()\n\n\t\tconst form_row = common.create_dom_element({\n\t\t\telement_type\t: \"div\",\n\t\t\tclass_name\t\t: \"form-row fields\",\n\t\t\tparent\t\t\t: fragment\n\t\t})\n\n\t\t// mint\n\t\t\tself.form.item_factory({\n\t\t\t\tid\t\t\t\t: \"mint\",\n\t\t\t\tname\t\t\t: \"mint\",\n\t\t\t\tlabel\t\t\t: tstring.mint || \"mint\",\n\t\t\t\tq_column\t\t: \"p_mint\",\n\t\t\t\tvalue_wrapper\t: ['[\"', '\"]'], // to obtain [\"value\"] in selected value only\n\t\t\t\teq\t\t\t\t: \"LIKE\",\n\t\t\t\teq_in\t\t\t: \"%\",\n\t\t\t\teq_out\t\t\t: \"%\",\n\t\t\t\tis_term\t\t\t: true,\n\t\t\t\tparent\t\t\t: form_row,\n\t\t\t\tcallback\t\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// number\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"number\",\n\t\t\t\tname \t\t: \"number\",\n\t\t\t\tq_column \t: \"term\",\n\t\t\t\tq_table \t: \"types\",\n\t\t\t\tlabel\t\t: tstring.number_key || \"Number & Key\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// denomination\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"denomination\",\n\t\t\t\tname \t\t: \"denomination\",\n\t\t\t\tq_column \t: \"ref_type_denomination\",\n\t\t\t\tq_table \t: \"any\",\n\t\t\t\tlabel\t\t: tstring.denomination || \"denomination\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\n\t\t// submit button\n\t\t\tconst submit_group = common.create_dom_element({\n\t\t\t\telement_type\t: \"div\",\n\t\t\t\tclass_name\t\t: \"form-group field button_submit\",\n\t\t\t\tparent\t\t\t: fragment\n\t\t\t})\n\t\t\tconst submit_button = common.create_dom_element({\n\t\t\t\telement_type\t: \"input\",\n\t\t\t\ttype\t\t\t: \"submit\",\n\t\t\t\tid\t\t\t\t: \"submit\",\n\t\t\t\tvalue\t\t\t: tstring.search || \"Search\",\n\t\t\t\tclass_name\t\t: \"btn btn-light btn-block primary\",\n\t\t\t\tparent\t\t\t: submit_group\n\t\t\t})\n\t\t\tsubmit_button.addEventListener(\"click\", function (e) {\n\t\t\t\te.preventDefault()\n\t\t\t\tself.form_submit(form)\n\t\t\t})\n\n\t\t// reset button\n\t\t\tconst reset_button = common.create_dom_element({\n\t\t\t\telement_type\t: \"input\",\n\t\t\t\ttype\t\t\t: \"button\",\n\t\t\t\tid\t\t\t\t: \"button_reset\",\n\t\t\t\tvalue\t\t\t: tstring.reset || 'Reset',\n\t\t\t\tclass_name\t\t: \"btn btn-light btn-block secondary button_reset\",\n\t\t\t\tparent\t\t\t: submit_group\n\t\t\t})\n\t\t\treset_button.addEventListener(\"click\", function (e) {\n\t\t\t\te.preventDefault()\n\t\t\t\twindow.location.replace(window.location.pathname);\n\t\t\t})\n\n\t\t// operators\n\t\t\t// fragment.appendChild( forms.build_operators_node() )\n\t\t\tconst operators_node = self.form.build_operators_node()\n\t\t\tfragment.appendChild( operators_node )\n\n\t\t// the form element itself!\n\t\t\tconst form = common.create_dom_element({\n\t\t\t\telement_type\t: \"form\",\n\t\t\t\tid\t\t\t\t: \"search_form\",\n\t\t\t\tclass_name\t\t: \"form-inline\"\n\t\t\t})\n\t\t\tform.appendChild(fragment)\n\n\n\t\treturn form\n\t},//end render_form\n\n\t/**\n\t * FORM SUBMIT\n\t * Form submit launch search\n\t */\n\tform_submit : function(form_obj, options={}) {\n\t\t\n\t\tconst self = this\n\n\t\t// options\n\t\t\tconst scroll_result\t= typeof options.scroll_result===\"boolean\" ? options.scroll_result : true\n\t\t\tconst form_items\t= options.form_items || self.form.form_items\n\n\t\t// build filter\n\t\t\tconst filter = self.form.build_filter({\n\t\t\t\tform_items: form_items\n\t\t\t})\n\t\t\n\t\t// empty filter case\n\t\t\tif (!filter || filter.length<1) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t// scroll to head result\n\t\t\tif (scroll_result) {\n\t\t\t\tthis.diameter_chart_container.scrollIntoView(\n\t\t\t\t\t{behavior: \"smooth\", block: \"start\", inline: \"nearest\"}\n\t\t\t\t);\n\t\t\t}\n\n\t\t// search rows exec against API\n\t\t\tconst js_promise = self.search_rows({\n\t\t\t\tfilter\t\t\t: filter,\n\t\t\t\tlimit\t\t\t: 0\n\t\t\t})\n\t\t\t.then((parsed_data)=>{\n\n\t\t\t\tevent_manager.publish('form_submit', parsed_data)\n\n\t\t\t\tconsole.log(parsed_data)\n\n\t\t\t\t// const diameters = parsed_data\n\t\t\t\t// \t.map((ele) => ele.full_coins_reference_diameter_max)\n\t\t\t\t// \t.flat()\n\t\t\t\t// \t.filter((v) => v)\n\t\t\t\t// console.log(diameters)\n\n\t\t\t\t// this.chart_wrapper = new histogram_wrapper(\n\t\t\t\t// \tthis.chart_wrapper_container,\n\t\t\t\t// \tdiameters,\n\t\t\t\t// \t'Diameter'\n\t\t\t\t// )\n\t\t\t\t// this.chart_wrapper.render()\n\n\t\t\t\tconst data = {}\n\t\t\t\tfor (const ele of parsed_data) {\n\t\t\t\t\tconst name = ele.term.split(' ')[0].slice(0, -1)\n\t\t\t\t\tif (!['12', '59', '62', '18','11a','14'].includes(name)) continue\n\t\t\t\t\t// if (!['59', '62'].includes(name)) continue\n\t\t\t\t\tconst tmpData = {}\n\t\t\t\t\tconst calculable = ele.full_coins_reference_calculable\n\t\t\t\t\tconst diameter_max = ele.full_coins_reference_diameter_max\n\t\t\t\t\tconst diameter_min = ele.full_coins_reference_diameter_min\n\t\t\t\t\tconst weight = ele.full_coins_reference_weight\n\t\t\t\t\tif (diameter_max && diameter_max.length) {\n\t\t\t\t\t\ttmpData.diameter_max = diameter_max.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (diameter_min && diameter_min.length) {\n\t\t\t\t\t\ttmpData.diameter_min = diameter_min.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (weight && weight.length) {\n\t\t\t\t\t\ttmpData.weight = weight.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (Object.keys(tmpData).length) {\n\t\t\t\t\t\tdata[name] = tmpData\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.log(data)\n\n\t\t\t\t// Diameters\n\t\t\t\tconst diameters = {}\n\t\t\t\tfor (const [name, props] of Object.entries(data)) {\n\t\t\t\t\tdiameters[name] = props.diameter_max\n\t\t\t\t}\n\t\t\t\tthis.diameter_chart_wrapper = new boxvio_chart_wrapper(\n\t\t\t\t\tthis.diameter_chart_container,\n\t\t\t\t\tdiameters,\n\t\t\t\t\t'Diameter'\n\t\t\t\t)\n\t\t\t\tthis.diameter_chart_wrapper.render()\n\n\t\t\t\t// Diameters\n\t\t\t\tconst weights = {}\n\t\t\t\tfor (const [name, props] of Object.entries(data)) {\n\t\t\t\t\tweights[name] = props.weight\n\t\t\t\t}\n\t\t\t\tthis.weight_chart_wrapper = new boxvio_chart_wrapper(\n\t\t\t\t\tthis.weight_chart_container,\n\t\t\t\t\tweights,\n\t\t\t\t\t'Weight'\n\t\t\t\t)\n\t\t\t\tthis.weight_chart_wrapper.render()\n\n\t\t\t})\n\n\t},\n\n\t/**\n\t * SEARCH_ROWS\n\t * Call to API and load json data results of search\n\t */\n\tsearch_rows : function(options) {\n\n\t\tconst self = this\n\n\t\t// sort vars\n\t\t\tconst filter\t\t\t= options.filter || null\n\t\t\tconst ar_fields\t\t\t= options.ar_fields || [\"*\"]\n\t\t\tconst order\t\t\t\t= options.order || \"norder ASC\"\n\t\t\tconst lang\t\t\t\t= page_globals.WEB_CURRENT_LANG_CODE\n\t\t\tconst process_result\t= options.process_result || null\n\t\t\tconst limit\t\t\t\t= options.limit != undefined\n\t\t\t\t\t\t\t\t\t\t? options.limit\n\t\t\t\t\t\t\t\t\t\t: 30\n\t\t\n\t\treturn new Promise(function(resolve){\n\t\t\t// parse_sql_filter\n\t\t\t\tconst group = []\n\t\t\t// parsed filters\n\t\t\t\tconst sql_filter = self.form.parse_sql_filter(filter)\n\t\t\t// request\n\t\t\t\tconst request_body = {\n\t\t\t\t\tdedalo_get\t\t: 'records',\n\t\t\t\t\ttable\t\t\t: 'catalog',\n\t\t\t\t\tar_fields\t\t: ar_fields,\n\t\t\t\t\tlang\t\t\t: lang,\n\t\t\t\t\tsql_filter\t\t: sql_filter,\n\t\t\t\t\tlimit\t\t\t: limit,\n\t\t\t\t\tgroup\t\t\t: (group.length>0) ? group.join(\",\") : null,\n\t\t\t\t\tcount\t\t\t: false,\n\t\t\t\t\torder\t\t\t: order,\n\t\t\t\t\tprocess_result\t: process_result\n\t\t\t\t}\n\t\t\t\tdata_manager.request({\n\t\t\t\t\tbody : request_body\n\t\t\t\t})\n\t\t\t\t.then((response)=>{\n\t\t\t\t\t// data parsed\n\t\t\t\t\tconst data = page.parse_catalog_data(response.result)\n\n\t\t\t\t\tresolve(data)\n\t\t\t\t})\n\t\t})\n\n\t},\n\n}//end analysis\n\n"],"mappings":"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"}