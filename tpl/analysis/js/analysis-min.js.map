{"version":3,"names":["COLOR_PALETTE","chart_wrapper","div_wrapper","this","constructor","Error","download_chart_container","undefined","controls_container","chartjs_chart_wrapper","call","canvas","chart","histogram_wrapper","data","xlabel","_data","_density","_n_bins_default","Math","ceil","sqrt","length","_n_bins","_xlabel","_n_decimals","_max_bins_multiplier","_bar_color","bar_chart_wrapper","ylabel","Array","isArray","_check_array_valid","_parse_array","_check_object_valid","_parse_object","_ylabel","_bar_colors","labels","fill","d3_chart_wrapper","svg","boxvio_chart_wrapper","_metrics","name","values","Object","entries","calc_metrics","_data_extent","d3","extent","flat","_full_width","_full_height","_chart","margin","top","right","bottom","left","width","height","yscale","scaleLinear","range","domain","clamp","yaxis","axisLeft","xscale","scaleBand","keys","padding","xaxis","axisBottom","histogram","bin","thresholds","ticks","value","d","bins","push","key","_graphics","root_g","metrics","max","upper_fence","quartile3","median","mean","iqr","quartile1","lower_fence","min","quantile","prototype","render","self","replaceChildren","common","create_dom_element","element_type","id","class_name","style","display","parent","format_select","format","get_supported_export_formats","text_content","toUpperCase","addEventListener","download_chart","filename","download_func_name","setPrototypeOf","download_chart_as_png","tmpLink","href","toBase64Image","setAttribute","click","remove","download_chart_as_svg","_tweak_c2s","offsetWidth","offsetHeight","options","animation","reponsive","svgContext","C2S","Chart","config","_config","encodeURIComponent","getSerializedSvg","getContext","contextId","__canvas","getAttribute","type","listener","eventListenerOptions","get_density","set_density","density","bin_centers","plot_data","half_bin_width","data_min","data_max","_get_plotting_data","datasets","label","_get_density_string","scales","y","title","text","update","get_n_bins","set_n_bins","n_bins","x","stepSize","plugins","tooltip","callbacks","_get_tooltip_title_callback","get_bar_color","set_bar_color","bar_color","backgroundColor","bin_width","apply","map","index","i","j","sum","reduce","partialSum","val","n_decimals","items","dataIndex","toFixed","_render_chart","_render_control_panel","chart_data","categoryPercentage","barPercentage","scales_options","offset","grid","callback","Number","font","size","plugins_options","legend","parsing","normalized","slider","density_checkbox","Boolean","checked","color_picker_container","window","iro","ColorPicker","color","layoutDirection","layout","component","ui","Wheel","Slider","sliderType","on","rgbaString","arr","ele","slice","filter","v","a","indexOf","obj","get_bar_colors","set_bar_colors","bar_colors","isInteger","bar_select","String","color_picker","set","select","append","attr","svg_data","node","outerHTML","svg_blob","Blob","url","URL","createObjectURL","revokeObjectURL","_render_axis","_render_violins","_render_boxes","g","max_count","group","longest","xNum","bandwidth","selectAll","enter","datum","area","x0","x1","curve","curveCatmullRom","outliers","boxes","box_width","group_box","outlier","whiskers","analysis","form","area_name","row","export_data_container","form_items_container","chart_wrapper_container","set_up","form_node","render_form","appendChild","fragment","DocumentFragment","form_factory","form_row","item_factory","tstring","mint","q_column","value_wrapper","eq","eq_in","eq_out","is_term","form_item","activate_autocomplete","table","q_table","number_key","denomination","submit_group","search","e","preventDefault","form_submit","reset","location","replace","pathname","operators_node","build_operators_node","form_obj","scroll_result","form_items","build_filter","search_rows","limit","then","parsed_data","event_manager","publish","console","log","term","split","includes","tmpData","calculable","full_coins_reference_calculable","diameter_max","full_coins_reference_diameter_max","diameter_min","full_coins_reference_diameter_min","weight","full_coins_reference_weight","input_data","props","ar_fields","order","lang","page_globals","WEB_CURRENT_LANG_CODE","process_result","Promise","resolve","sql_filter","parse_sql_filter","request_body","dedalo_get","join","count","data_manager","request","body","response","page","parse_catalog_data","result"],"sources":["charts/chart-wrapper.js","charts/chartjs/chartjs-chart-wrapper.js","charts/chartjs/histogram-wrapper.js","charts/chartjs/bar-chart-wrapper.js","charts/d3/d3-chart-wrapper.js","charts/d3/boxvio-chart-wrapper.js","analysis.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Width (in pixels) of color picker\n * @type {number}\n */\nexport const COLOR_PICKER_WIDTH = 200\n\n/**\n * Default name for the chart -> when exporting,\n * `<name>.<format>`\n * @type {string}\n */\nconst DEFAULT_CHART_NAME = 'chart'\n\n/**\n * Color palette, totally stolen from matplotlib\n * @type {string[]}\n */\nexport const COLOR_PALETTE = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']\n\n\n/**\n * Chart wrapper class\n * \n * It clears the container div during render, so subclasses should work with the dom\n * after the render method of this superclass has been called\n * @class\n * @abstract\n * @param {Element} div_wrapper \n */\nexport function chart_wrapper(div_wrapper) {\n    if (this.constructor === chart_wrapper) {\n        throw new Error(\"Abstract class 'chart_wrapper' cannot be instantiated\")\n    }\n    /**\n     * Div element wrapping the chart itself and\n     * the controls\n     * @type {Element}\n     * @protected\n     */\n    this.div_wrapper = div_wrapper\n    /**\n     * Div container for chart download\n     * @type {Element}\n     * @protected\n     */\n    this.download_chart_container = undefined\n    /**\n     * Div container for user controls\n     * Used freely by each subclass\n     * @type {Element}\n     * @protected\n     */\n    this.controls_container = undefined\n}\n\n/**\n * Render the chart and controls\n * \n * Empties the div wrapper and resets properties\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name chart_wrapper#render\n * @function\n */\nchart_wrapper.prototype.render = function () {\n    // Save this chart_wrapper intance\n    /**\n     * This chart_wrapper intance\n     * @type {chart_wrapper}\n     */\n    const self = this\n    // Remove all children in the div_wrapper\n    this.div_wrapper.replaceChildren()\n    // Set controls container to undefined\n    this.controls_container = undefined\n    // Create the chart download section\n    this.download_chart_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'download_chart_container',\n        class_name: 'o-purple',\n        style: {\n            'display': 'flex',\n            'flex-direction': 'row',\n            'justify-content': 'center',\n        },\n        parent: this.div_wrapper,\n    })\n    const format_select = common.create_dom_element({\n        element_type: 'select',\n        id: 'chart_export_format',\n        style: {\n            'width': '80%',\n        },\n        parent: this.download_chart_container,\n        // TODO: add ARIA attributes?\n    })\n    for (const format of this.get_supported_export_formats()) {\n        common.create_dom_element({\n            element_type: 'option',\n            value: format,\n            text_content: format.toUpperCase(),\n            parent: format_select,\n        })\n    }\n    const chart_download_button = common.create_dom_element({\n        element_type: 'button',\n        text_content: 'Download',\n        style: {\n            'width': '20%',\n        },\n        parent: this.download_chart_container,\n    })\n    chart_download_button.addEventListener('click', () => {\n        self.download_chart(format_select.value)\n    })\n}\n\n/**\n * Download the chart as an image\n * \n * For each supported format in the subclass,\n * @see chart_wrapper#get_supported_export_formats\n * the subclass must implement a method called\n * `download_chart_as_<format>`\n * @param {string} format the image format\n * @function\n * @abstract\n * @name chart_wrapper#download_chart\n */\nchart_wrapper.prototype.download_chart = function (format) {\n    /**\n     * File name for the chart\n     * @type {string}\n     */\n    const filename = `${DEFAULT_CHART_NAME}.${format}`\n    /**\n     * Function name for downloading with the particular format\n     * @type {string}\n     */\n    const download_func_name = `download_chart_as_${format}`\n    if (this[download_func_name] === undefined) {\n        throw new Error(`${download_func_name} is not implemented!`)\n    }\n    this[download_func_name](filename)\n}\n\n/**\n * Get the supported chart export formats\n * \n * Subclasses must return their own supported formats, e.g.,\n * `['png', 'jpg', 'eps']`\n * @function\n * @returns {string[]} the supported formats\n * @abstract\n * @name chart_wrapper#get_supported_export_formats\n */\nchart_wrapper.prototype.get_supported_export_formats = function () {\n    throw new Error(`Abstract method 'chart_wrapper.download_chart' cannot be called`)\n}","\"use strict\";\n\nimport { chart_wrapper } from \"../chart-wrapper.js\";\n\n/**\n * Chart.js chart wrapper class\n * @class\n * @abstract\n * @param {Element} div_wrapper the div conatining the chart\n * @extends chart_wrapper\n */\nexport function chartjs_chart_wrapper(div_wrapper) {\n    if (this.constructor === chartjs_chart_wrapper) {\n        throw new Error(\"Abstract class 'chartjs_chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper.call(this, div_wrapper)\n    /**\n     * Canvas instance, will be created during\n     * render\n     * @type {HTMLCanvasElement}\n     * @protected\n     */\n    this.canvas = undefined\n    /**\n     * Chart instance (chart.js)\n     * @protected\n     */\n    this.chart = undefined\n}\n// Set prototype chain\nObject.setPrototypeOf(chartjs_chart_wrapper.prototype, chart_wrapper.prototype)\n\n/**\n * Render the chart (chartjs) and controls\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name chartjs_chart_wrapper#render\n * @function\n */\nchartjs_chart_wrapper.prototype.render = function () {\n    chart_wrapper.prototype.render.call(this)\n    // Create canvas\n    this.canvas = common.create_dom_element({\n        element_type: 'canvas',\n        id: 'result_graph',\n        class_name: 'o-blue',\n        parent: this.div_wrapper,\n    })\n    // Set chart instance to undefined\n    this.chart = undefined\n}\n\n/**\n * Get the supported chart export formats\n * @function\n * @returns {string[]} the supported formats\n * @name chartjs_chart_wrapper#get_supported_export_formats\n */\nchartjs_chart_wrapper.prototype.get_supported_export_formats = function () {\n    return ['png']\n}\n\n/**\n * Download the chart as png\n * @param {string} filename the name of the file\n * @function\n * @name chartjs_chart_wrapper#_download_chart_as_png\n */\nchartjs_chart_wrapper.prototype.download_chart_as_png = function (filename) {\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: this.chart.toBase64Image(),\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n}\n\n/**\n * FIXME: this is not working...\n * Download the chart as svg\n * @param {string} filename the name of the file\n * @function\n * @name chartjs_chart_wrapper#_download_chart_as_svg\n */\nchartjs_chart_wrapper.prototype.download_chart_as_svg = function (filename) {\n    // Tweak C2S library\n    this._tweak_c2s()\n    // Get original width and height\n    const width = this.canvas.offsetWidth\n    const height = this.canvas.offsetHeight\n    // TODO: Turn off responsiveness and animations\n    this.chart.options.animation = false\n    this.chart.options.reponsive = false\n    // Replicate chart in C2S space\n    const svgContext = C2S(width, height)\n    const svgChart = new Chart(svgContext, this.chart.config._config)\n    // Download\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: 'data:image/svg+xml;utf8,'\n            + encodeURIComponent(svgContext.getSerializedSvg()),\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n    // TODO: Turn on responsiveness and animations\n    this.chart.options.animation = true\n    this.chart.options.reponsive = true\n}\n\n/**\n * Some tweaks to the canvas2svg library are required for svg export to work\n * \n * Via: https://stackoverflow.com/questions/62249315/export-canvas-to-svg-file\n * @function\n * @private\n * @name chartjs_chart_wrapper#_tweak_c2s\n */\nchartjs_chart_wrapper.prototype._tweak_c2s = function () {\n    C2S.prototype.getContext = function (contextId) {\n        if (contextId === '2d' || contextId === '2D') {\n            return this;\n        }\n        return null;\n    }\n    C2S.prototype.style = function () {\n        return this.__canvas.style;\n    }\n    C2S.prototype.getAttribute = function (name) {\n        return this[name];\n    }\n    C2S.prototype.addEventListener = function (type, listener, eventListenerOptions) {\n        // nothing to do here, but we need this function :)\n    }\n}","\"use strict\";\n\nimport { chartjs_chart_wrapper } from \"./chartjs-chart-wrapper.js\";\nimport { COLOR_PICKER_WIDTH, COLOR_PALETTE } from \"../chart-wrapper.js\";\n\n/**\n * Histogram wrapper\n * @param {Element}  div_wrapper the div to work in\n * @param {number[]} data the data\n * @param {string} xlabel the label for the x-axis\n * @class\n * @extends chartjs_chart_wrapper\n */\nexport function histogram_wrapper(div_wrapper, data, xlabel) {\n    /*\n     * <Function>.call is a method that executes the defined function,\n     * but with the \"this\" variable pointing to the first argument,\n     * and the rest of the arguments being arguments of the function\n     * that is being \"called\". This essentially performs all of\n     * chart_wrapper's constructor logic on histogram_wrapper's \"this\".\n     */\n    chartjs_chart_wrapper.call(this, div_wrapper)\n\n    /**\n     * Data values\n     * @type {number[]}\n     * @private\n     */\n    this._data = data\n    /**\n     * Whether to perform a density plot\n     * @type {boolean}\n     * @private\n     */\n    this._density = false\n    /**\n     * Default number of bins\n     * @type {number}\n     * @private\n     */\n    this._n_bins_default = Math.ceil(Math.sqrt(this._data.length))\n    /**\n     * Number of bins in the histogram\n     * \n     * Defined as the square root of the\n     * amount of datapoints, computed\n     * during render\n     * @type {number}\n     * @private\n     */\n    this._n_bins = undefined\n    /** Label for the xaxis\n     * @type {string}\n     * @private\n    */\n    this._xlabel = xlabel\n    /**\n     * Number of decimals to display\n     * @type {number}\n     * @private\n     */\n    this._n_decimals = 3\n    /**\n     * Maximum number of bins as mutiplier of default\n     * @type {number}\n     * @private\n     */\n    this._max_bins_multiplier = 3\n    /**\n     * Default color for the bars in rgba\n     * @type {string}\n     * @private\n     */\n    this._bar_color = COLOR_PALETTE[0]\n}\n// Set prototype chain\nObject.setPrototypeOf(histogram_wrapper.prototype, chartjs_chart_wrapper.prototype)\n\n/**\n * Check whether we are doing a density plot\n * @returns {boolean} `true` if density plot,\n * \t\t\t`false` otherwise\n * @name histogram_wrapper#get_density\n * @function\n */\nhistogram_wrapper.prototype.get_density = function () {\n    return this._density\n}\n\n/**\n * Change the density plot attribute\n * @param density {boolean} `true` if density, `false` otherwise\n * @function\n * @name histogram_wrapper#set_density\n */\nhistogram_wrapper.prototype.set_density = function (density) {\n    this._density = density\n    if (!this.chart) {\n        return\n    }\n    // Update chart\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n    this.chart.data.datasets[0].label = this._get_density_string()\n    this.chart.data.datasets[0].data = plot_data\n    this.chart.options.scales.y.title.text = this._get_density_string()\n    this.chart.update()\n}\n\n/**\n * Get a string representing the plot mode\n * @returns {string} `'Density'` if we are in density\n * \t\t\tmode, `'Frequency'` otherwise\n * @function\n * @private\n * @name histogram_wrapper#_get_density_string\n */\nhistogram_wrapper.prototype._get_density_string = function () {\n    return this._density ? 'Density' : 'Frequency'\n}\n\n/**\n * Get the amount of bins in the histogram\n * @returns {number} the amount of bins\n * @function\n * @name histogram_wrapper#get_n_bins\n */\nhistogram_wrapper.prototype.get_n_bins = function () {\n    return this._n_bins\n}\n\n/**\n * Set a new number of bins for the histogram\n * \n * Updates chart instance accordingly\n * @param {number} n_bins amount of bins\n * @function\n * @name histogram_wrapper#set_n_bins\n */\nhistogram_wrapper.prototype.set_n_bins = function (n_bins) {\n    this._n_bins = n_bins\n    if (!this.chart) {\n        return\n    }\n    // Update chart\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n    this.chart.data.datasets[0].data = plot_data\n    this.chart.options.scales.x.min = data_min\n    this.chart.options.scales.x.max = data_max\n    this.chart.options.scales.x.ticks.stepSize = 2 * half_bin_width\n    this.chart.options.plugins.tooltip.callbacks.title =\n        this._get_tooltip_title_callback(bin_centers, half_bin_width)\n    this.chart.update()\n}\n\n/**\n * Get the color of the bars in the histogram\n * @returns {string} the bar color as an rgba string\n * @function\n * @name histogram_wrapper#get_bar_color\n */\nhistogram_wrapper.prototype.get_bar_color = function () {\n    return this._bar_color\n}\n\n/**\n * Set a new color for the bars in the histogram\n * \n * Updates the chart instance accordingly\n * @param {string} bar_color the new bar color for the histogram\n * @function\n * @name histogram_wrapper#set_bar_color\n */\nhistogram_wrapper.prototype.set_bar_color = function (bar_color) {\n    this._bar_color = bar_color\n    if (!this.chart) {\n        return\n    }\n    this.chart.data.datasets[0].backgroundColor = this._bar_color\n    this.chart.update()\n}\n\n/**\n * Get data needed to generate the chart\n * TODO: there is no need to recompute bin_centers unless the number of bins\n* \t\t has changed\n* @function\n* @name histogram_wrapper#_get_plotting_data\n* @private\n* \n* @returns {[number[], {x: number, y: number}[], number, number, number]}\n* \t\t\tthe bin centers, {bin centers, count per bin}, half of the bin width,\n* \t\t\tthe minimum and maximum of input data\n */\nhistogram_wrapper.prototype._get_plotting_data = function () {\n    const data_max = Math.max(...this._data)\n    const data_min = Math.min(...this._data)\n    const bin_width = (data_max - data_min) / this._n_bins\n    const half_bin_width = 0.5 * bin_width\n    /**\n     * Center of each bin\n     * @type {number[]}\n     */\n    const bin_centers = Array.apply(null, Array(this._n_bins)).map(\n        (value, index) => data_min + (2 * index + 1) * half_bin_width\n    )\n    // We bin with right-open intervals\n    /**\n     * Count per bin\n     * @type {number[]}\n     */\n    let entries = Array.apply(null, Array(this._n_bins)).map(() => 0)\n    for (let i = 0; i < this._data.length; i++) {\n        // If value is max, add it to last bin\n        if (this._data[i] === data_max) {\n            entries[this._n_bins - 1]++\n            continue\n        }\n        // Proceed as usual\n        for (let j = 0; j < this._n_bins; j++) {\n            if (this._data[i] >= bin_centers[j] - half_bin_width\n                && this._data[i] < bin_centers[j] + half_bin_width) {\n                entries[j]++\n                break\n            }\n        }\n    }\n    // Normalize if density\n    if (this._density) {\n        const sum = entries.reduce((partialSum, val) => partialSum + val, 0)\n        for (let j = 0; j < this._n_bins; j++) {\n            entries[j] /= (sum * bin_width);\n        }\n    }\n    return [\n        bin_centers,\n        bin_centers.map((val, i) => ({ x: val, y: entries[i] })),\n        half_bin_width,\n        data_min,\n        data_max,\n    ]\n}\n\n/**\n * Get callback function for tooltip title\n * @param {number[]} bin_centers the bin centers\n * @param {number} half_bin_width half of the bin width\n * @returns the callback function\n * @function\n * @private\n * @name histogram_wrapper#_get_tooltip_title_callback\n */\nhistogram_wrapper.prototype._get_tooltip_title_callback = function (bin_centers, half_bin_width) {\n    // Cannot use `this` inside inner function!!!\n    const xlabel = this._xlabel\n    const n_decimals = this._n_decimals\n    /**\n     * Callback function for the tooltip title\n     * @param {TooltipItem[]} items the tooltip item contexts\n     * @returns {string} the title of the tooltip\n     * @function\n     * @name histogram_wrapper#_get_tooltip_title_callback~inner\n     */\n    const callback = function (items) {\n        if (!items.length) {\n            return ''\n        }\n        const item = items[0]\n        const index = item.dataIndex\n        const min = bin_centers[index] - half_bin_width\n        const max = bin_centers[index] + half_bin_width\n        return `${xlabel}: ${min.toFixed(n_decimals)} `\n            + `- ${max.toFixed(n_decimals)}`\n    }\n    return callback\n}\n\n/**\n * Render the chart and the control panel\n * @function\n * @name histogram_wrapper#render\n */\nhistogram_wrapper.prototype.render = function () {\n    // Call super render method\n    chartjs_chart_wrapper.prototype.render.call(this)\n    // Render chart\n    this._render_chart()\n    // Render control panel\n    this._render_control_panel()\n}\n\n/**\n * Render the chart\n * @function\n * @private\n * @name histogram_wrapper#_render_chart\n */\nhistogram_wrapper.prototype._render_chart = function () {\n    this._n_bins = this._n_bins_default\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n\n    // Split chart options\n    const chart_data = {\n        datasets: [{\n            label: this._get_density_string(),\n            data: plot_data,\n            categoryPercentage: 1,\n            barPercentage: 1,\n            backgroundColor: this._bar_color,\n        }],\n    }\n    const scales_options = {\n        x: {\n            type: 'linear',  // otherwise it goes to a category axis...\n            min: data_min,\n            max: data_max,\n            offset: false,\n            grid: {\n                offset: false,\n            },\n            ticks: {\n                stepSize: 2 * half_bin_width,\n                callback: (label, index, labels) => {\n                    return Number(label).toFixed(this._n_decimals)\n                }\n            },\n            title: {\n                display: true,\n                text: this._xlabel,\n                font: {\n                    size: 14\n                },\n            }\n        },\n        y: {\n            title: {\n                display: true,\n                text: this._get_density_string(),\n                font: {\n                    size: 14,\n                },\n            },\n        },\n    }\n    const plugins_options = {\n        legend: {\n            display: false,\n        },\n        tooltip: {\n            callbacks: {\n                title: this._get_tooltip_title_callback(bin_centers, half_bin_width),\n            },\n        },\n    }\n\n    // Render the graph\n    this.chart = new Chart(this.canvas, {\n        type: 'bar',\n        data: chart_data,\n        options: {\n            scales: scales_options,\n            plugins: plugins_options,\n            parsing: false,\n            normalized: true,\n        },\n    })\n}\n\n\n/**\n * Render the control panel\n * @function\n * @private\n * @name histogram_wrapper#_render_control_panel\n */\nhistogram_wrapper.prototype._render_control_panel = function () {\n    // Save this histogram wrapper instance, because when we change scope\n    // we may still need to refer to it\n    /**\n     * This histogram_wrapper instance\n     * @type {histogram_wrapper}\n     */\n    const self = this\n    // Create controls container\n    this.controls_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'controls',\n        class_name: 'o-green',\n        parent: this.div_wrapper,\n    })\n    /**\n     * Slider for number of bins\n     * @type {Element}\n     */\n    const slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        value: this._n_bins_default,\n        parent: this.controls_container,\n    })\n    slider.setAttribute('min', 1)\n    slider.setAttribute('max', this._max_bins_multiplier * this._n_bins_default)\n    slider.addEventListener('input', () => {\n        this.set_n_bins(Number(slider.value))\n    })\n    /**\n     * Reset button for the slider\n     * @type {Element}\n     */\n    const slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    slider_reset.addEventListener('click', () => {\n        slider.value = this._n_bins_default\n        this.set_n_bins(Number(slider.value))\n    })\n    /**\n     * Checkbox for density plot\n     * @type {Element}\n     */\n    const density_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: 'density_checkbox',\n        parent: this.controls_container,\n    })\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const density_checkbox_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Density',\n        parent: this.controls_container,\n    })\n    density_checkbox_label.setAttribute('for', 'density_checkbox')\n    density_checkbox.addEventListener('change', () => {\n        this.set_density(Boolean(density_checkbox.checked))\n    })\n    /** iro.js color picker */\n    const color_picker_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'color_picker_container',\n        parent: this.controls_container\n    })\n    const color_picker = new window.iro.ColorPicker(color_picker_container, {\n        color: this._bar_color,\n        width: COLOR_PICKER_WIDTH,\n        layoutDirection: 'horizontal',\n        layout: [\n            {\n                component: window.iro.ui.Wheel,\n            },\n            {\n                component: window.iro.ui.Slider,\n            },\n            {\n                component: window.iro.ui.Slider,\n                options: {\n                    sliderType: 'alpha',\n                }\n            },\n        ],\n    })\n    color_picker.on('color:change', function (color) {\n        self.set_bar_color(color.rgbaString)\n    })\n}","\"use strict\";\n\nimport { chartjs_chart_wrapper } from \"./chartjs-chart-wrapper.js\";\nimport { COLOR_PALETTE, COLOR_PICKER_WIDTH } from \"../chart-wrapper.js\";\n\n/**\n * Bar chart wrapper\n * @param {Element} div_wrapper the div to work in\n * @param {number[] | string[] | {[key: string | number]: number}} data\n * \t\t  input data. Either an array of occurences, which are parsed by\n * \t\t  the bar chart wrapper (e.g., `['bronze', 'bronze', 'iron']`), or\n * \t\t  an object with keys and counts (e.g. `{'bronze': 2, 'iron': 1}`)\n * @param {string} ylabel the label for the y-axis\n * @class\n * @extends chartjs_chart_wrapper\n */\nexport function bar_chart_wrapper(div_wrapper, data, ylabel) {\n    chartjs_chart_wrapper.call(this, div_wrapper)\n    /**\n     * Data for the bar chart\n     * @type {{labels: string[] | number[], values: number[]}}\n     * @private\n     */\n    this._data = undefined\n    if (Array.isArray(data)) {\n        this._check_array_valid(data)\n        this._data = this._parse_array(data)\n    } else {\n        this._check_object_valid(data)\n        this._data = this._parse_object(data)\n    }\n    /**\n     * Label for the y-axis\n     * @type {string}\n     * @private\n     */\n    this._ylabel = ylabel\n    /**\n     * Color for each bar\n     * @type {string[]}\n     * @private\n     */\n    this._bar_colors = Array(this._data.labels.length).fill(COLOR_PALETTE[0])\n}\n// Set prototype chain\nObject.setPrototypeOf(bar_chart_wrapper.prototype, chartjs_chart_wrapper.prototype)\n\n/**\n * Check if the input data array is valid\n * \n * Throws error otherwise\n * @param {string[] | number[]} arr the array to check\n * @function\n * @private\n * @name bar_chart_wrapper#_check_array_valid\n */\nbar_chart_wrapper.prototype._check_array_valid = function (arr) {\n    if (!arr.length) {\n        throw new Error(\"Input array is empty!\")\n    }\n    /**\n     * Type of the first element of the array\n     * @type {string}\n     */\n    const type = typeof arr[0]\n    if (type !== 'number' && type !== 'string') {\n        throw new Error(\"Input array is not made of numbers or strings\")\n    }\n    for (const ele of arr.slice(1)) {\n        if (typeof ele !== type) {\n            throw new Error(\"Input array combines multiple types\")\n        }\n    }\n}\n\n/**\n * Parse the input data array\n * \n * @param {string[] | number[]} arr the input array\n * @returns {{labels: string[] | number[], values: number[]}}\n * \t\t\tthe parsed input data in internal format\n * @function\n * @private\n * @name bar_chart_wrapper#_parse_array\n */\nbar_chart_wrapper.prototype._parse_array = function (arr) {\n    /**\n     * Unique values of the input array\n     * @type {number[] | string[]}\n     */\n    const labels = arr.filter((v, i, a) => a.indexOf(v) === i)\n    /**\n     * Count for each unique value in the input array\n     * @type {number[]}\n     */\n    const values = labels.map((v) => arr.filter((ele) => ele === v).length)\n    /**\n     * Parsed data\n     * @type {{labels: string[] | number[], values: number[]}}\n     */\n    let parsed = {\n        labels: labels,\n        values: values,\n    }\n    return parsed\n}\n\n/**\n * Check if the input data object is valid\n * \n * Throws error otherwise\n * @param {{[key: string | number]: number}} obj the object to check\n * @function\n * @private\n * @name bar_chart_wrapper#_check_object_valid\n */\nbar_chart_wrapper.prototype._check_object_valid = function (obj) {\n    if (!obj) {\n        throw new Error(\"Input data object is null or undefined\")\n    }\n    /**\n     * Keys of the input data object\n     * @type {number[] | string[]}\n     */\n    const keys = Object.keys(obj)\n    if (!keys.length) {\n        throw new Error(\"Input data object is empty\")\n    }\n    /**\n     * Values of the input data object\n     * @type {number}\n     */\n    const values = Object.values(obj)\n    for (const val of values) {\n        if (typeof val !== 'number') {\n            throw new Error(\"A value in the input data object is not a number\")\n        }\n    }\n}\n\n/**\n * Parse the input data object\n * \n * @param {{[key: string | number]: number}} obj the input array\n * @returns {{labels: string[] | number[], values: number[]}}\n * \t\t\tthe parsed input data in internal format\n * @function\n * @private\n * @name bar_chart_wrapper#_parse_object\n */\nbar_chart_wrapper.prototype._parse_object = function (obj) {\n    return {\n        labels: Object.keys(obj),\n        values: Object.values(obj),\n    }\n}\n\n/**\n * Get the bar colors\n * @returns {string[]} the bar colors as rgba strings\n */\nbar_chart_wrapper.prototype.get_bar_colors = function () {\n    return this._bar_colors\n}\n\n/**\n * Set new bar colors\n * \n * Updates chart instance accordingly\n * @param {string[]} bar_colors the new bar colors as rgba strings\n */\nbar_chart_wrapper.prototype.set_bar_colors = function (bar_colors) {\n    this._bar_colors = bar_colors\n    this.chart.data.datasets[0].backgroundColor = bar_colors\n    this.chart.update()\n}\n\n/**\n * Set a color for a given bar\n * @param {number} index the index of the bar \n * @param {string} bar_color the new bar color as an rgba string\n */\nbar_chart_wrapper.prototype.set_bar_color = function (index, bar_color) {\n    if (typeof index !== 'number') {\n        throw new Error(\"Index is not a number\")\n    } else if (!Number.isInteger(index)) {\n        throw new Error(\"Index is not an integer\")\n    } else if (index < 0 || index >= this._data.labels.length) {\n        throw new Error(\"Index is out of bounds\")\n    }\n    this._bar_colors[index] = bar_color\n    this.chart.data.datasets[0].backgroundColor[index] = bar_color\n    this.chart.update()\n}\n\n/**\n * Render the chart and the control panel\n * @function\n * @name bar_chart_wrapper#render\n */\nbar_chart_wrapper.prototype.render = function () {\n    // Call super render method\n    chartjs_chart_wrapper.prototype.render.call(this)\n    // Render chart\n    this._render_chart()\n    // Render control panel\n    this._render_control_panel()\n}\n\n/**\n * Render the chart\n * @function\n * @private\n * @name bar_chart_wrapper#_render_chart\n */\nbar_chart_wrapper.prototype._render_chart = function () {\n    const chart_data = {\n        labels: this._data.labels,\n        datasets: [{\n            label: this._ylabel,\n            data: this._data.values,\n            backgroundColor: this._bar_colors,\n        }],\n    }\n    const scales_options = {\n        y: {\n            title: {\n                display: true,\n                text: this._ylabel,\n                font: {\n                    size: 14,\n                }\n            },\n        },\n    }\n    const plugins_options = {\n        legend: {\n            display: false,\n        },\n    }\n    // Render the graph\n    this.chart = new Chart(this.canvas, {\n        type: 'bar',\n        data: chart_data,\n        options: {\n            scales: scales_options,\n            plugins: plugins_options,\n            normalized: true,\n        },\n    })\n}\n\n/**\n * Render the control panel\n * @function\n * @private\n * @name bar_chart_wrapper#_render_control_panel\n */\nbar_chart_wrapper.prototype._render_control_panel = function () {\n    /**\n     * This bar_chart_wrapper instance\n     * @type {bar_chart_wrapper}\n     */\n    const self = this\n    // Create controls container\n    this.controls_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'controls',\n        class_name: 'o-green',\n        parent: this.div_wrapper,\n    })\n    /**\n     * Select for bar choice\n     * @type {Element}\n     */\n    const bar_select = common.create_dom_element({\n        element_type: 'select',\n        id: 'bar_selection',\n        parent: this.controls_container,\n        // TODO: add ARIA attributes?\n    })\n    for (const [index, label] of this._data.labels.entries()) {\n        common.create_dom_element({\n            element_type: 'option',\n            value: String(index),  // 0 as a number becomes false as a boolean...\n            text_content: label,\n            parent: bar_select,\n        })\n    }\n    /** iro.js color picker */\n    const color_picker_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'color_picker_container',\n        parent: this.controls_container\n    })\n    const color_picker = new window.iro.ColorPicker(color_picker_container, {\n        color: this._bar_colors[0],\n        width: COLOR_PICKER_WIDTH,\n        layoutDirection: 'horizontal',\n        layout: [\n            {\n                component: window.iro.ui.Wheel,\n            },\n            {\n                component: window.iro.ui.Slider,\n            },\n            {\n                component: window.iro.ui.Slider,\n                options: {\n                    sliderType: 'alpha',\n                }\n            },\n        ],\n    })\n    // Bar select change event\n    bar_select.addEventListener('change', () => {\n        const index = Number(bar_select.value)\n        color_picker.color.set(self._bar_colors[index])\n    })\n    // Color change event\n    color_picker.on('color:change', function (color) {\n        const index = Number(bar_select.value)\n        self.set_bar_color(index, color.rgbaString)\n    })\n}","\"use strict\";\n\nimport { chart_wrapper } from \"../chart-wrapper\";\n\n/**\n * D3 chart wrapper class\n * \n * Appends an `svg` tag to the provided div, so that it spans all width\n * \n * Subclasses MUST specify the viewBox of the svg, so that it responds to window resizing\n * @param {Element} div_wrapper the div containing the chart\n * @class\n * @abstract\n * @extends chart_wrapper\n */\nexport function d3_chart_wrapper(div_wrapper) {\n    if (this.constructor === d3_chart_wrapper) {\n        throw new Error(\"Abstract class 'd3_chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper.call(this, div_wrapper)\n    /**\n     * D3 selection object for the root `svg` tag\n     * @protected\n     */\n    this.svg = undefined\n\n}\n// Set prototype chain\nObject.setPrototypeOf(d3_chart_wrapper.prototype, chart_wrapper.prototype)\n\n/**\n * Render the chart (d3) and controls\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name d3_chart_wrapper#render\n * @function\n */\nd3_chart_wrapper.prototype.render = function () {\n    chart_wrapper.prototype.render.call(this)\n\n    this.svg = d3.select(this.div_wrapper)\n        .append('svg')\n        .attr('version', '1.1') // When drawing SVG to canvas with an `Image`, if we don't add version and xmlns the `Image` will never load :(\n        .attr('xmlns', 'http://www.w3.org/2000/svg')\n        .attr('width', '100%')\n}\n\n/**\n * Get the supported chart export formats\n * @function\n * @returns {string[]} the supported formats\n * @name d3_chart_wrapper#get_supported_export_formats\n */\nd3_chart_wrapper.prototype.get_supported_export_formats = function () {\n    return ['svg']\n}\n\n/**\n * Download the chart as svg\n * @param {string} filename the name of the file\n * @function\n * @name d3_chart_wrapper#_download_chart_as_svg\n */\nd3_chart_wrapper.prototype.download_chart_as_svg = function (filename) {\n    const svg_data = this.svg.node().outerHTML\n    const svg_blob = new Blob([svg_data], { type: \"image/svg+xml;charset=utf-8\" })\n    const url = URL.createObjectURL(svg_blob)\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: url,\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n    URL.revokeObjectURL(url)\n}","\"use strict\";\n\nimport { d3_chart_wrapper } from \"./d3-chart-wrapper\";\nimport { COLOR_PALETTE } from \"../chart-wrapper\";\n\n\n/**\n * Boxplot + violin chart wrapper\n * \n * Inspired in http://bl.ocks.org/asielen/d15a4f16fa618273e10f\n * \n * @param {Element}  div_wrapper the div to work in\n * @param {{string: number[]}} data the input data: group name\n *        and array of values\n * @param {string} ylabel the y label\n * @class\n * @extends d3_chart_wrapper\n */\nexport function boxvio_chart_wrapper(div_wrapper, data, ylabel) {\n    d3_chart_wrapper.call(this, div_wrapper)\n    /**\n     * Data: group name to array of values\n     * @type {{string: number[]}}\n     * @private\n     */\n    this._data = data\n    /**\n     * The label for the y axis\n     * @type {string}\n     * @private\n     */\n    this._ylabel = ylabel\n    /**\n     * Boxplot metrics for each group name\n     * @type {{string: {\n     *  max: number,\n     *  upper_fence: number,\n     *  quartile3: number,\n     *  median: number,\n     *  mean: number,\n     *  iqr: number,\n     *  quartile1: number,\n     *  lower_fence: number,\n     *  min: number,\n     * }}}\n     * @private\n     */\n    this._metrics = {}\n    for (const [name, values] of Object.entries(data)) {\n        this._metrics[name] = calc_metrics(values)\n    }\n    /**\n     * Maximum and minimum of the input data\n     * @type {[number, number]}\n     */\n    this._data_extent = d3.extent(Object.values(this._data).flat())\n    /**\n     * Full width of svg\n     * @type {number}\n     */\n    this._full_width = 960\n    /**\n     * Full height of svg\n     * @type {number}\n     */\n    this._full_height = 420\n    /**\n     * Non-graphic components of the chart: setting, scales, etc.\n     * @private\n     */\n    this._chart = {}\n    this._chart.margin = {top: 15, right: 3, bottom: 23, left: 50}\n    this._chart.width = this._full_width - this._chart.margin.left - this._chart.margin.right\n    this._chart.height = this._full_height - this._chart.margin.top - this._chart.margin.bottom\n    this._chart.yscale = d3.scaleLinear()\n        .range([this._chart.height, 0])\n        .domain(this._data_extent)\n        .clamp(true)  // when input outside of domain, its output is clamped to range\n    this._chart.yaxis = d3.axisLeft(this._chart.yscale)\n    this._chart.xscale = d3.scaleBand()\n        .domain(Object.keys(this._data))\n        .range([0, this._chart.width])\n        .padding(0.1)     // This is important: it is the space between 2 groups. 0 means no padding. 1 is the maximum.\n    this._chart.xaxis = d3.axisBottom(this._chart.xscale)\n    this._chart.histogram = d3.bin()\n        .domain(this._chart.yscale.domain())\n        // TODO: compute number of bins automatically depending on the range of the data\n        .thresholds(this._chart.yscale.ticks(10)) // Important: how many bins approx are going to be made? It is the 'resolution' of the violin plot\n        .value((d) => d)\n    this._chart.bins = []  // TODO: can do a one-liner here with map() on Object.entries(this._data)\n    for (const [name, values] of Object.entries(this._data)) {\n        this._chart.bins.push({\n            key: name,\n            value: this._chart.histogram(values),\n        })\n    }\n    /**\n     * Graphic components of the chart: d3 selection objects\n     * @private\n     */\n    this._graphics = {}\n    this._graphics.root_g = null\n}\n// Set prototype chain\nObject.setPrototypeOf(boxvio_chart_wrapper.prototype, d3_chart_wrapper.prototype)\n\n/**\n * Render the chart and the control panel\n * @function\n * @name boxvio_chart_wrapper#render\n */\nboxvio_chart_wrapper.prototype.render = function () {\n    // Call super render method\n    d3_chart_wrapper.prototype.render.call(this)\n    // Render chart\n    this._render_chart()\n    // Render control panel\n    this._render_control_panel()\n}\n\n/**\n * Render the chart\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_chart\n */\nboxvio_chart_wrapper.prototype._render_chart = function () {\n\n    // Set viewBox of svg\n    this.svg.attr('viewBox', `0 0 ${this._full_width} ${this._full_height}`)\n\n    // Root g tag\n    this._graphics.root_g = this.svg.append('g')\n        .attr('transform', `translate(${this._chart.margin.left},${this._chart.margin.top})`)\n    \n    this._render_axis()\n    this._render_violins()\n    this._render_boxes()\n\n}\n\n/**\n * Render the axis\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_axis\n */\nboxvio_chart_wrapper.prototype._render_axis = function () {\n    const g = this._graphics.root_g\n    // Render x axis\n    g.append('g')\n        .attr('transform', `translate(0,${this._chart.height})`)\n        .call(this._chart.xaxis)\n    // Render y axis\n    g.append('g')\n        .call(this._chart.yaxis)\n\n    // Render Y axis label\n    g.append('text')\n      .attr('text-anchor', 'middle')\n      .attr('transform', 'rotate(-90)')\n      .attr('y', -this._chart.margin.left + 20)\n      .attr('x', -this._chart.height/2)\n      .text(this._ylabel);\n}\n\n/**\n * Render the violins\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_violins\n */\nboxvio_chart_wrapper.prototype._render_violins = function () {\n\n    const chart = this._chart\n\n    // Get the largest count in a bin, as it will be the maximum width\n    let max_count = 0\n    for (const group of chart.bins) {\n        const longest = d3.max(group.value.map((v) => v.length))\n        if (longest > max_count) {\n            max_count = longest\n        }\n    }\n\n    // Make a scale linear to map bin counts to bandwidth\n    const xNum = d3.scaleLinear()\n        .range([0, chart.xscale.bandwidth()])\n        .domain([-max_count, max_count])\n\n    // Render\n    this._graphics.root_g.append('g')\n        .selectAll('violin')\n        .data(chart.bins)\n        .enter()  // Working per group now\n        .append('g')\n            .attr('transform', (d) => `translate(${chart.xscale(d.key)},0)`)\n        .append('path')\n            .datum((d) => d.value)  // Working per bin within a group\n            .style('stroke', 'black')\n            .style('stroke-width', 0.5)\n            .style('fill', 'ghostwhite')\n            .attr('d', d3.area()\n                .x0((d) => xNum(-d.length))\n                .x1((d) => xNum(d.length))\n                .y((d) => chart.yscale(d.x0))\n                .curve(d3.curveCatmullRom)\n            )\n\n}\n\n/**\n * Render the boxes (including whiskers and outliers)\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_boxes\n */\nboxvio_chart_wrapper.prototype._render_boxes = function () {\n    \n    const chart = this._chart\n    const g = this._graphics.root_g\n\n    // Get outliers\n    const outliers = {}\n    for (const [name, values] of Object.entries(this._data)) {\n        outliers[name] = values.filter(\n            (v) => v < this._metrics[name].lower_fence || v > this._metrics[name].upper_fence\n        )\n    }\n    \n    // Draw\n    const boxes = g.append('g')\n    const bandwidth = chart.xscale.bandwidth()\n    const box_width = 0.6 * bandwidth\n\n    const whiskers_lw = 2\n    const median_lw = 3\n\n    // Iterate over the groups\n    for (const [i, name] of Object.entries(Object.keys(this._data))) {\n\n        const metrics = this._metrics[name]\n        const color = COLOR_PALETTE[i%COLOR_PALETTE.length]  // loop around!\n\n        const group_box = boxes.append('g')\n            .attr('transform', `translate(${chart.xscale(name) + bandwidth/2},0)`)\n        \n        // Draw outliers\n        for (const outlier of outliers[name]) {\n            group_box.append('circle')\n                .attr('cx', 0)\n                .attr('cy', chart.yscale(outlier))\n                .attr('r', 4)\n                .style('fill', color)\n                .style('opacity', 0.6)\n        }\n\n        // Draw whiskers\n        const whiskers = group_box.append('g')\n        whiskers.append('line')  // vertical line\n            .attr('x1', 0)\n            .attr('y1', chart.yscale(metrics.lower_fence))\n            .attr('x2', 0)\n            .attr('y2', chart.yscale(metrics.upper_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n        whiskers.append('line') // lower horizontal\n            .attr('x1', -box_width/2)\n            .attr('y1', chart.yscale(metrics.lower_fence))\n            .attr('x2', box_width/2)\n            .attr('y2', chart.yscale(metrics.lower_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n        whiskers.append('line') // upper horizontal\n            .attr('x1', -box_width/2)\n            .attr('y1', chart.yscale(metrics.upper_fence))\n            .attr('x2', box_width/2)\n            .attr('y2', chart.yscale(metrics.upper_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n        \n        // Draw IQR box\n        const iqr = group_box.append('g')\n        iqr.append('rect')  // iqr rect\n            .attr('x', -box_width/2)\n            .attr('y', chart.yscale(metrics.quartile3))\n            .attr('width', box_width)\n            .attr('height', chart.yscale(metrics.quartile1) - chart.yscale(metrics.quartile3))\n            .attr('fill', color)\n        iqr.append('line')  // median line\n            .attr('x1', -box_width/2)\n            .attr('y1', chart.yscale(metrics.median))\n            .attr('x2', box_width/2)\n            .attr('y2', chart.yscale(metrics.median))\n            .attr('stroke', 'black')\n            .attr('stroke-width', median_lw)\n        iqr.append('circle')  // median dot\n            .attr('cx', 0)\n            .attr('cy', chart.yscale(metrics.median))\n            .attr('r', 5)\n            .style('fill', 'white')\n            .attr('stroke', 'black')\n            .attr('stroke-width', 2)\n    }\n\n}\n\n\n\n/**\n * Render the control panel\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_control_panel\n */\nboxvio_chart_wrapper.prototype._render_control_panel = function () {\n\n}\n\n// HELPER FUNCTIONS\n\n/**\n * Compute (boxplot) metrics for the data\n * @param {number[]} values the data values\n * @returns {{\n *  max: number,\n *  upper_fence: number,\n *  quartile3: number,\n *  median: number,\n *  mean: number,\n *  iqr: number,\n *  quartile1: number,\n *  lower_fence: number,\n *  min: number,\n * }}\n */\nfunction calc_metrics(values) {\n    const metrics = {\n        max: null,\n        upper_fence: null,\n        quartile3: null,\n        median: null,\n        mean: null,\n        iqr: null,\n        quartile1: null,\n        lower_fence: null,\n        min: null,\n    }\n\n    metrics.min = d3.min(values)\n    metrics.quartile1 = d3.quantile(values, 0.25)\n    metrics.median = d3.median(values)\n    metrics.mean = d3.mean(values)\n    metrics.quartile3 = d3.quantile(values, 0.75)\n    metrics.max = d3.max(values)\n    metrics.iqr = metrics.quartile3 - metrics.quartile1\n    metrics.lower_fence = metrics.quartile1 - 1.5 * metrics.iqr\n    metrics.upper_fence = metrics.quartile3 + 1.5 * metrics.iqr\n\n    return metrics\n}","/*global tstring, page_globals, Promise, data_manager, common */\n/*eslint no-undef: \"error\"*/\n\n\"use strict\";\n\n\nimport { chart_wrapper } from \"./charts/chart-wrapper.js\";\nimport { histogram_wrapper } from \"./charts/chartjs/histogram-wrapper.js\";\nimport { bar_chart_wrapper } from \"./charts/chartjs/bar-chart-wrapper.js\";\nimport { boxvio_chart_wrapper } from \"./charts/d3/boxvio-chart-wrapper.js\";\n\n\nexport const analysis =  {\n\n\t// Form factory instance\n\tform: null,\n\n\tarea_name\t\t\t\t: null,\n\trow\t\t\t\t\t\t: null,\n\n\t// DOM containers\n\texport_data_container\t: null,\n\tform_items_container\t: null,\n\tchart_wrapper_container\t: null,\n\n\t/**\n\t * Chart wrapper instance\n\t * @type {chart_wrapper}\n\t */\n\tchart_wrapper: null,\n\n\n\tset_up : function(options) {\n\n\t\tconst self = this\n\n\t\t// options\n\t\t\tself.area_name\t\t\t\t\t= options.area_name\n\t\t\tself.export_data_container\t\t= options.export_data_container\n\t\t\tself.row\t\t\t\t\t\t= options.row\n\t\t\tself.form_items_container\t\t= options.form_items_container\n\t\t\tself.chart_wrapper_container\t= options.chart_wrapper_container\n\n\t\t// form\n\t\tconst form_node = self.render_form()\n\t\tself.form_items_container.appendChild(form_node)\n\n\t\treturn true\n\t},//end set_up\n\n\t/**\n\t * RENDER FORM\n\t */\n\trender_form : function() {\n\n\t\tconst self = this\n\n\t\t// DocumentFragment is like a virtual DOM\n\t\tconst fragment = new DocumentFragment()\n\n\t\t// form_factory instance\n\t\t\tself.form = self.form || new form_factory()\n\n\t\tconst form_row = common.create_dom_element({\n\t\t\telement_type\t: \"div\",\n\t\t\tclass_name\t\t: \"form-row fields\",\n\t\t\tparent\t\t\t: fragment\n\t\t})\n\n\t\t// mint\n\t\t\tself.form.item_factory({\n\t\t\t\tid\t\t\t\t: \"mint\",\n\t\t\t\tname\t\t\t: \"mint\",\n\t\t\t\tlabel\t\t\t: tstring.mint || \"mint\",\n\t\t\t\tq_column\t\t: \"p_mint\",\n\t\t\t\tvalue_wrapper\t: ['[\"', '\"]'], // to obtain [\"value\"] in selected value only\n\t\t\t\teq\t\t\t\t: \"LIKE\",\n\t\t\t\teq_in\t\t\t: \"%\",\n\t\t\t\teq_out\t\t\t: \"%\",\n\t\t\t\tis_term\t\t\t: true,\n\t\t\t\tparent\t\t\t: form_row,\n\t\t\t\tcallback\t\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// number\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"number\",\n\t\t\t\tname \t\t: \"number\",\n\t\t\t\tq_column \t: \"term\",\n\t\t\t\tq_table \t: \"types\",\n\t\t\t\tlabel\t\t: tstring.number_key || \"Number & Key\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// denomination\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"denomination\",\n\t\t\t\tname \t\t: \"denomination\",\n\t\t\t\tq_column \t: \"ref_type_denomination\",\n\t\t\t\tq_table \t: \"any\",\n\t\t\t\tlabel\t\t: tstring.denomination || \"denomination\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\n\t\t// submit button\n\t\t\tconst submit_group = common.create_dom_element({\n\t\t\t\telement_type\t: \"div\",\n\t\t\t\tclass_name\t\t: \"form-group field button_submit\",\n\t\t\t\tparent\t\t\t: fragment\n\t\t\t})\n\t\t\tconst submit_button = common.create_dom_element({\n\t\t\t\telement_type\t: \"input\",\n\t\t\t\ttype\t\t\t: \"submit\",\n\t\t\t\tid\t\t\t\t: \"submit\",\n\t\t\t\tvalue\t\t\t: tstring.search || \"Search\",\n\t\t\t\tclass_name\t\t: \"btn btn-light btn-block primary\",\n\t\t\t\tparent\t\t\t: submit_group\n\t\t\t})\n\t\t\tsubmit_button.addEventListener(\"click\", function (e) {\n\t\t\t\te.preventDefault()\n\t\t\t\tself.form_submit(form)\n\t\t\t})\n\n\t\t// reset button\n\t\t\tconst reset_button = common.create_dom_element({\n\t\t\t\telement_type\t: \"input\",\n\t\t\t\ttype\t\t\t: \"button\",\n\t\t\t\tid\t\t\t\t: \"button_reset\",\n\t\t\t\tvalue\t\t\t: tstring.reset || 'Reset',\n\t\t\t\tclass_name\t\t: \"btn btn-light btn-block secondary button_reset\",\n\t\t\t\tparent\t\t\t: submit_group\n\t\t\t})\n\t\t\treset_button.addEventListener(\"click\", function (e) {\n\t\t\t\te.preventDefault()\n\t\t\t\twindow.location.replace(window.location.pathname);\n\t\t\t})\n\n\t\t// operators\n\t\t\t// fragment.appendChild( forms.build_operators_node() )\n\t\t\tconst operators_node = self.form.build_operators_node()\n\t\t\tfragment.appendChild( operators_node )\n\n\t\t// the form element itself!\n\t\t\tconst form = common.create_dom_element({\n\t\t\t\telement_type\t: \"form\",\n\t\t\t\tid\t\t\t\t: \"search_form\",\n\t\t\t\tclass_name\t\t: \"form-inline\"\n\t\t\t})\n\t\t\tform.appendChild(fragment)\n\n\n\t\treturn form\n\t},//end render_form\n\n\t/**\n\t * FORM SUBMIT\n\t * Form submit launch search\n\t */\n\tform_submit : function(form_obj, options={}) {\n\t\t\n\t\tconst self = this\n\n\t\t// options\n\t\t\tconst scroll_result\t= typeof options.scroll_result===\"boolean\" ? options.scroll_result : true\n\t\t\tconst form_items\t= options.form_items || self.form.form_items\n\n\t\t// build filter\n\t\t\tconst filter = self.form.build_filter({\n\t\t\t\tform_items: form_items\n\t\t\t})\n\t\t\n\t\t// empty filter case\n\t\t\tif (!filter || filter.length<1) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t// search rows exec against API\n\t\t\tconst js_promise = self.search_rows({\n\t\t\t\tfilter\t\t\t: filter,\n\t\t\t\tlimit\t\t\t: 0\n\t\t\t})\n\t\t\t.then((parsed_data)=>{\n\n\t\t\t\tevent_manager.publish('form_submit', parsed_data)\n\n\t\t\t\tconsole.log(parsed_data)\n\n\t\t\t\t// const diameters = parsed_data\n\t\t\t\t// \t.map((ele) => ele.full_coins_reference_diameter_max)\n\t\t\t\t// \t.flat()\n\t\t\t\t// \t.filter((v) => v)\n\t\t\t\t// console.log(diameters)\n\n\t\t\t\t// this.chart_wrapper = new histogram_wrapper(\n\t\t\t\t// \tthis.chart_wrapper_container,\n\t\t\t\t// \tdiameters,\n\t\t\t\t// \t'Diameter'\n\t\t\t\t// )\n\t\t\t\t// this.chart_wrapper.render()\n\n\t\t\t\tconst data = {}\n\t\t\t\tfor (const ele of parsed_data) {\n\t\t\t\t\tconst name = ele.term.split(' ')[0].slice(0, -1)\n\t\t\t\t\t// if (!['12', '59', '62', '18','11a','14'].includes(name)) continue\n\t\t\t\t\tif (!['59', '62'].includes(name)) continue\n\t\t\t\t\tconst tmpData = {}\n\t\t\t\t\tconst calculable = ele.full_coins_reference_calculable\n\t\t\t\t\tconst diameter_max = ele.full_coins_reference_diameter_max\n\t\t\t\t\tconst diameter_min = ele.full_coins_reference_diameter_min\n\t\t\t\t\tconst weight = ele.full_coins_reference_weight\n\t\t\t\t\tif (diameter_max && diameter_max.length) {\n\t\t\t\t\t\ttmpData.diameter_max = diameter_max.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (diameter_min && diameter_min.length) {\n\t\t\t\t\t\ttmpData.diameter_min = diameter_min.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (weight && weight.length) {\n\t\t\t\t\t\ttmpData.weight = weight.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (Object.keys(tmpData).length) {\n\t\t\t\t\t\tdata[name] = tmpData\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.log(data)\n\t\t\t\tconst input_data = {}\n\t\t\t\tfor (const [name, props] of Object.entries(data)) {\n\t\t\t\t\tinput_data[name] = props.diameter_max\n\t\t\t\t}\n\t\t\t\tconsole.log(input_data)\n\t\t\t\tthis.chart_wrapper = new boxvio_chart_wrapper(\n\t\t\t\t\tthis.chart_wrapper_container,\n\t\t\t\t\tinput_data,\n\t\t\t\t\t'Diameter'\n\t\t\t\t)\n\t\t\t\tthis.chart_wrapper.render()\n\n\t\t\t})\n\n\t},\n\n\t/**\n\t * SEARCH_ROWS\n\t * Call to API and load json data results of search\n\t */\n\tsearch_rows : function(options) {\n\n\t\tconst self = this\n\n\t\t// sort vars\n\t\t\tconst filter\t\t\t= options.filter || null\n\t\t\tconst ar_fields\t\t\t= options.ar_fields || [\"*\"]\n\t\t\tconst order\t\t\t\t= options.order || \"norder ASC\"\n\t\t\tconst lang\t\t\t\t= page_globals.WEB_CURRENT_LANG_CODE\n\t\t\tconst process_result\t= options.process_result || null\n\t\t\tconst limit\t\t\t\t= options.limit != undefined\n\t\t\t\t\t\t\t\t\t\t? options.limit\n\t\t\t\t\t\t\t\t\t\t: 30\n\t\t\n\t\treturn new Promise(function(resolve){\n\t\t\t// parse_sql_filter\n\t\t\t\tconst group = []\n\t\t\t// parsed filters\n\t\t\t\tconst sql_filter = self.form.parse_sql_filter(filter)\n\t\t\t// request\n\t\t\t\tconst request_body = {\n\t\t\t\t\tdedalo_get\t\t: 'records',\n\t\t\t\t\ttable\t\t\t: 'catalog',\n\t\t\t\t\tar_fields\t\t: ar_fields,\n\t\t\t\t\tlang\t\t\t: lang,\n\t\t\t\t\tsql_filter\t\t: sql_filter,\n\t\t\t\t\tlimit\t\t\t: limit,\n\t\t\t\t\tgroup\t\t\t: (group.length>0) ? group.join(\",\") : null,\n\t\t\t\t\tcount\t\t\t: false,\n\t\t\t\t\torder\t\t\t: order,\n\t\t\t\t\tprocess_result\t: process_result\n\t\t\t\t}\n\t\t\t\tdata_manager.request({\n\t\t\t\t\tbody : request_body\n\t\t\t\t})\n\t\t\t\t.then((response)=>{\n\t\t\t\t\t// data parsed\n\t\t\t\t\tconst data = page.parse_catalog_data(response.result)\n\n\t\t\t\t\tresolve(data)\n\t\t\t\t})\n\t\t})\n\n\t},\n\n}//end analysis\n\n"],"mappings":"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"}