{"version":3,"names":["COLOR_PALETTE","chart_wrapper","div_wrapper","this","constructor","Error","_n_charts_created","id","download_chart_container","undefined","plot_container","controls_container","d3_chart_wrapper","call","svg","toggle_visibility","element","attr","transition","linspace","start","stop","nsteps","delta","d3","range","map","i","prototype","id_string","render","self","replaceChildren","supported_formats","get_supported_export_formats","length","common","create_dom_element","element_type","class_name","style","display","parent","format_select","width","format","value","text_content","toUpperCase","addEventListener","download_chart","filename","download_func_name","Object","setPrototypeOf","select","append","download_chart_as_svg","svg_data","node","outerHTML","svg_blob","Blob","type","url","URL","createObjectURL","tmpLink","href","setAttribute","click","remove","revokeObjectURL","CURVES","Basis","curveBasis","curveBasisClosed","curveBasisOpen","Bundle","curveBundle","curveBumpX","curveBumpY","Cardinal","curveCardinal","curveCardinalClosed","curveCardinalOpen","curveCatmullRom","curveCatmullRomClosed","curveCatmullRomOpen","Linear","curveLinear","curveLinearClosed","curveMonotoneX","curveMonotoneY","Natural","curveNatural","Step","curveStep","curveStepAfter","curveStepBefore","compute_n_bins","sqrt","values","Math","ceil","sturges","log2","rice","pow","doane","n","sigma","std","deviation","mean","sum","skew","abs","scott","max","min","freedman_diaconis","quartile3","quantile","quartile1","iqr","boxvio_chart_wrapper","data","sort_xaxis","ylabel","overflow","obj","_overflow","_data","_group_names","keys","sort","_colors","name","_ylabel","_metrics","fromEntries","entries","calc_metrics","_outliers","filter","v","lower_fence","upper_fence","_data_extents","extent","_data_extent","flat","_full_width","_full_height","_chart","margin","top","right","bottom","left","height","yscale","scaleLinear","domain","clamp","yaxis","axisLeft","tickFormat","violin_scale_default","violin_scale","box_scale_default","box_scale","xscale","scaleBand","xaxis","axisBottom","n_bins_default","n_bins","JSON","parse","stringify","histogram","bin","thresholds","bins","supported_curves","violin_curve","_graphics","root_g","yaxis_g","violins_g","violins","boxes_g","outliers","_controls","max_bins_multiplier","metrics","median","chartjs_chart_wrapper","canvas","chart","histogram_wrapper","xlabel","_density","_n_bins_default","_n_bins","_xlabel","_n_decimals","_max_bins_multiplier","_bar_color","set_violin_scale","scale","selectAll","_render_violins","set_n_bins","_render_violin","set_violin_curve","curve_name","set_box_scale","_render_boxes","_render_chart","_render_control_panel","_render_axis","g","text","is_g_ready","bandwidth","max_count","x_num","datum","area","x0","d","x1","y","curve","boxes","box_width","color","group_box","outlier","whiskers","_render_violin_curve_selector","_render_checkboxes","_render_scale_sliders","_render_n_bins_control","curve_select_id","curve_select","show_violins_checkbox_id","show_violins_checkbox","checked","show_boxes_checkbox_id","show_boxes_checkbox","show_outliers_checkbox_id","show_outliers_checkbox","group","violin_scale_slider","Number","box_scale_slider","group_select_id","group_select","violin_n_bins_slider","download_chart_as_png","toBase64Image","_tweak_c2s","offsetWidth","offsetHeight","options","animation","reponsive","svgContext","C2S","Chart","config","_config","encodeURIComponent","getSerializedSvg","getContext","contextId","__canvas","getAttribute","listener","eventListenerOptions","get_density","set_density","density","bin_centers","plot_data","half_bin_width","data_min","data_max","_get_plotting_data","datasets","label","_get_density_string","scales","title","update","get_n_bins","x","ticks","stepSize","plugins","tooltip","callbacks","_get_tooltip_title_callback","get_bar_color","set_bar_color","bar_color","backgroundColor","bin_width","Array","apply","index","j","reduce","partialSum","val","n_decimals","items","dataIndex","toFixed","chart_data","categoryPercentage","barPercentage","scales_options","offset","grid","callback","labels","font","size","plugins_options","legend","parsing","normalized","slider","density_checkbox_id","density_checkbox","Boolean","color_picker_container","window","iro","ColorPicker","layoutDirection","layout","component","ui","Wheel","Slider","sliderType","on","rgbaString","analysis","form","area_name","row","export_data_container","form_items_container","diameter_chart_container","weight_chart_container","diameter_chart_wrapper","weight_chart_wrapper","set_up","form_node","render_form","appendChild","fragment","DocumentFragment","form_factory","form_row","item_factory","tstring","mint","q_column","value_wrapper","eq","eq_in","eq_out","is_term","form_item","activate_autocomplete","table","q_table","number_key","group_op","material","denomination","submit_group","search","e","preventDefault","form_submit","reset","location","replace","pathname","operators_node","build_operators_node","form_obj","scroll_result","form_items","build_filter","scrollIntoView","behavior","block","inline","search_rows","limit","process_result","fn","columns","then","parsed_data","event_manager","publish","console","log","ele","ref_type_number","tmpData","calculable","full_coins_reference_calculable","diameter_max","full_coins_reference_diameter_max","diameter_min","full_coins_reference_diameter_min","weight","full_coins_reference_weight","diameters","props","weights","ar_fields","order","lang","page_globals","WEB_CURRENT_LANG_CODE","Promise","resolve","sql_filter","parse_sql_filter","request_body","dedalo_get","join","count","data_manager","request","body","response","page","parse_catalog_data","result"],"sources":["../../lib/charts/chart-wrapper.js","../../lib/charts/d3/d3-chart-wrapper.js","../../lib/charts/d3/utils.js","../../lib/charts/compute-n-bins.js","../../lib/charts/d3/boxvio-chart-wrapper.js","../../lib/charts/utils.js","../../lib/charts/chartjs/chartjs-chart-wrapper.js","../../lib/charts/chartjs/histogram-wrapper.js","analysis.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Width (in pixels) of color picker\n * @type {number}\n */\nexport const COLOR_PICKER_WIDTH = 200\n\n/**\n * Default name for the chart -> when exporting,\n * `<name>.<format>`\n * @type {string}\n */\nconst DEFAULT_CHART_NAME = 'chart'\n\n/**\n * Color palette, totally stolen from matplotlib\n * @type {string[]}\n */\nexport const COLOR_PALETTE = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#17becf']\n\n\n/**\n * Chart wrapper class\n * \n * The `render` method must be called for the chart to be rendered to the DOM!!!\n * \n * Within the provided div wrapper, it will create three divs:\n * 1. If download is supported, a div to containing the download section, with\n *    id `chart<id>_download_chart_container` class `download_chart_container`\n * 2. A div to contain the plot itself, with id `chart<id>_plot_wrapper` class `plot_wrapper` \n * 3. A div to contain the control panel, with id `chart<id>_control_panel` and class `control_panel`\n * \n * It clears the container div during render, so subclasses should work with the dom\n * after the render method of this superclass has been called\n * @class\n * @abstract\n * @param {Element} div_wrapper \n */\nexport function chart_wrapper(div_wrapper) {\n    if (this.constructor === chart_wrapper) {\n        throw new Error(\"Abstract class 'chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper._n_charts_created++;\n    /**\n     * Unique identifier for the chart.\n     * \n     * Subclasses MUST use this in order to assing IDs\n     * to DOM elements, in order to avoid bugs and cross-chart events\n     * @type {number}\n     */\n    this.id = chart_wrapper._n_charts_created\n    /**\n     * Div element wrapping the chart itself and\n     * the controls\n     * @type {Element}\n     * @protected\n     */\n    this.div_wrapper = div_wrapper\n    /**\n     * Div container for chart download\n     * @type {Element}\n     * @protected\n     */\n    this.download_chart_container = undefined\n    /**\n     * Div inside the div_wrapper, that just wraps the drawing\n     * @type {Element}\n     * @protected\n     */\n    this.plot_container = undefined\n    /**\n     * Div container for user controls\n     * Used freely by each subclass\n     * @type {Element}\n     * @protected\n     */\n    this.controls_container = undefined\n}\n\n/**\n * Amount of created charts\n * @type {number}\n * @static\n * @private\n */\nchart_wrapper._n_charts_created = 0;\n\n/**\n * Get a string representing the ID of the chart\n * @returns {string} the id as a string\n *          (`'chart1'`, `'chart2'`, ...)\n */\nchart_wrapper.prototype.id_string = function () {\n    return `chart${this.id}`\n}\n\n/**\n * Render the chart and controls\n * \n * Empties the div wrapper and resets properties\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name chart_wrapper#render\n * @function\n */\nchart_wrapper.prototype.render = function () {\n    // Save this chart_wrapper intance\n    /**\n     * This chart_wrapper intance\n     * @type {chart_wrapper}\n     */\n    const self = this\n    // Remove all children in the div_wrapper\n    this.div_wrapper.replaceChildren()\n\n    // Set controls container to undefined\n    this.controls_container = undefined\n\n    // Create the chart download section\n    const supported_formats = this.get_supported_export_formats()\n    if (supported_formats.length) {\n        this.download_chart_container = common.create_dom_element({\n            element_type: 'div',\n            id: `${this.id_string()}_download_chart_container`,\n            class_name: 'o-purple download_chart_container',\n            style: {\n                'display': 'flex',\n                'flex-direction': 'row',\n                'justify-content': 'center',\n            },\n            parent: this.div_wrapper,\n        })\n        const format_select = common.create_dom_element({\n            element_type: 'select',\n            id: `${this.id_string()}_chart_export_format`,\n            style: {\n                'width': '80%',\n            },\n            parent: this.download_chart_container,\n            // TODO: add ARIA attributes?\n        })\n        for (const format of supported_formats) {\n            common.create_dom_element({\n                element_type: 'option',\n                value: format,\n                text_content: format.toUpperCase(),\n                parent: format_select,\n            })\n        }\n        const chart_download_button = common.create_dom_element({\n            element_type: 'button',\n            text_content: 'Download',\n            style: {\n                'width': '20%',\n            },\n            parent: this.download_chart_container,\n        })\n        chart_download_button.addEventListener('click', () => {\n            self.download_chart(format_select.value)\n        })\n    }\n\n    // Create the div for wrapping the plot\n    this.plot_container = common.create_dom_element({\n        element_type: 'div',\n        id: `${this.id_string()}_plot_wrapper`,\n        class_name: 'o-purple plot_wrapper',\n        parent: this.div_wrapper,\n    })\n\n    // Create the div for the control panel\n    this.controls_container = common.create_dom_element({\n        element_type: 'div',\n        id: `${this.id_string()}_control_panel`,\n        class_name: 'o-green control_panel',\n        parent: this.div_wrapper,\n    })\n}\n\n/**\n * Download the chart as an image\n * \n * For each supported format in the subclass,\n * @see chart_wrapper#get_supported_export_formats\n * the subclass must implement a method called\n * `download_chart_as_<format>`\n * @param {string} format the image format\n * @function\n * @abstract\n * @name chart_wrapper#download_chart\n */\nchart_wrapper.prototype.download_chart = function (format) {\n    /**\n     * File name for the chart\n     * @type {string}\n     */\n    const filename = `${DEFAULT_CHART_NAME}.${format}`\n    /**\n     * Function name for downloading with the particular format\n     * @type {string}\n     */\n    const download_func_name = `download_chart_as_${format}`\n    if (this[download_func_name] === undefined) {\n        throw new Error(`${download_func_name} is not implemented!`)\n    }\n    this[download_func_name](filename)\n}\n\n/**\n * Get the supported chart export formats\n * \n * Subclasses must return their own supported formats, if any, e.g.,\n * `['png', 'jpg', 'eps']`. If no format is supported, there is no\n * need to override this method.\n * @function\n * @returns {string[]} the supported formats\n * @name chart_wrapper#get_supported_export_formats\n */\nchart_wrapper.prototype.get_supported_export_formats = function () {\n    return []\n}","\"use strict\";\n\nimport { chart_wrapper } from \"../chart-wrapper\";\n\n/**\n * D3 chart wrapper class\n * \n * Appends an `svg` tag to the provided div, so that it spans all width\n * \n * Subclasses MUST specify the viewBox of the svg, so that it responds to window resizing\n * The created svg tag has width=100%, spanning the width of the parent element. Subclasses\n * can alter this behavior by modifying the svg after the superclass render method has been\n * called\n * @param {Element} div_wrapper the div containing the chart\n * @class\n * @abstract\n * @extends chart_wrapper\n */\nexport function d3_chart_wrapper(div_wrapper) {\n    if (this.constructor === d3_chart_wrapper) {\n        throw new Error(\"Abstract class 'd3_chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper.call(this, div_wrapper)\n    /**\n     * D3 selection object for the root `svg` tag\n     * @protected\n     */\n    this.svg = undefined\n\n}\n// Set prototype chain\nObject.setPrototypeOf(d3_chart_wrapper.prototype, chart_wrapper.prototype)\n\n/**\n * Render the chart (d3) and controls\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name d3_chart_wrapper#render\n * @function\n */\nd3_chart_wrapper.prototype.render = function () {\n    chart_wrapper.prototype.render.call(this)\n\n    this.svg = d3.select(this.plot_container)\n        .append('svg')\n        .attr('version', '1.1') // When drawing SVG to canvas with an `Image`, if we don't add version and xmlns the `Image` will never load :(\n        .attr('xmlns', 'http://www.w3.org/2000/svg')\n        .attr('width', '100%')\n}\n\n/**\n * Get the supported chart export formats\n * @function\n * @returns {string[]} the supported formats\n * @name d3_chart_wrapper#get_supported_export_formats\n */\nd3_chart_wrapper.prototype.get_supported_export_formats = function () {\n    return ['svg']\n}\n\n/**\n * Download the chart as svg\n * @param {string} filename the name of the file\n * @function\n * @name d3_chart_wrapper#_download_chart_as_svg\n */\nd3_chart_wrapper.prototype.download_chart_as_svg = function (filename) {\n    const svg_data = this.svg.node().outerHTML\n    const svg_blob = new Blob([svg_data], { type: \"image/svg+xml;charset=utf-8\" })\n    const url = URL.createObjectURL(svg_blob)\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: url,\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n    URL.revokeObjectURL(url)\n}","/**\n * Toggle visibility of a d3 selection element\n * @param {d3.selection} element the elememt\n */\nexport function toggle_visibility(element) {\n    if (element.attr('opacity') == 0) {\n        element.transition().attr('opacity', 1)\n    } else {\n        element.transition().attr('opacity', 0)\n    }\n}\n\n/**\n * Get an array of values, evenly spaced over an\n * interval\n * \n * https://gist.github.com/davebiagioni/1ac21feb1c2db04be4e6\n * @param {number} start start value\n * @param {number} stop stop value\n * @param {number} nsteps amount of spets\n * @returns {number[]} the values\n */\nexport function linspace(start, stop, nsteps){\n    const delta = (stop-start)/(nsteps-1)\n    return d3.range(nsteps).map((i) => start+i*delta)\n}\n\n/**\n * Map from name to d3 curve\n * https://github.com/d3/d3/blob/main/API.md#curves\n * @type {Object.<string, d3.curve>}\n */\nexport const CURVES = {\n    // cubic basis spline, repeating the end points\n    'Basis': d3.curveBasis,\n    // a closed cubic basis spline\n    'Basis closed': d3.curveBasisClosed,\n    // a cubic basis spline\n    'Basis open': d3.curveBasisOpen,\n    // a straightened cubic basis spline (works only with d3.line, not d3.area!)\n    'Bundle': d3.curveBundle,\n    // a cubic Bézier spline with horizontal tangents\n    'Bump X': d3.curveBumpX,\n    // a cubic Bézier spline with vertical tangents\n    'Bump Y': d3.curveBumpY,\n    // a cubic cardinal spline, with one-sided difference at each end\n    'Cardinal': d3.curveCardinal,\n    // a closed cubic cardinal spline\n    'Cardinal closed': d3.curveCardinalClosed,\n    // a cubic cardinal spline\n    'Cardinal open': d3.curveCardinalOpen,\n    // a cubic Catmull–Rom spline, with one-sided difference at each end\n    'Catmull-Rom': d3.curveCatmullRom,\n    // a closed cubic Catmull–Rom spline\n    'Catmull-Rom closed': d3.curveCatmullRomClosed,\n    // a cubic Catmull–Rom spline\n    'Catmull-Rom open': d3.curveCatmullRomOpen,\n    // a polyline\n    'Linear': d3.curveLinear,\n    // a closed polyline.\n    'Linear closed': d3.curveLinearClosed,\n    // a cubic spline that, given monotonicity in x, preserves it in y\n    'Monotone X': d3.curveMonotoneX,\n    // a cubic spline that, given monotonicity in y, preserves it in x\n    'Monotone Y': d3.curveMonotoneY,\n    // a natural cubic spline\n    'Natural': d3.curveNatural,\n    // a piecewise constant function\n    'Step': d3.curveStep,\n    // a piecewise constant function\n    'Step after': d3.curveStepAfter,\n    // a piecewise constant function\n    'Step before': d3.curveStepBefore,\n}\n","/**\n * Implements methods for computing the number of\n * bins based on the data values\n * \n * Each method takes an array of data values as input\n * and outputs the number of bins\n * @class\n */\nexport function compute_n_bins() {}\n\n/**\n * Compute number of bins with the square root rule\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.sqrt = function (values) {\n\treturn Math.ceil(Math.sqrt(values.length))\n}\n\n/**\n * Compute number of bins with the Sturges rule\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.sturges = function (values) {\n\treturn Math.ceil(Math.log2(values.length)) + 1\n}\n\n/**\n * Compute number of bins with the Rice rule\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.rice = function (values) {\n\treturn Math.ceil(2*Math.pow(values.length, 1/3))\n}\n\n/**\n * Compute number of bins with Doane's formula\n * \n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.doane = function (values) {\n\tconst n = values.length\n\tif (n < 2) {\n\t\tthrow new Error(\"Doane's rule needs at least 2 datapoints\")\n\t}\n\tconst sigma = Math.sqrt(6*(n-2)/((n+1)*(n+3)))\n\tconst std = d3.deviation(values)\n\tconst mean = d3.mean(values)\n\tconst sum = d3.sum(values)\n\t// The adjusted Fisher-Pearson skewness coefficient\n\t// https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/skewness.htm\n\tconst skew = (Math.sqrt(n*(n+1))/(n-2))*((sum-n*mean)/(n*Math.pow(std, 3)))\n\treturn 1 + Math.ceil(Math.log2(n)) + Math.ceil(Math.log2(1+Math.abs(skew)/sigma))\n}\n\n/**\n * Compute number of bins with Scott's normal\n * reference rule\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.scott = function (values) {\n\tif (values.length < 2) {\n\t\tthrow new Error(\n\t\t\t\"Cannot compute standard deviation of an array with less than 2 values\"\n\t\t)\n\t}\n\treturn Math.ceil(\n\t\t(d3.max(values)-d3.min(values))*Math.pow(values.length, 1/3)/(3.49*d3.deviation(values))\n\t)\n}\n\n/**\n * Compute number of bins with Freedman-Diaconis' choice\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.freedman_diaconis = function (values) {\n\tconst quartile3 = d3.quantile(values, 0.75)\n\tconst quartile1 = d3.quantile(values, 0.25)\n\tconst iqr =  quartile3 - quartile1\n\tif (quartile1 === quartile3) {\n\t\tthrow new Error(\"IQR is 0!\")\n\t}\n\treturn Math.ceil(\n\t\t(d3.max(values)-d3.min(values))*Math.pow(values.length, 1/3)/(2*iqr)\n\t)\n}\n","\"use strict\";\n\nimport { d3_chart_wrapper } from \"./d3-chart-wrapper\";\nimport { COLOR_PALETTE } from \"../chart-wrapper\";\nimport { toggle_visibility, linspace, CURVES } from \"./utils\";\nimport { compute_n_bins } from \"../compute-n-bins\";\nimport { deepcopy } from \"../utils\"\n\n\n/**\n * Padding for the y-axis, to fit the label\n * @type {number}\n */\nconst YAXIS_PADDING = 62;\n\n/**\n * Boxplot + violin chart wrapper\n * \n * Inspired in http://bl.ocks.org/asielen/d15a4f16fa618273e10f,\n * https://d3-graph-gallery.com/graph/violin_basicHist.html,\n * https://d3-graph-gallery.com/graph/boxplot_show_individual_points.html\n * \n * @param {Element}  div_wrapper the div to work in\n * @param {{[group_name: string]: number[]}} data the input data: group name\n *        and array of values\n * @param {boolen} sort_xaxis whether to sort the xaxis\n * @param {string} ylabel the y label\n * @param {boolean} overflow whether to go beyond the width of the plot container\n * @class\n * @extends d3_chart_wrapper\n */\nexport function boxvio_chart_wrapper(div_wrapper, data, sort_xaxis, ylabel, overflow) {\n    d3_chart_wrapper.call(this, div_wrapper)\n    /**\n     * Whether to go beyond the width of the plot container\n     * @type {boolean}\n     */\n    this._overflow = overflow\n    /**\n     * Data: group name to array of values\n     * @type {Object.<string, number[]>}\n     * @private\n     */\n    this._data = data\n    /**\n     * Group names\n     * @type {string[]}\n     * @private\n     */\n    this._group_names = sort_xaxis ? Object.keys(this._data).sort() : Object.keys(this._data)\n    /**\n     * Colors\n     * @type {string[]}\n     * @private\n     */\n    this._colors = this._group_names.map((name, i) => COLOR_PALETTE[i % COLOR_PALETTE.length])\n    /**\n     * The label for the y axis\n     * @type {string}\n     * @private\n     */\n    this._ylabel = ylabel\n    /**\n     * Boxplot metrics for each group name\n     * @type {{[group_name: string]: {\n     *  max: number,\n     *  upper_fence: number,\n     *  quartile3: number,\n     *  median: number,\n     *  mean: number,\n     *  iqr: number,\n     *  quartile1: number,\n     *  lower_fence: number,\n     *  min: number,\n     * }}}\n     * @private\n     */\n    this._metrics = Object.fromEntries(Object.entries(data).map(\n        ([name, values]) => [name, calc_metrics(values)]\n    ))\n    /**\n     * Outliers per group name\n     * @type {{[group_name: string]: number[]}}\n     * @private\n     */\n    this._outliers = Object.fromEntries(Object.entries(data).map(\n        ([name, values]) => [\n            name,\n            values.filter(\n                (v) => v < this._metrics[name].lower_fence || v > this._metrics[name].upper_fence\n            )\n        ]\n    ))\n    /**\n     * Maximum and minimum values of each group\n     * @type {Object.<string, [number, number]>}\n     */\n    this._data_extents = Object.fromEntries(Object.entries(data).map(\n        ([name, values]) => [name, d3.extent(values)]\n    ))\n    /**\n     * Maximum and minimum of the input data\n     * @type {[number, number]}\n     */\n    this._data_extent = d3.extent(Object.values(this._data_extents).flat())\n    /**\n     * Full width of svg\n     * @type {number}\n     */\n    this._full_width = 330.664701211*Math.sqrt(Object.keys(data).length) + -170.664701211 + YAXIS_PADDING\n    /**\n     * Full height of svg\n     * @type {number}\n     */\n    this._full_height = 420\n    /**\n     * Non-graphic components of the chart: setting, scales, etc.\n     * @private\n     */\n    this._chart = {}\n    this._chart.margin = { top: 15, right: 4, bottom: 23, left: YAXIS_PADDING }\n    this._chart.width = this._full_width - this._chart.margin.left - this._chart.margin.right\n    this._chart.height = this._full_height - this._chart.margin.top - this._chart.margin.bottom\n    this._chart.yscale = d3.scaleLinear()\n        .range([this._chart.height, 0])\n        .domain(this._data_extent)\n        .clamp(true)  // when input outside of domain, its output is clamped to range\n    this._chart.yaxis = d3.axisLeft(this._chart.yscale)\n    this._chart.yaxis.tickFormat(d3.format(\".1f\"))  // format y axis with 1 decimal\n    this._chart.violin_scale_default = 0.8\n    this._chart.violin_scale = this._chart.violin_scale_default\n    this._chart.box_scale_default = 0.3\n    this._chart.box_scale = this._chart.box_scale_default\n    this._chart.xscale = d3.scaleBand()\n        .domain(this._group_names)\n        .range([0, this._chart.width])\n        // .padding(1-this._chart.violin_scale)     // This is important: it is the space between 2 groups. 0 means no padding. 1 is the maximum.\n    this._chart.xaxis = d3.axisBottom(this._chart.xscale)\n    this._chart.n_bins_default = Object.fromEntries(Object.entries(data).map(\n        ([name, values]) => [name, compute_n_bins.sturges(values)]\n    ))\n    this._chart.n_bins = deepcopy(this._chart.n_bins_default)\n    this._chart.histogram = Object.fromEntries(Object.entries(this._data_extents).map(\n        ([name, extent]) => {\n            return [\n                name,\n                d3.bin().domain(extent).thresholds(\n                    linspace(extent[0], extent[1], this._chart.n_bins[name])\n                )\n            ]\n        }\n    ))\n    this._chart.bins = Object.fromEntries(Object.entries(data).map(\n        ([name, values]) => [name, this._chart.histogram[name](values)]\n    ))\n    this._chart.supported_curves = [\n        'Basis', 'Bump Y', 'Cardinal', 'Catmull-Rom', 'Linear',\n        'Monotone Y', 'Natural', 'Step'\n    ]\n    this._chart.violin_curve = CURVES[this._chart.supported_curves[0]]\n    /**\n     * Graphic components of the chart: d3 selection objects\n     * @private\n     * @type {{[name: string]: d3.selection | {[group: string]: d3.selection}}}\n     */\n    this._graphics = {\n        // Root g tag (translated to account for the margins)\n        root_g: null,\n        // g tag for the y-axis\n        yaxis_g: null,\n        // g tag grouping all violins\n        violins_g: null,\n        // individual g tag for each violin (mapped by group name)\n        violins: {},\n        // g tag grouping all boxes\n        boxes_g: null,\n        // per group: g tag grouping all outliers of the group\n        outliers: {},\n    }\n    /**\n     * Control panel things\n     * @private\n     */\n    this._controls = {}\n    this._controls.max_bins_multiplier = 3\n}\n// Set prototype chain\nObject.setPrototypeOf(boxvio_chart_wrapper.prototype, d3_chart_wrapper.prototype)\n\n/**\n * Set the scale for the violins\n * @function\n * @param {number} scale the scale [0, 1]\n * @name boxvio_chart_wrapper#set_violin_scale\n */\nboxvio_chart_wrapper.prototype.set_violin_scale = function (scale) {\n    this._chart.violin_scale = scale\n    // Remove the violin graphics, only leaving its root g tag (violins_g)\n    this._graphics.violins_g.selectAll('*').remove()\n    this._render_violins(true)\n}\n\n/**\n * Set the number of bins for a particular violin\n * \n * Updates the chart accordingly\n * @param {string} name name of the group \n * @param {number} n_bins number of bins\n * @name boxvio_chart_wrapper#set_n_bins\n */\nboxvio_chart_wrapper.prototype.set_n_bins = function (name, n_bins) {\n    const chart = this._chart\n    const extent = this._data_extents[name]\n    chart.n_bins[name] = n_bins\n    chart.histogram[name].thresholds(\n        linspace(extent[0], extent[1], n_bins)\n    )\n    chart.bins[name] = chart.histogram[name](this._data[name])\n    // Delete the oath of the existing violin and redraw\n    this._graphics.violins[name].selectAll('*').remove()\n    this._render_violin(name)\n}\n\n/**\n * Set the curve for the violins\n * \n * Updates the chart accordingly\n * @param {string} curve_name name of the curve \n * @name boxvio_chart_wrapper#set_violin_curve\n */\nboxvio_chart_wrapper.prototype.set_violin_curve = function (curve_name) {\n    this._chart.violin_curve = CURVES[curve_name]\n    // Remove the violin graphics, only leaving its root g tag (violins_g)\n    this._graphics.violins_g.selectAll('*').remove()\n    this._render_violins(true)\n}\n\n/**\n * Set the scale for the boxes\n * @function\n * @param {number} scale the scale [0, 1]\n * @name boxvio_chart_wrapper#set_box_scale\n */\nboxvio_chart_wrapper.prototype.set_box_scale = function (scale) {\n    this._chart.box_scale = scale\n    // Remove the box graphics, only leaving its root g tag (boxes_g)\n    this._graphics.boxes_g.selectAll('*').remove()\n    this._render_boxes(true)\n}\n\n/**\n * Render the chart and the control panel\n * @function\n * @name boxvio_chart_wrapper#render\n */\nboxvio_chart_wrapper.prototype.render = function () {\n    // Call super render method\n    d3_chart_wrapper.prototype.render.call(this)\n    if (this._overflow) {\n        this.svg.attr('width', null)\n        this.svg.attr('height', '500px')\n        this.plot_container.style = \"overflow: auto;\"\n    }\n    // Render chart\n    this._render_chart()\n    // Render control panel\n    this._render_control_panel()\n}\n\n/**\n * Render the chart\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_chart\n */\nboxvio_chart_wrapper.prototype._render_chart = function () {\n\n    // Set viewBox of svg\n    this.svg.attr('viewBox', `0 0 ${this._full_width} ${this._full_height}`)\n\n    // Root g tag\n    this._graphics.root_g = this.svg.append('g')\n        .attr('transform', `translate(${this._chart.margin.left},${this._chart.margin.top})`)\n\n    this._render_axis()\n    this._render_violins()\n    this._render_boxes()\n\n}\n\n/**\n * Render the axis\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_axis\n */\nboxvio_chart_wrapper.prototype._render_axis = function () {\n    const g = this._graphics.root_g\n    // Render x axis\n    g.append('g')\n        .attr('transform', `translate(0,${this._chart.height})`)\n        .call(this._chart.xaxis)\n    \n    // Render y axis\n    this._graphics.yaxis_g = g.append('g')\n    const yaxis_g = this._graphics.yaxis_g\n    yaxis_g.append('g')\n        .call(this._chart.yaxis)\n    // Render Y axis label\n    yaxis_g.append('text')\n        .attr('text-anchor', 'middle')\n        .attr('transform', 'rotate(-90)')\n        .attr('y', -this._chart.margin.left + 20)\n        .attr('x', -this._chart.height / 2)\n        .text(this._ylabel)\n\n}\n\n/**\n * Render the violins\n * @function\n * @private\n * @param {boolean} is_g_ready whether the g tag for violins is\n *        set up (default: `false`)\n * @name boxvio_chart_wrapper#_render_violins\n */\nboxvio_chart_wrapper.prototype._render_violins = function (is_g_ready=false) {\n\n    const chart = this._chart\n    const g = this._graphics.root_g\n\n    // Render\n    if (!is_g_ready) {\n        this._graphics.violins_g = g.append('g')\n    }\n    const violins_g = this._graphics.violins_g\n    for (const name of Object.keys(chart.bins)) {\n        this._graphics.violins[name] = violins_g.append('g')\n            .attr('transform', `translate(${chart.xscale(name)},0)`)\n        this._render_violin(name)\n    }\n\n}\n\n/**\n * Render the violins\n * @function\n * @private\n * @param {boolean} is_g_ready whether the g tag for violins is\n *        set up (default: `false`)\n * @name boxvio_chart_wrapper#_render_violins\n */\nboxvio_chart_wrapper.prototype._render_violin = function (name) {\n    const bins = this._chart.bins[name]\n    const violin_scale = this._chart.violin_scale\n    const bandwidth = this._chart.xscale.bandwidth()\n    const yscale = this._chart.yscale\n    const violin_curve = this._chart.violin_curve\n\n    // Get the largest count in a bin as it will be maximum width\n    const max_count = d3.max(bins, (bin) => bin.length)\n    // Make a linear scale to map bin counts to bandwidth\n    const x_num = d3.scaleLinear()\n        .range([0, bandwidth])\n        .domain([-max_count, max_count])\n\n    this._graphics.violins[name]\n        .append('path')\n        .datum(bins)\n            .style('stroke', 'gray')\n            .style('stroke-width', 0.4)\n            .style('fill', '#d2d2d2')\n            .attr('d', d3.area()\n                .x0((d) => x_num(-d.length*violin_scale))\n                .x1((d) => x_num(d.length*violin_scale))\n                .y((d) => yscale(d.x0))\n                .curve(violin_curve)\n            )\n}\n\n/**\n * Render the boxes (including whiskers and outliers)\n * @function\n * @private\n * @param {boolean} is_g_ready whether the g tag for boxes is\n *        set up (default: `false`)\n * @name boxvio_chart_wrapper#_render_boxes\n */\nboxvio_chart_wrapper.prototype._render_boxes = function (is_g_ready=false) {\n\n    const chart = this._chart\n    const g = this._graphics.root_g\n\n    // Draw\n    if (!is_g_ready) {\n        this._graphics.boxes_g = g.append('g')\n    }\n    const boxes = this._graphics.boxes_g\n    const bandwidth = chart.xscale.bandwidth()\n    const box_width = this._chart.box_scale * bandwidth\n\n    const whiskers_lw = 2\n    const median_lw = 3\n\n    // Iterate over the groups\n    for (const [i, name] of Object.entries(this._group_names)) {\n\n        const metrics = this._metrics[name]\n        const color = this._colors[i]\n\n        const group_box = boxes.append('g')\n            .attr('transform', `translate(${chart.xscale(name) + bandwidth / 2},0)`)\n\n        // Draw outliers\n        this._graphics.outliers[name] = group_box.append('g')\n        const outliers = this._graphics.outliers[name]\n        for (const outlier of this._outliers[name]) {\n            outliers.append('circle')\n                .attr('cx', 0)\n                .attr('cy', chart.yscale(outlier))\n                .attr('r', 4)\n                .style('fill', color)\n                .style('opacity', 0.7)\n        }\n\n        // Draw whiskers\n        const whiskers = group_box.append('g')\n        whiskers.append('line')  // vertical line\n            .attr('x1', 0)\n            .attr('y1', chart.yscale(metrics.lower_fence))\n            .attr('x2', 0)\n            .attr('y2', chart.yscale(metrics.upper_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n        whiskers.append('line') // lower horizontal\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.lower_fence))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.lower_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n        whiskers.append('line') // upper horizontal\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.upper_fence))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.upper_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n\n        // Draw IQR box\n        const iqr = group_box.append('g')\n        iqr.append('rect')  // iqr rect\n            .attr('x', -box_width / 2)\n            .attr('y', chart.yscale(metrics.quartile3))\n            .attr('width', box_width)\n            .attr('height', chart.yscale(metrics.quartile1) - chart.yscale(metrics.quartile3))\n            .attr('fill', color)\n        iqr.append('line')  // median line\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.median))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.median))\n            .attr('stroke', 'black')\n            .attr('stroke-width', median_lw)\n        iqr.append('circle')  // median dot\n            .attr('cx', 0)\n            .attr('cy', chart.yscale(metrics.median))\n            .attr('r', 4.5)\n            .style('fill', 'white')\n            .attr('stroke', 'black')\n            .attr('stroke-width', 2)\n    }\n\n}\n\n/**\n * Render the control panel\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_control_panel\n */\nboxvio_chart_wrapper.prototype._render_control_panel = function () {\n\n    this._render_violin_curve_selector()\n    this._render_checkboxes()\n    this._render_scale_sliders()\n    this._render_n_bins_control()\n\n}\n\n/**\n * Render the selector for the violin curve\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_violin_curve_selector\n */\nboxvio_chart_wrapper.prototype._render_violin_curve_selector = function () {\n    const curve_select_id = `${this.id_string()}_curve_select`\n    const curve_select = common.create_dom_element({\n        element_type: 'select',\n        id: curve_select_id,\n        parent: this.controls_container,\n        // TODO: add ARIA attributes?\n    })\n    for (const curve_name of this._chart.supported_curves) {\n        common.create_dom_element({\n            element_type: 'option',\n            value: curve_name,\n            text_content: curve_name,\n            parent: curve_select,\n        })\n    }\n    curve_select.addEventListener('change', () => {\n        this.set_violin_curve(curve_select.value)\n    })\n}\n\n/**\n * Render the checkboxes of the control panel\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_checkboxes\n */\nboxvio_chart_wrapper.prototype._render_checkboxes = function () {\n    const show_violins_checkbox_id = `${this.id_string()}_show_violins_checkbox`\n    /**\n     * Checkbox for showing violins\n     * @type {Element}\n     */\n    const show_violins_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: show_violins_checkbox_id,\n        parent: this.controls_container,\n    })\n    show_violins_checkbox.checked = true\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const show_violins_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Show violins',\n        parent: this.controls_container,\n    })\n    show_violins_label.setAttribute('for', show_violins_checkbox_id)\n    show_violins_checkbox.addEventListener('change', () => {\n        toggle_visibility(this._graphics.violins_g)\n    })\n\n    const show_boxes_checkbox_id = `${this.id_string()}_show_boxes_checkbox`\n    /**\n     * Checkbox for showing boxes\n     * @type {Element}\n     */\n     const show_boxes_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: show_boxes_checkbox_id,\n        parent: this.controls_container,\n    })\n    show_boxes_checkbox.checked = true\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const show_boxes_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Show boxes',\n        parent: this.controls_container,\n    })\n    show_boxes_label.setAttribute('for', show_boxes_checkbox_id)\n    show_boxes_checkbox.addEventListener('change', () => {\n        toggle_visibility(this._graphics.boxes_g)\n        // (DISABLED) Disable the checkbox for outliers (defined below)\n        // show_outliers_checkbox.disabled = !show_boxes_checkbox.checked\n    })\n\n    const show_outliers_checkbox_id = `${this.id_string()}_show_outliers_checkbox`\n    /**\n     * Checkbox for showing outliers\n     * @type {Element}\n     */\n    const show_outliers_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: show_outliers_checkbox_id,\n        parent: this.controls_container,\n    })\n    show_outliers_checkbox.checked = true\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const show_outliers_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Show outliers',\n        parent: this.controls_container,\n    })\n    show_outliers_label.setAttribute('for', show_outliers_checkbox_id)\n    show_outliers_checkbox.addEventListener('change', () => {\n        for (const group of Object.values(this._graphics.outliers)) {\n            toggle_visibility(group)\n        }\n    })\n}\n\n/**\n * Render the sliders of the control panel that\n * control the scale of violins and boxes\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_scale_sliders\n */\nboxvio_chart_wrapper.prototype._render_scale_sliders = function () {\n    /**\n     * Slider for violin scale\n     * @type {Element}\n     */\n    const violin_scale_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        // value: this._chart.violin_scale_default,  // This does not work here?\n        parent: this.controls_container,\n    })\n    violin_scale_slider.setAttribute('min', 0)\n    violin_scale_slider.setAttribute('max', 1)\n    violin_scale_slider.setAttribute('step', 0.05)\n    violin_scale_slider.value = this._chart.violin_scale_default\n    violin_scale_slider.addEventListener('input', () => {\n        this.set_violin_scale(Number(violin_scale_slider.value))\n    })\n    /**\n     * Reset button for the violin_scale_slider\n     * @type {Element}\n     */\n    const violin_scale_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    violin_scale_slider_reset.addEventListener('click', () => {\n        violin_scale_slider.value = this._chart.violin_scale_default\n        this.set_violin_scale(Number(violin_scale_slider.value))\n    })\n\n    /**\n     * Slider for box scale\n     * @type {Element}\n     */\n    const box_scale_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        // value: this._chart.box_scale_default,  // This does not work here?\n        parent: this.controls_container,\n    })\n    box_scale_slider.setAttribute('min', 0)\n    box_scale_slider.setAttribute('max', 1)\n    box_scale_slider.setAttribute('step', 0.05)\n    box_scale_slider.value = this._chart.box_scale_default\n    box_scale_slider.addEventListener('input', () => {\n        this.set_box_scale(Number(box_scale_slider.value))\n    })\n    /**\n     * Reset button for the box_scale_slider\n     * @type {Element}\n     */\n    const box_scale_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    box_scale_slider_reset.addEventListener('click', () => {\n        box_scale_slider.value = this._chart.box_scale_default\n        this.set_box_scale(Number(box_scale_slider.value))\n    })\n}\n\n/**\n * Render the control elements to change the number of bins\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_n_bins_control\n */\nboxvio_chart_wrapper.prototype._render_n_bins_control = function () {\n    const group_select_id = `${this.id_string()}_group_select`\n    const group_select = common.create_dom_element({\n        element_type: 'select',\n        id: group_select_id,\n        parent: this.controls_container,\n        // TODO: add ARIA attributes?\n    })\n    for (const name of this._group_names) {\n        common.create_dom_element({\n            element_type: 'option',\n            value: name,\n            text_content: name,\n            parent: group_select,\n        })\n    }\n    group_select.addEventListener('change', () => {\n        const name = group_select.value\n        violin_n_bins_slider.setAttribute(\n            'max',\n            this._controls.max_bins_multiplier * this._chart.n_bins_default[name]\n        )\n        violin_n_bins_slider.value = this._chart.n_bins[name]\n    })\n\n    const violin_n_bins_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        // value: this._chart.violin_scale_default,  // This does not work here?\n        parent: this.controls_container,\n    })\n    violin_n_bins_slider.setAttribute('min', 1)\n    violin_n_bins_slider.setAttribute(\n        'max',\n        this._controls.max_bins_multiplier * this._chart.n_bins_default[group_select.value]\n    )\n    violin_n_bins_slider.value = this._chart.n_bins[group_select.value]\n    violin_n_bins_slider.addEventListener('input', () => {\n        this.set_n_bins(group_select.value, Number(violin_n_bins_slider.value))\n    })\n\n    const violin_n_bins_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    violin_n_bins_slider_reset.addEventListener('click', () => {\n        const name = group_select.value\n        violin_n_bins_slider.value = this._chart.n_bins_default[name]\n        this.set_n_bins(name, Number(violin_n_bins_slider.value))\n    })\n\n    const violin_all_n_bins_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset all bins',\n        parent: this.controls_container,\n    })\n    violin_all_n_bins_slider_reset.addEventListener('click', () => {\n        const name = group_select.value\n        // Update the value of the slider\n        violin_n_bins_slider.value = this._chart.n_bins_default[name]\n        for (const [name, n_bins] of Object.entries(this._chart.n_bins_default)) {\n            this.set_n_bins(name, n_bins)\n        }\n    })\n}\n\n\n// HELPER FUNCTIONS\n\n/**\n * Compute (boxplot) metrics for the data\n * @param {number[]} values the data values\n * @returns {{\n *  max: number,\n *  upper_fence: number,\n *  quartile3: number,\n *  median: number,\n *  mean: number,\n *  iqr: number,\n *  quartile1: number,\n *  lower_fence: number,\n *  min: number,\n * }}\n */\nfunction calc_metrics(values) {\n    const metrics = {\n        max: null,\n        upper_fence: null,\n        quartile3: null,\n        median: null,\n        mean: null,\n        iqr: null,\n        quartile1: null,\n        lower_fence: null,\n        min: null,\n    }\n\n    metrics.min = d3.min(values)\n    metrics.quartile1 = d3.quantile(values, 0.25)\n    metrics.median = d3.median(values)\n    metrics.mean = d3.mean(values)\n    metrics.quartile3 = d3.quantile(values, 0.75)\n    metrics.max = d3.max(values)\n    metrics.iqr = metrics.quartile3 - metrics.quartile1\n    metrics.lower_fence = metrics.quartile1 - 1.5 * metrics.iqr\n    metrics.upper_fence = metrics.quartile3 + 1.5 * metrics.iqr\n\n    return metrics\n}","/**\n * Get a deep copy of an object\n * @param {Object} obj the object\n * @returns a deep copy of the object\n */\nexport function deepcopy(obj) {\n\treturn JSON.parse(JSON.stringify(obj))\n}","\"use strict\";\n\nimport { chart_wrapper } from \"../chart-wrapper.js\";\n\n/**\n * Chart.js chart wrapper class\n * @class\n * @abstract\n * @param {Element} div_wrapper the div conatining the chart\n * @extends chart_wrapper\n */\nexport function chartjs_chart_wrapper(div_wrapper) {\n    if (this.constructor === chartjs_chart_wrapper) {\n        throw new Error(\"Abstract class 'chartjs_chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper.call(this, div_wrapper)\n    /**\n     * Canvas instance, will be created during\n     * render\n     * @type {HTMLCanvasElement}\n     * @protected\n     */\n    this.canvas = undefined\n    /**\n     * Chart instance (chart.js)\n     * @protected\n     */\n    this.chart = undefined\n}\n// Set prototype chain\nObject.setPrototypeOf(chartjs_chart_wrapper.prototype, chart_wrapper.prototype)\n\n/**\n * Render the chart (chartjs) and controls\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name chartjs_chart_wrapper#render\n * @function\n */\nchartjs_chart_wrapper.prototype.render = function () {\n    chart_wrapper.prototype.render.call(this)\n    // Create canvas\n    this.canvas = common.create_dom_element({\n        element_type: 'canvas',\n        id: 'result_graph',\n        class_name: 'o-blue',\n        parent: this.plot_container,\n    })\n    // Set chart instance to undefined\n    this.chart = undefined\n}\n\n/**\n * Get the supported chart export formats\n * @function\n * @returns {string[]} the supported formats\n * @name chartjs_chart_wrapper#get_supported_export_formats\n */\nchartjs_chart_wrapper.prototype.get_supported_export_formats = function () {\n    return ['png']\n}\n\n/**\n * Download the chart as png\n * @param {string} filename the name of the file\n * @function\n * @name chartjs_chart_wrapper#_download_chart_as_png\n */\nchartjs_chart_wrapper.prototype.download_chart_as_png = function (filename) {\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: this.chart.toBase64Image(),\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n}\n\n/**\n * FIXME: this is not working...\n * Download the chart as svg\n * @param {string} filename the name of the file\n * @function\n * @name chartjs_chart_wrapper#_download_chart_as_svg\n */\nchartjs_chart_wrapper.prototype.download_chart_as_svg = function (filename) {\n    // Tweak C2S library\n    this._tweak_c2s()\n    // Get original width and height\n    const width = this.canvas.offsetWidth\n    const height = this.canvas.offsetHeight\n    // TODO: Turn off responsiveness and animations\n    this.chart.options.animation = false\n    this.chart.options.reponsive = false\n    // Replicate chart in C2S space\n    const svgContext = C2S(width, height)\n    const svgChart = new Chart(svgContext, this.chart.config._config)\n    // Download\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: 'data:image/svg+xml;utf8,'\n            + encodeURIComponent(svgContext.getSerializedSvg()),\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n    // TODO: Turn on responsiveness and animations\n    this.chart.options.animation = true\n    this.chart.options.reponsive = true\n}\n\n/**\n * Some tweaks to the canvas2svg library are required for svg export to work\n * \n * Via: https://stackoverflow.com/questions/62249315/export-canvas-to-svg-file\n * @function\n * @private\n * @name chartjs_chart_wrapper#_tweak_c2s\n */\nchartjs_chart_wrapper.prototype._tweak_c2s = function () {\n    C2S.prototype.getContext = function (contextId) {\n        if (contextId === '2d' || contextId === '2D') {\n            return this;\n        }\n        return null;\n    }\n    C2S.prototype.style = function () {\n        return this.__canvas.style;\n    }\n    C2S.prototype.getAttribute = function (name) {\n        return this[name];\n    }\n    C2S.prototype.addEventListener = function (type, listener, eventListenerOptions) {\n        // nothing to do here, but we need this function :)\n    }\n}","\"use strict\";\n\nimport { chartjs_chart_wrapper } from \"./chartjs-chart-wrapper.js\";\nimport { COLOR_PICKER_WIDTH, COLOR_PALETTE } from \"../chart-wrapper.js\";\nimport { compute_n_bins } from \"../compute-n-bins.js\";\n\n/**\n * Histogram wrapper\n * @param {Element}  div_wrapper the div to work in\n * @param {number[]} data the data\n * @param {string} xlabel the label for the x-axis\n * @class\n * @extends chartjs_chart_wrapper\n */\nexport function histogram_wrapper(div_wrapper, data, xlabel) {\n    /*\n     * <Function>.call is a method that executes the defined function,\n     * but with the \"this\" variable pointing to the first argument,\n     * and the rest of the arguments being arguments of the function\n     * that is being \"called\". This essentially performs all of\n     * chart_wrapper's constructor logic on histogram_wrapper's \"this\".\n     */\n    chartjs_chart_wrapper.call(this, div_wrapper)\n\n    /**\n     * Data values\n     * @type {number[]}\n     * @private\n     */\n    this._data = data\n    /**\n     * Whether to perform a density plot\n     * @type {boolean}\n     * @private\n     */\n    this._density = false\n    /**\n     * Default number of bins\n     * @type {number}\n     * @private\n     */\n    this._n_bins_default = compute_n_bins.sqrt(this._data)\n    /**\n     * Number of bins in the histogram\n     * \n     * Defined as the square root of the\n     * amount of datapoints, computed\n     * during render\n     * @type {number}\n     * @private\n     */\n    this._n_bins = undefined\n    /** Label for the xaxis\n     * @type {string}\n     * @private\n    */\n    this._xlabel = xlabel\n    /**\n     * Number of decimals to display\n     * @type {number}\n     * @private\n     */\n    this._n_decimals = 3\n    /**\n     * Maximum number of bins as mutiplier of default\n     * @type {number}\n     * @private\n     */\n    this._max_bins_multiplier = 3\n    /**\n     * Default color for the bars in rgba\n     * @type {string}\n     * @private\n     */\n    this._bar_color = COLOR_PALETTE[0]\n}\n// Set prototype chain\nObject.setPrototypeOf(histogram_wrapper.prototype, chartjs_chart_wrapper.prototype)\n\n/**\n * Check whether we are doing a density plot\n * @returns {boolean} `true` if density plot,\n * \t\t\t`false` otherwise\n * @name histogram_wrapper#get_density\n * @function\n */\nhistogram_wrapper.prototype.get_density = function () {\n    return this._density\n}\n\n/**\n * Change the density plot attribute\n * @param density {boolean} `true` if density, `false` otherwise\n * @function\n * @name histogram_wrapper#set_density\n */\nhistogram_wrapper.prototype.set_density = function (density) {\n    this._density = density\n    if (!this.chart) {\n        return\n    }\n    // Update chart\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n    this.chart.data.datasets[0].label = this._get_density_string()\n    this.chart.data.datasets[0].data = plot_data\n    this.chart.options.scales.y.title.text = this._get_density_string()\n    this.chart.update()\n}\n\n/**\n * Get a string representing the plot mode\n * @returns {string} `'Density'` if we are in density\n * \t\t\tmode, `'Frequency'` otherwise\n * @function\n * @private\n * @name histogram_wrapper#_get_density_string\n */\nhistogram_wrapper.prototype._get_density_string = function () {\n    return this._density ? 'Density' : 'Frequency'\n}\n\n/**\n * Get the amount of bins in the histogram\n * @returns {number} the amount of bins\n * @function\n * @name histogram_wrapper#get_n_bins\n */\nhistogram_wrapper.prototype.get_n_bins = function () {\n    return this._n_bins\n}\n\n/**\n * Set a new number of bins for the histogram\n * \n * Updates chart instance accordingly\n * @param {number} n_bins amount of bins\n * @function\n * @name histogram_wrapper#set_n_bins\n */\nhistogram_wrapper.prototype.set_n_bins = function (n_bins) {\n    this._n_bins = n_bins\n    if (!this.chart) {\n        return\n    }\n    // Update chart\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n    this.chart.data.datasets[0].data = plot_data\n    this.chart.options.scales.x.min = data_min\n    this.chart.options.scales.x.max = data_max\n    this.chart.options.scales.x.ticks.stepSize = 2 * half_bin_width\n    this.chart.options.plugins.tooltip.callbacks.title =\n        this._get_tooltip_title_callback(bin_centers, half_bin_width)\n    this.chart.update()\n}\n\n/**\n * Get the color of the bars in the histogram\n * @returns {string} the bar color as an rgba string\n * @function\n * @name histogram_wrapper#get_bar_color\n */\nhistogram_wrapper.prototype.get_bar_color = function () {\n    return this._bar_color\n}\n\n/**\n * Set a new color for the bars in the histogram\n * \n * Updates the chart instance accordingly\n * @param {string} bar_color the new bar color for the histogram\n * @function\n * @name histogram_wrapper#set_bar_color\n */\nhistogram_wrapper.prototype.set_bar_color = function (bar_color) {\n    this._bar_color = bar_color\n    if (!this.chart) {\n        return\n    }\n    this.chart.data.datasets[0].backgroundColor = this._bar_color\n    this.chart.update()\n}\n\n/**\n * Get data needed to generate the chart\n * TODO: there is no need to recompute bin_centers unless the number of bins\n* \t\t has changed\n* @function\n* @name histogram_wrapper#_get_plotting_data\n* @private\n* \n* @returns {[number[], {x: number, y: number}[], number, number, number]}\n* \t\t\tthe bin centers, {bin centers, count per bin}, half of the bin width,\n* \t\t\tthe minimum and maximum of input data\n */\nhistogram_wrapper.prototype._get_plotting_data = function () {\n    const data_max = Math.max(...this._data)\n    const data_min = Math.min(...this._data)\n    const bin_width = (data_max - data_min) / this._n_bins\n    const half_bin_width = 0.5 * bin_width\n    /**\n     * Center of each bin\n     * @type {number[]}\n     */\n    const bin_centers = Array.apply(null, Array(this._n_bins)).map(\n        (value, index) => data_min + (2 * index + 1) * half_bin_width\n    )\n    // We bin with right-open intervals\n    /**\n     * Count per bin\n     * @type {number[]}\n     */\n    let entries = Array.apply(null, Array(this._n_bins)).map(() => 0)\n    for (let i = 0; i < this._data.length; i++) {\n        // If value is max, add it to last bin\n        if (this._data[i] === data_max) {\n            entries[this._n_bins - 1]++\n            continue\n        }\n        // Proceed as usual\n        for (let j = 0; j < this._n_bins; j++) {\n            if (this._data[i] >= bin_centers[j] - half_bin_width\n                && this._data[i] < bin_centers[j] + half_bin_width) {\n                entries[j]++\n                break\n            }\n        }\n    }\n    // Normalize if density\n    if (this._density) {\n        const sum = entries.reduce((partialSum, val) => partialSum + val, 0)\n        for (let j = 0; j < this._n_bins; j++) {\n            entries[j] /= (sum * bin_width);\n        }\n    }\n    return [\n        bin_centers,\n        bin_centers.map((val, i) => ({ x: val, y: entries[i] })),\n        half_bin_width,\n        data_min,\n        data_max,\n    ]\n}\n\n/**\n * Get callback function for tooltip title\n * @param {number[]} bin_centers the bin centers\n * @param {number} half_bin_width half of the bin width\n * @returns the callback function\n * @function\n * @private\n * @name histogram_wrapper#_get_tooltip_title_callback\n */\nhistogram_wrapper.prototype._get_tooltip_title_callback = function (bin_centers, half_bin_width) {\n    // Cannot use `this` inside inner function!!!\n    const xlabel = this._xlabel\n    const n_decimals = this._n_decimals\n    /**\n     * Callback function for the tooltip title\n     * @param {TooltipItem[]} items the tooltip item contexts\n     * @returns {string} the title of the tooltip\n     * @function\n     * @name histogram_wrapper#_get_tooltip_title_callback~inner\n     */\n    const callback = function (items) {\n        if (!items.length) {\n            return ''\n        }\n        const item = items[0]\n        const index = item.dataIndex\n        const min = bin_centers[index] - half_bin_width\n        const max = bin_centers[index] + half_bin_width\n        return `${xlabel}: ${min.toFixed(n_decimals)} `\n            + `- ${max.toFixed(n_decimals)}`\n    }\n    return callback\n}\n\n/**\n * Render the chart and the control panel\n * @function\n * @name histogram_wrapper#render\n */\nhistogram_wrapper.prototype.render = function () {\n    // Call super render method\n    chartjs_chart_wrapper.prototype.render.call(this)\n    // Render chart\n    this._render_chart()\n    // Render control panel\n    this._render_control_panel()\n}\n\n/**\n * Render the chart\n * @function\n * @private\n * @name histogram_wrapper#_render_chart\n */\nhistogram_wrapper.prototype._render_chart = function () {\n    this._n_bins = this._n_bins_default\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n\n    // Split chart options\n    const chart_data = {\n        datasets: [{\n            label: this._get_density_string(),\n            data: plot_data,\n            categoryPercentage: 1,\n            barPercentage: 1,\n            backgroundColor: this._bar_color,\n        }],\n    }\n    const scales_options = {\n        x: {\n            type: 'linear',  // otherwise it goes to a category axis...\n            min: data_min,\n            max: data_max,\n            offset: false,\n            grid: {\n                offset: false,\n            },\n            ticks: {\n                stepSize: 2 * half_bin_width,\n                callback: (label, index, labels) => {\n                    return Number(label).toFixed(this._n_decimals)\n                }\n            },\n            title: {\n                display: true,\n                text: this._xlabel,\n                font: {\n                    size: 14\n                },\n            }\n        },\n        y: {\n            title: {\n                display: true,\n                text: this._get_density_string(),\n                font: {\n                    size: 14,\n                },\n            },\n        },\n    }\n    const plugins_options = {\n        legend: {\n            display: false,\n        },\n        tooltip: {\n            callbacks: {\n                title: this._get_tooltip_title_callback(bin_centers, half_bin_width),\n            },\n        },\n    }\n\n    // Render the graph\n    this.chart = new Chart(this.canvas, {\n        type: 'bar',\n        data: chart_data,\n        options: {\n            scales: scales_options,\n            plugins: plugins_options,\n            parsing: false,\n            normalized: true,\n        },\n    })\n}\n\n\n/**\n * Render the control panel\n * @function\n * @private\n * @name histogram_wrapper#_render_control_panel\n */\nhistogram_wrapper.prototype._render_control_panel = function () {\n    // Save this histogram wrapper instance, because when we change scope\n    // we may still need to refer to it\n    /**\n     * This histogram_wrapper instance\n     * @type {histogram_wrapper}\n     */\n    const self = this\n    /**\n     * Slider for number of bins\n     * @type {Element}\n     */\n    const slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        value: this._n_bins_default,\n        parent: this.controls_container,\n    })\n    slider.setAttribute('min', 1)\n    slider.setAttribute('max', this._max_bins_multiplier * this._n_bins_default)\n    slider.addEventListener('input', () => {\n        this.set_n_bins(Number(slider.value))\n    })\n    /**\n     * Reset button for the slider\n     * @type {Element}\n     */\n    const slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    slider_reset.addEventListener('click', () => {\n        slider.value = this._n_bins_default\n        this.set_n_bins(Number(slider.value))\n    })\n\n    const density_checkbox_id = `${this.id_string()}_density_checkbox`\n    /**\n     * Checkbox for density plot\n     * @type {Element}\n     */\n    const density_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: density_checkbox_id,\n        parent: this.controls_container,\n    })\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const density_checkbox_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Density',\n        parent: this.controls_container,\n    })\n    density_checkbox_label.setAttribute('for', density_checkbox_id)\n    density_checkbox.addEventListener('change', () => {\n        this.set_density(Boolean(density_checkbox.checked))\n    })\n    /** iro.js color picker */\n    const color_picker_container = common.create_dom_element({\n        element_type: 'div',\n        id: `${this.id_string()}_color_picker_container`,\n        parent: this.controls_container\n    })\n    const color_picker = new window.iro.ColorPicker(color_picker_container, {\n        color: this._bar_color,\n        width: COLOR_PICKER_WIDTH,\n        layoutDirection: 'horizontal',\n        layout: [\n            {\n                component: window.iro.ui.Wheel,\n            },\n            {\n                component: window.iro.ui.Slider,\n            },\n            {\n                component: window.iro.ui.Slider,\n                options: {\n                    sliderType: 'alpha',\n                }\n            },\n        ],\n    })\n    color_picker.on('color:change', function (color) {\n        self.set_bar_color(color.rgbaString)\n    })\n}","/*global tstring, page_globals, Promise, data_manager, common */\n/*eslint no-undef: \"error\"*/\n\n\"use strict\";\n\n\nimport { chart_wrapper } from \"../../lib/charts/chart-wrapper.js\";\nimport { boxvio_chart_wrapper } from \"../../lib/charts/d3/boxvio-chart-wrapper.js\";\nimport { histogram_wrapper } from \"../../lib/charts/chartjs/histogram-wrapper.js\";\n\n\nexport const analysis =  {\n\n\t// Form factory instance\n\tform: null,\n\n\tarea_name\t\t\t\t: null,\n\trow\t\t\t\t\t\t: null,\n\n\t// DOM containers\n\texport_data_container\t\t: null,\n\tform_items_container\t\t: null,\n\tdiameter_chart_container\t: null,\n\tweight_chart_container\t\t: null,\n\n\t/**\n\t * Chart wrapper instance for diameter\n\t * @type {chart_wrapper}\n\t */\n\tdiameter_chart_wrapper: null,\n\t/**\n\t * Chart wrapper instance for weight\n\t * @type {chart_wrapper}\n\t */\n\tweight_chart_wrapper: null,\n\n\n\tset_up : function(options) {\n\n\t\tconst self = this\n\n\t\t// options\n\t\t\tself.area_name\t\t\t\t\t= options.area_name\n\t\t\tself.export_data_container\t\t= options.export_data_container\n\t\t\tself.row\t\t\t\t\t\t= options.row\n\t\t\tself.form_items_container\t\t= options.form_items_container\n\t\t\tself.diameter_chart_container\t= options.diameter_chart_container\n\t\t\tself.weight_chart_container\t\t= options.weight_chart_container\n\n\t\t// form\n\t\tconst form_node = self.render_form()\n\t\tself.form_items_container.appendChild(form_node)\n\n\t\treturn true\n\t},//end set_up\n\n\t/**\n\t * RENDER FORM\n\t */\n\trender_form : function() {\n\n\t\tconst self = this\n\n\t\t// DocumentFragment is like a virtual DOM\n\t\tconst fragment = new DocumentFragment()\n\n\t\t// form_factory instance\n\t\t\tself.form = self.form || new form_factory()\n\n\t\tconst form_row = common.create_dom_element({\n\t\t\telement_type\t: \"div\",\n\t\t\tclass_name\t\t: \"form-row fields\",\n\t\t\tparent\t\t\t: fragment\n\t\t})\n\n\t\t// mint\n\t\t\tself.form.item_factory({\n\t\t\t\tid\t\t\t\t: \"mint\",\n\t\t\t\tname\t\t\t: \"mint\",\n\t\t\t\tlabel\t\t\t: tstring.mint || \"mint\",\n\t\t\t\tq_column\t\t: \"p_mint\",\n\t\t\t\tvalue_wrapper\t: ['[\"', '\"]'], // to obtain [\"value\"] in selected value only\n\t\t\t\teq\t\t\t\t: \"LIKE\",\n\t\t\t\teq_in\t\t\t: \"%\",\n\t\t\t\teq_out\t\t\t: \"%\",\n\t\t\t\tis_term\t\t\t: true,\n\t\t\t\tparent\t\t\t: form_row,\n\t\t\t\tcallback\t\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// number\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"number\",\n\t\t\t\tname \t\t: \"number\",\n\t\t\t\tq_column \t: \"term\",\n\t\t\t\tq_table \t: \"types\",\n\t\t\t\tlabel\t\t: tstring.number_key || \"Number & Key\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tgroup_op \t: '$or',\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// material\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"material\",\n\t\t\t\tname \t\t: \"material\",\n\t\t\t\tq_column \t: \"ref_type_material\",\n\t\t\t\tq_table \t: \"any\",\n\t\t\t\tlabel\t\t: tstring.material || \"material\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// denomination\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"denomination\",\n\t\t\t\tname \t\t: \"denomination\",\n\t\t\t\tq_column \t: \"ref_type_denomination\",\n\t\t\t\tq_table \t: \"any\",\n\t\t\t\tlabel\t\t: tstring.denomination || \"denomination\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\n\t\t// submit button\n\t\t\tconst submit_group = common.create_dom_element({\n\t\t\t\telement_type\t: \"div\",\n\t\t\t\tclass_name\t\t: \"form-group field button_submit\",\n\t\t\t\tparent\t\t\t: fragment\n\t\t\t})\n\t\t\tconst submit_button = common.create_dom_element({\n\t\t\t\telement_type\t: \"input\",\n\t\t\t\ttype\t\t\t: \"submit\",\n\t\t\t\tid\t\t\t\t: \"submit\",\n\t\t\t\tvalue\t\t\t: tstring.search || \"Search\",\n\t\t\t\tclass_name\t\t: \"btn btn-light btn-block primary\",\n\t\t\t\tparent\t\t\t: submit_group\n\t\t\t})\n\t\t\tsubmit_button.addEventListener(\"click\", function (e) {\n\t\t\t\te.preventDefault()\n\t\t\t\tself.form_submit(form)\n\t\t\t})\n\n\t\t// reset button\n\t\t\tconst reset_button = common.create_dom_element({\n\t\t\t\telement_type\t: \"input\",\n\t\t\t\ttype\t\t\t: \"button\",\n\t\t\t\tid\t\t\t\t: \"button_reset\",\n\t\t\t\tvalue\t\t\t: tstring.reset || 'Reset',\n\t\t\t\tclass_name\t\t: \"btn btn-light btn-block secondary button_reset\",\n\t\t\t\tparent\t\t\t: submit_group\n\t\t\t})\n\t\t\treset_button.addEventListener(\"click\", function (e) {\n\t\t\t\te.preventDefault()\n\t\t\t\twindow.location.replace(window.location.pathname);\n\t\t\t})\n\n\t\t// operators\n\t\t\t// fragment.appendChild( forms.build_operators_node() )\n\t\t\tconst operators_node = self.form.build_operators_node()\n\t\t\tfragment.appendChild( operators_node )\n\n\t\t// the form element itself!\n\t\t\tconst form = common.create_dom_element({\n\t\t\t\telement_type\t: \"form\",\n\t\t\t\tid\t\t\t\t: \"search_form\",\n\t\t\t\tclass_name\t\t: \"form-inline\"\n\t\t\t})\n\t\t\tform.appendChild(fragment)\n\n\n\t\treturn form\n\t},//end render_form\n\n\t/**\n\t * FORM SUBMIT\n\t * Form submit launch search\n\t */\n\tform_submit : function(form_obj, options={}) {\n\t\t\n\t\tconst self = this\n\n\t\t// options\n\t\t\tconst scroll_result\t= typeof options.scroll_result===\"boolean\" ? options.scroll_result : true\n\t\t\tconst form_items\t= options.form_items || self.form.form_items\n\n\t\t// build filter\n\t\t\tconst filter = self.form.build_filter({\n\t\t\t\tform_items: form_items\n\t\t\t})\n\t\t\n\t\t// empty filter case\n\t\t\tif (!filter || filter.length<1) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t// scroll to head result\n\t\t\tif (scroll_result) {\n\t\t\t\tthis.diameter_chart_container.scrollIntoView(\n\t\t\t\t\t{behavior: \"smooth\", block: \"start\", inline: \"nearest\"}\n\t\t\t\t);\n\t\t\t}\n\n\t\t// search rows exec against API\n\t\t\tconst js_promise = self.search_rows({\n\t\t\t\tfilter\t\t\t: filter,\n\t\t\t\tlimit\t\t\t: 0,\n\t\t\t\tprocess_result\t: {\n\t\t\t\t\tfn\t\t: 'process_result::add_parents_and_children_recursive',\n\t\t\t\t\tcolumns\t: [{name : \"parents\"}]\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then((parsed_data)=>{\n\n\t\t\t\tevent_manager.publish('form_submit', parsed_data)\n\n\t\t\t\tconsole.log(parsed_data)\n\n\t\t\t\t// const diameters = parsed_data\n\t\t\t\t// \t.map((ele) => ele.full_coins_reference_diameter_max)\n\t\t\t\t// \t.flat()\n\t\t\t\t// \t.filter((v) => v)\n\t\t\t\t// console.log(diameters)\n\n\t\t\t\t// this.diameter_chart_wrapper = new histogram_wrapper(\n\t\t\t\t// \tthis.diameter_chart_container,\n\t\t\t\t// \tdiameters,\n\t\t\t\t// \t'Diameter'\n\t\t\t\t// )\n\t\t\t\t// this.diameter_chart_wrapper.render()\n\n\t\t\t\tconst data = {}\n\t\t\t\tfor (const ele of parsed_data) {\n\t\t\t\t\tconst name = ele.ref_type_number\n\t\t\t\t\t// if (!['12', '59', '62', '18','11a','14'].includes(name)) continue\n\t\t\t\t\t// if (!['59', '62'].includes(name)) continue\n\t\t\t\t\tconst tmpData = {}\n\t\t\t\t\tconst calculable = ele.full_coins_reference_calculable\n\t\t\t\t\tconst diameter_max = ele.full_coins_reference_diameter_max\n\t\t\t\t\tconst diameter_min = ele.full_coins_reference_diameter_min\n\t\t\t\t\tconst weight = ele.full_coins_reference_weight\n\t\t\t\t\tif (diameter_max && diameter_max.length) {\n\t\t\t\t\t\ttmpData.diameter_max = diameter_max.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (diameter_min && diameter_min.length) {\n\t\t\t\t\t\ttmpData.diameter_min = diameter_min.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (weight && weight.length) {\n\t\t\t\t\t\ttmpData.weight = weight.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (Object.keys(tmpData).length) {\n\t\t\t\t\t\tdata[name] = tmpData\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.log(data)\n\n\t\t\t\t// Diameters\n\t\t\t\tconst diameters = {}\n\t\t\t\tfor (const [name, props] of Object.entries(data)) {\n\t\t\t\t\tdiameters[name] = props.diameter_max\n\t\t\t\t}\n\t\t\t\tthis.diameter_chart_wrapper = new boxvio_chart_wrapper(\n\t\t\t\t\tthis.diameter_chart_container,\n\t\t\t\t\tdiameters,\n\t\t\t\t\ttrue,\n\t\t\t\t\t'Diameter',\n\t\t\t\t\ttrue\n\t\t\t\t)\n\t\t\t\tthis.diameter_chart_wrapper.render()\n\n\t\t\t\t// Diameters\n\t\t\t\tconst weights = {}\n\t\t\t\tfor (const [name, props] of Object.entries(data)) {\n\t\t\t\t\tweights[name] = props.weight\n\t\t\t\t}\n\t\t\t\tthis.weight_chart_wrapper = new boxvio_chart_wrapper(\n\t\t\t\t\tthis.weight_chart_container,\n\t\t\t\t\tweights,\n\t\t\t\t\ttrue,\n\t\t\t\t\t'Weight',\n\t\t\t\t\ttrue\n\t\t\t\t)\n\t\t\t\tthis.weight_chart_wrapper.render()\n\n\t\t\t})\n\n\t},\n\n\t/**\n\t * SEARCH_ROWS\n\t * Call to API and load json data results of search\n\t */\n\tsearch_rows : function(options) {\n\n\t\tconst self = this\n\n\t\t// sort vars\n\t\t\tconst filter\t\t\t= options.filter || null\n\t\t\tconst ar_fields\t\t\t= options.ar_fields || [\"*\"]\n\t\t\tconst order\t\t\t\t= options.order || \"norder ASC\"\n\t\t\tconst lang\t\t\t\t= page_globals.WEB_CURRENT_LANG_CODE\n\t\t\tconst process_result\t= options.process_result || null\n\t\t\tconst limit\t\t\t\t= options.limit != undefined\n\t\t\t\t\t\t\t\t\t\t? options.limit\n\t\t\t\t\t\t\t\t\t\t: 30\n\t\t\n\t\treturn new Promise(function(resolve){\n\t\t\t// parse_sql_filter\n\t\t\t\tconst group = []\n\t\t\t// parsed filters\n\t\t\t\tconst sql_filter = self.form.parse_sql_filter(filter)\n\t\t\t// request\n\t\t\t\tconst request_body = {\n\t\t\t\t\tdedalo_get\t\t: 'records',\n\t\t\t\t\ttable\t\t\t: 'catalog',\n\t\t\t\t\tar_fields\t\t: ar_fields,\n\t\t\t\t\tlang\t\t\t: lang,\n\t\t\t\t\tsql_filter\t\t: sql_filter,\n\t\t\t\t\tlimit\t\t\t: limit,\n\t\t\t\t\tgroup\t\t\t: (group.length>0) ? group.join(\",\") : null,\n\t\t\t\t\tcount\t\t\t: false,\n\t\t\t\t\torder\t\t\t: order,\n\t\t\t\t\tprocess_result\t: process_result\n\t\t\t\t}\n\t\t\t\tdata_manager.request({\n\t\t\t\t\tbody : request_body\n\t\t\t\t})\n\t\t\t\t.then((response)=>{\n\t\t\t\t\t// data parsed\n\t\t\t\t\tconst data = page.parse_catalog_data(response.result)\n\n\t\t\t\t\tresolve(data)\n\t\t\t\t})\n\t\t})\n\n\t},\n\n}//end analysis\n\n"],"mappings":"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"}