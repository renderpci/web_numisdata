{"version":3,"names":["DEFAULT_BAR_COLOR","chart_wrapper","div_wrapper","this","constructor","Error","download_chart_container","undefined","controls_container","chartjs_chart_wrapper","call","canvas","chart","histogram_wrapper","data","xlabel","_data","_density","_n_bins_default","Math","ceil","sqrt","length","_n_bins","_xlabel","_n_decimals","_max_bins_multiplier","_bar_color","bar_chart_wrapper","ylabel","Array","isArray","_check_array_valid","_parse_array","_check_object_valid","_parse_object","_ylabel","_bar_colors","labels","fill","prototype","render","self","replaceChildren","common","create_dom_element","element_type","id","class_name","parent","format_select","format","get_supported_export_formats","value","text_content","toUpperCase","addEventListener","download_chart","filename","download_func_name","Object","setPrototypeOf","download_chart_as_png","tmpLink","href","toBase64Image","setAttribute","click","remove","download_chart_as_svg","_tweak_c2s","width","offsetWidth","height","offsetHeight","options","animation","reponsive","svgContext","C2S","Chart","config","_config","encodeURIComponent","getSerializedSvg","getContext","contextId","style","__canvas","getAttribute","name","type","listener","eventListenerOptions","get_density","set_density","density","bin_centers","plot_data","half_bin_width","data_min","data_max","_get_plotting_data","datasets","label","_get_density_string","scales","y","title","text","update","get_n_bins","set_n_bins","n_bins","x","min","max","ticks","stepSize","plugins","tooltip","callbacks","_get_tooltip_title_callback","get_bar_color","set_bar_color","bar_color","backgroundColor","bin_width","apply","map","index","entries","i","j","sum","reduce","partialSum","val","n_decimals","items","dataIndex","toFixed","_render_chart","_render_control_panel","chart_data","categoryPercentage","barPercentage","scales_options","offset","grid","callback","Number","display","font","size","plugins_options","legend","parsing","normalized","slider","density_checkbox","Boolean","checked","color_picker_container","window","iro","ColorPicker","color","layoutDirection","layout","component","ui","Wheel","Slider","sliderType","on","rgbaString","arr","ele","slice","filter","v","a","indexOf","values","obj","keys","get_bar_colors","set_bar_colors","bar_colors","isInteger","bar_select","String","color_picker","set","analysis","form","area_name","row","export_data_container","form_items_container","chart_wrapper_container","set_up","form_node","render_form","appendChild","fragment","DocumentFragment","form_factory","form_row","item_factory","tstring","mint","q_column","value_wrapper","eq","eq_in","eq_out","is_term","form_item","activate_autocomplete","table","submit_group","search","e","preventDefault","form_submit","reset","location","replace","pathname","operators_node","build_operators_node","form_obj","scroll_result","form_items","build_filter","search_rows","limit","then","parsed_data","event_manager","publish","console","log","diameters","full_coins_reference_diameter_max","flat","ar_fields","order","lang","page_globals","WEB_CURRENT_LANG_CODE","process_result","Promise","resolve","group","sql_filter","parse_sql_filter","request_body","dedalo_get","join","count","data_manager","request","body","response","page","parse_catalog_data","result"],"sources":["charts/chart-wrapper.js","charts/chartjs/chartjs-chart-wrapper.js","charts/chartjs/histogram-wrapper.js","charts/chartjs/bar-chart-wrapper.js","analysis.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Width (in pixels) of color picker\n * @type {number}\n */\nexport const COLOR_PICKER_WIDTH = 200\n\n/**\n * Default name for the chart -> when exporting,\n * `<name>.<format>`\n * @type {string}\n */\nconst DEFAULT_CHART_NAME = 'chart'\n\n/**\n * Default color for chart bars in rgba\n * @type {string}\n */\nexport const DEFAULT_BAR_COLOR = 'rgba(255,190,92,0.5)'\n\n\n/**\n * Chart wrapper class\n * @class\n * @abstract\n * @param {Element} div_wrapper \n */\nexport function chart_wrapper(div_wrapper) {\n    if (this.constructor === chart_wrapper) {\n        throw new Error(\"Abstract class 'chart_wrapper' cannot be instantiated\")\n    }\n    /**\n     * Div element wrapping the chart itself and\n     * the controls\n     * @type {Element}\n     * @protected\n     */\n    this.div_wrapper = div_wrapper\n    /**\n     * Div container for chart download\n     * @type {Element}\n     * @protected\n     */\n    this.download_chart_container = undefined\n    /**\n     * Div container for user controls\n     * Used freely by each subclass\n     * @type {Element}\n     * @protected\n     */\n    this.controls_container = undefined\n}\n\n/**\n * Render the chart and controls\n * \n * Empties the div wrapper and resets properties\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name chart_wrapper#render\n * @function\n */\nchart_wrapper.prototype.render = function () {\n    // Save this chart_wrapper intance\n    /**\n     * This chart_wrapper intance\n     * @type {chart_wrapper}\n     */\n    const self = this\n    // Remove all children in the div_wrapper\n    this.div_wrapper.replaceChildren()\n    // Set controls container to undefined\n    this.controls_container = undefined\n    // Create the chart download section\n    this.download_chart_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'download_chart_container',\n        class_name: 'o-purple',\n        parent: this.div_wrapper,\n    })\n    const format_select = common.create_dom_element({\n        element_type: 'select',\n        id: 'chart_export_format',\n        parent: this.download_chart_container,\n        // TODO: add ARIA attributes?\n    })\n    for (const format of this.get_supported_export_formats()) {\n        common.create_dom_element({\n            element_type: 'option',\n            value: format,\n            text_content: format.toUpperCase(),\n            parent: format_select,\n        })\n    }\n    const chart_download_button = common.create_dom_element({\n        element_type: 'button',\n        text_content: 'Download',\n        parent: this.download_chart_container,\n    })\n    chart_download_button.addEventListener('click', () => {\n        self.download_chart(format_select.value)\n    })\n}\n\n/**\n * Download the chart as an image\n * \n * For each supported format in the subclass,\n * @see chart_wrapper#get_supported_export_formats\n * the subclass must implement a method called\n * `download_chart_as_<format>`\n * @param {string} format the image format\n * @function\n * @abstract\n * @name chart_wrapper#download_chart\n */\nchart_wrapper.prototype.download_chart = function (format) {\n    /**\n     * File name for the chart\n     * @type {string}\n     */\n    const filename = `${DEFAULT_CHART_NAME}.${format}`\n    /**\n     * Function name for downloading with the particular format\n     * @type {string}\n     */\n    const download_func_name = `download_chart_as_${format}`\n    if (this[download_func_name] === undefined) {\n        throw new Error(`${download_func_name} is not implemented!`)\n    }\n    this[download_func_name](filename)\n}\n\n/**\n * Get the supported chart export formats\n * \n * Subclasses must return their own supported formats, e.g.,\n * `['png', 'jpg', 'eps']`\n * @function\n * @returns {string[]} the supported formats\n * @abstract\n * @name chart_wrapper#get_supported_export_formats\n */\nchart_wrapper.prototype.get_supported_export_formats = function () {\n    throw new Error(`Abstract method 'chart_wrapper.download_chart' cannot be called`)\n}","\"use strict\";\n\nimport { chart_wrapper } from \"../chart-wrapper.js\";\n\n/**\n * Chart.js chart wrapper class\n * @class\n * @abstract\n * @param {Element} div_wrapper \n * @extends chart_wrapper\n */\nexport function chartjs_chart_wrapper(div_wrapper) {\n    if (this.constructor === chartjs_chart_wrapper) {\n        throw new Error(\"Abstract class 'chartjs_chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper.call(this, div_wrapper)\n    /**\n     * Canvas instance, will be created during\n     * render\n     * @type {HTMLCanvasElement}\n     * @protected\n     */\n    this.canvas = undefined\n    /**\n     * Chart instance (chart.js)\n     * @protected\n     */\n    this.chart = undefined\n}\n// Set prototype chain\nObject.setPrototypeOf(chartjs_chart_wrapper.prototype, chart_wrapper.prototype)\n\n/**\n * Render the chart (chartjs) and controls\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name chartjs_chart_wrapper#render\n * @function\n */\nchartjs_chart_wrapper.prototype.render = function () {\n    chart_wrapper.prototype.render.call(this)\n    // Create canvas\n    this.canvas = common.create_dom_element({\n        element_type: 'canvas',\n        id: 'result_graph',\n        class_name: 'o-blue',\n        parent: this.div_wrapper,\n    })\n    // Set chart instance to undefined\n    this.chart = undefined\n}\n\n/**\n * Get the supported chart export formats\n * @function\n * @returns {string[]} the supported formats\n * @name chartjs_chart_wrapper#get_supported_export_formats\n */\nchartjs_chart_wrapper.prototype.get_supported_export_formats = function () {\n    return ['png']\n}\n\n/**\n * Download the chart as png\n * @param {string} filename the name of the file\n * @function\n * @name chartjs_chart_wrapper#_download_chart_as_png\n */\nchartjs_chart_wrapper.prototype.download_chart_as_png = function (filename) {\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    let tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: this.chart.toBase64Image(),\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n}\n\n/**\n * FIXME: this is not working...\n * Download the chart as svg\n * @param {string} filename the name of the file\n * @function\n * @name chartjs_chart_wrapper#_download_chart_as_svg\n */\nchartjs_chart_wrapper.prototype.download_chart_as_svg = function (filename) {\n    // Tweak C2S library\n    this._tweak_c2s()\n    // Get original width and height\n    const width = this.canvas.offsetWidth\n    const height = this.canvas.offsetHeight\n    // TODO: Turn off responsiveness and animations\n    this.chart.options.animation = false\n    this.chart.options.reponsive = false\n    // Replicate chart in C2S space\n    const svgContext = C2S(width, height)\n    const svgChart = new Chart(svgContext, this.chart.config._config)\n    // Download\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    let tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: 'data:image/svg+xml;utf8,'\n            + encodeURIComponent(svgContext.getSerializedSvg()),\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n    // TODO: Turn on responsiveness and animations\n    this.chart.options.animation = true\n    this.chart.options.reponsive = true\n}\n\n/**\n * Some tweaks to the canvas2svg library are required for svg export to work\n * \n * Via: https://stackoverflow.com/questions/62249315/export-canvas-to-svg-file\n * @function\n * @private\n * @name chartjs_chart_wrapper#_tweak_c2s\n */\nchartjs_chart_wrapper.prototype._tweak_c2s = function () {\n    C2S.prototype.getContext = function (contextId) {\n        if (contextId === '2d' || contextId === '2D') {\n            return this;\n        }\n        return null;\n    }\n    C2S.prototype.style = function () {\n        return this.__canvas.style;\n    }\n    C2S.prototype.getAttribute = function (name) {\n        return this[name];\n    }\n    C2S.prototype.addEventListener = function (type, listener, eventListenerOptions) {\n        // nothing to do here, but we need this function :)\n    }\n}","\"use strict\";\n\nimport { chartjs_chart_wrapper } from \"./chartjs-chart-wrapper.js\";\nimport { COLOR_PICKER_WIDTH, DEFAULT_BAR_COLOR } from \"../chart-wrapper.js\";\n\n/**\n * Histogram wrapper\n * @param {Element}  div_wrapper the div to work in\n * @param {number[]} data the data\n * @param {string} xlabel the label for the x-axis\n * @class\n * @extends chartjs_chart_wrapper\n */\nexport function histogram_wrapper(div_wrapper, data, xlabel) {\n    /*\n     * <Function>.call is a method that executes the defined function,\n     * but with the \"this\" variable pointing to the first argument,\n     * and the rest of the arguments being arguments of the function\n     * that is being \"called\". This essentially performs all of\n     * chart_wrapper's constructor logic on histogram_wrapper's \"this\".\n     */\n    chartjs_chart_wrapper.call(this, div_wrapper)\n\n    /**\n     * Data values\n     * @type {number[]}\n     * @private\n     */\n    this._data = data\n    /**\n     * Whether to perform a density plot\n     * @type {boolean}\n     * @private\n     */\n    this._density = false\n    /**\n     * Default number of bins\n     * @type {number}\n     * @private\n     */\n    this._n_bins_default = Math.ceil(Math.sqrt(this._data.length))\n    /**\n     * Number of bins in the histogram\n     * \n     * Defined as the square root of the\n     * amount of datapoints, computed\n     * during render\n     * @type {number}\n     * @private\n     */\n    this._n_bins = undefined\n    /** Label for the xaxis\n     * @type {string}\n     * @private\n    */\n    this._xlabel = xlabel\n    /**\n     * Number of decimals to display\n     * @type {number}\n     * @private\n     */\n    this._n_decimals = 3\n    /**\n     * Maximum number of bins as mutiplier of default\n     * @type {number}\n     * @private\n     */\n    this._max_bins_multiplier = 3\n    /**\n     * Default color for the bars in rgba\n     * @type {string}\n     * @private\n     */\n    this._bar_color = DEFAULT_BAR_COLOR\n}\n// Set prototype chain\nObject.setPrototypeOf(histogram_wrapper.prototype, chartjs_chart_wrapper.prototype)\n\n/**\n * Check whether we are doing a density plot\n * @returns {boolean} `true` if density plot,\n * \t\t\t`false` otherwise\n * @name histogram_wrapper#get_density\n * @function\n */\nhistogram_wrapper.prototype.get_density = function () {\n    return this._density\n}\n\n/**\n * Change the density plot attribute\n * @param density {boolean} `true` if density, `false` otherwise\n * @function\n * @name histogram_wrapper#set_density\n */\nhistogram_wrapper.prototype.set_density = function (density) {\n    this._density = density\n    if (!this.chart) {\n        return\n    }\n    // Update chart\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n    this.chart.data.datasets[0].label = this._get_density_string()\n    this.chart.data.datasets[0].data = plot_data\n    this.chart.options.scales.y.title.text = this._get_density_string()\n    this.chart.update()\n}\n\n/**\n * Get a string representing the plot mode\n * @returns {string} `'Density'` if we are in density\n * \t\t\tmode, `'Frequency'` otherwise\n * @function\n * @private\n * @name histogram_wrapper#_get_density_string\n */\nhistogram_wrapper.prototype._get_density_string = function () {\n    return this._density ? 'Density' : 'Frequency'\n}\n\n/**\n * Get the amount of bins in the histogram\n * @returns {number} the amount of bins\n * @function\n * @name histogram_wrapper#get_n_bins\n */\nhistogram_wrapper.prototype.get_n_bins = function () {\n    return this._n_bins\n}\n\n/**\n * Set a new number of bins for the histogram\n * \n * Updates chart instance accordingly\n * @param {number} n_bins amount of bins\n * @function\n * @name histogram_wrapper#set_n_bins\n */\nhistogram_wrapper.prototype.set_n_bins = function (n_bins) {\n    this._n_bins = n_bins\n    if (!this.chart) {\n        return\n    }\n    // Update chart\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n    this.chart.data.datasets[0].data = plot_data\n    this.chart.options.scales.x.min = data_min\n    this.chart.options.scales.x.max = data_max\n    this.chart.options.scales.x.ticks.stepSize = 2 * half_bin_width\n    this.chart.options.plugins.tooltip.callbacks.title =\n        this._get_tooltip_title_callback(bin_centers, half_bin_width)\n    this.chart.update()\n}\n\n/**\n * Get the color of the bars in the histogram\n * @returns {string} the bar color as an rgba string\n * @function\n * @name histogram_wrapper#get_bar_color\n */\nhistogram_wrapper.prototype.get_bar_color = function () {\n    return this._bar_color\n}\n\n/**\n * Set a new color for the bars in the histogram\n * \n * Updates the chart instance accordingly\n * @param {string} bar_color the new bar color for the histogram\n * @function\n * @name histogram_wrapper#set_bar_color\n */\nhistogram_wrapper.prototype.set_bar_color = function (bar_color) {\n    this._bar_color = bar_color\n    if (!this.chart) {\n        return\n    }\n    this.chart.data.datasets[0].backgroundColor = this._bar_color\n    this.chart.update()\n}\n\n/**\n * Get data needed to generate the chart\n * TODO: there is no need to recompute bin_centers unless the number of bins\n* \t\t has changed\n* @function\n* @name histogram_wrapper#_get_plotting_data\n* @private\n* \n* @returns {[number[], {x: number, y: number}[], number, number, number]}\n* \t\t\tthe bin centers, {bin centers, count per bin}, half of the bin width,\n* \t\t\tthe minimum and maximum of input data\n */\nhistogram_wrapper.prototype._get_plotting_data = function () {\n    const data_max = Math.max(...this._data)\n    const data_min = Math.min(...this._data)\n    const bin_width = (data_max - data_min) / this._n_bins\n    const half_bin_width = 0.5 * bin_width\n    /**\n     * Center of each bin\n     * @type {number[]}\n     */\n    const bin_centers = Array.apply(null, Array(this._n_bins)).map(\n        (value, index) => data_min + (2 * index + 1) * half_bin_width\n    )\n    // We bin with right-open intervals\n    /**\n     * Count per bin\n     * @type {number[]}\n     */\n    let entries = Array.apply(null, Array(this._n_bins)).map(() => 0)\n    for (let i = 0; i < this._data.length; i++) {\n        // If value is max, add it to last bin\n        if (this._data[i] === data_max) {\n            entries[this._n_bins - 1]++\n            continue\n        }\n        // Proceed as usual\n        for (let j = 0; j < this._n_bins; j++) {\n            if (this._data[i] >= bin_centers[j] - half_bin_width\n                && this._data[i] < bin_centers[j] + half_bin_width) {\n                entries[j]++\n                break\n            }\n        }\n    }\n    // Normalize if density\n    if (this._density) {\n        const sum = entries.reduce((partialSum, val) => partialSum + val, 0)\n        for (let j = 0; j < this._n_bins; j++) {\n            entries[j] /= (sum * bin_width);\n        }\n    }\n    return [\n        bin_centers,\n        bin_centers.map((val, i) => ({ x: val, y: entries[i] })),\n        half_bin_width,\n        data_min,\n        data_max,\n    ]\n}\n\n/**\n * Get callback function for tooltip title\n * @param {number[]} bin_centers the bin centers\n * @param {number} half_bin_width half of the bin width\n * @returns the callback function\n * @function\n * @private\n * @name histogram_wrapper#_get_tooltip_title_callback\n */\nhistogram_wrapper.prototype._get_tooltip_title_callback = function (bin_centers, half_bin_width) {\n    // Cannot use `this` inside inner function!!!\n    const xlabel = this._xlabel\n    const n_decimals = this._n_decimals\n    /**\n     * Callback function for the tooltip title\n     * @param {TooltipItem[]} items the tooltip item contexts\n     * @returns {string} the title of the tooltip\n     * @function\n     * @name histogram_wrapper#_get_tooltip_title_callback~inner\n     */\n    const callback = function (items) {\n        if (!items.length) {\n            return ''\n        }\n        const item = items[0]\n        const index = item.dataIndex\n        const min = bin_centers[index] - half_bin_width\n        const max = bin_centers[index] + half_bin_width\n        return `${xlabel}: ${min.toFixed(n_decimals)} `\n            + `- ${max.toFixed(n_decimals)}`\n    }\n    return callback\n}\n\n/**\n * Render the chart and the control panel\n * @function\n * @name histogram_wrapper#render\n */\nhistogram_wrapper.prototype.render = function () {\n    // Call super render method\n    chartjs_chart_wrapper.prototype.render.call(this)\n    // Render chart\n    this._render_chart()\n    // Render control panel\n    this._render_control_panel()\n}\n\n/**\n * Render the chart\n * @function\n * @private\n * @name histogram_wrapper#_render_chart\n */\nhistogram_wrapper.prototype._render_chart = function () {\n    this._n_bins = this._n_bins_default\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n\n    // Split chart options\n    const chart_data = {\n        datasets: [{\n            label: this._get_density_string(),\n            data: plot_data,\n            categoryPercentage: 1,\n            barPercentage: 1,\n            backgroundColor: this._bar_color,\n        }],\n    }\n    const scales_options = {\n        x: {\n            type: 'linear',  // otherwise it goes to a category axis...\n            min: data_min,\n            max: data_max,\n            offset: false,\n            grid: {\n                offset: false,\n            },\n            ticks: {\n                stepSize: 2 * half_bin_width,\n                callback: (label, index, labels) => {\n                    return Number(label).toFixed(this._n_decimals)\n                }\n            },\n            title: {\n                display: true,\n                text: this._xlabel,\n                font: {\n                    size: 14\n                },\n            }\n        },\n        y: {\n            title: {\n                display: true,\n                text: this._get_density_string(),\n                font: {\n                    size: 14,\n                },\n            },\n        },\n    }\n    const plugins_options = {\n        legend: {\n            display: false,\n        },\n        tooltip: {\n            callbacks: {\n                title: this._get_tooltip_title_callback(bin_centers, half_bin_width),\n            },\n        },\n    }\n\n    // Render the graph\n    this.chart = new Chart(this.canvas, {\n        type: 'bar',\n        data: chart_data,\n        options: {\n            scales: scales_options,\n            plugins: plugins_options,\n            parsing: false,\n            normalized: true,\n        },\n    })\n}\n\n\n/**\n * Render the control panel\n * @function\n * @private\n * @name histogram_wrapper#_render_control_panel\n */\nhistogram_wrapper.prototype._render_control_panel = function () {\n    // Save this histogram wrapper instance, because when we change scope\n    // we may still need to refer to it\n    /**\n     * This histogram_wrapper instance\n     * @type {histogram_wrapper}\n     */\n    const self = this\n    // Create controls container\n    this.controls_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'controls',\n        class_name: 'o-green',\n        parent: this.div_wrapper,\n    })\n    /**\n     * Slider for number of bins\n     * @type {Element}\n     */\n    const slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        value: this._n_bins_default,\n        parent: this.controls_container,\n    })\n    slider.setAttribute('min', 1)\n    slider.setAttribute('max', this._max_bins_multiplier * this._n_bins_default)\n    slider.addEventListener('input', () => {\n        this.set_n_bins(Number(slider.value))\n    })\n    /**\n     * Reset button for the slider\n     * @type {Element}\n     */\n    const slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    slider_reset.addEventListener('click', () => {\n        slider.value = this._n_bins_default\n        this.set_n_bins(Number(slider.value))\n    })\n    /**\n     * Checkbox for density plot\n     * @type {Element}\n     */\n    const density_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: 'density_checkbox',\n        parent: this.controls_container,\n    })\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const density_checkbox_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Density',\n        parent: this.controls_container,\n    })\n    density_checkbox_label.setAttribute('for', 'density_checkbox')\n    density_checkbox.addEventListener('change', () => {\n        this.set_density(Boolean(density_checkbox.checked))\n    })\n    /** iro.js color picker */\n    const color_picker_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'color_picker_container',\n        parent: this.controls_container\n    })\n    const color_picker = new window.iro.ColorPicker(color_picker_container, {\n        color: this._bar_color,\n        width: COLOR_PICKER_WIDTH,\n        layoutDirection: 'horizontal',\n        layout: [\n            {\n                component: window.iro.ui.Wheel,\n            },\n            {\n                component: window.iro.ui.Slider,\n            },\n            {\n                component: window.iro.ui.Slider,\n                options: {\n                    sliderType: 'alpha',\n                }\n            },\n        ],\n    })\n    color_picker.on('color:change', function (color) {\n        self.set_bar_color(color.rgbaString)\n    })\n}","\"use strict\";\n\nimport { chartjs_chart_wrapper } from \"./chartjs-chart-wrapper.js\";\nimport { DEFAULT_BAR_COLOR, COLOR_PICKER_WIDTH } from \"../chart-wrapper.js\";\n\n/**\n * Bar chart wrapper\n * @param {Element} div_wrapper the div to work in\n * @param {number[] | string[] | {[key: string | number]: number}} data\n * \t\t  input data. Either an array of occurences, which are parsed by\n * \t\t  the bar chart wrapper (e.g., `['bronze', 'bronze', 'iron']`), or\n * \t\t  an object with keys and counts (e.g. `{'bronze': 2, 'iron': 1}`)\n * @param {string} ylabel the label for the y-axis\n * @class\n * @extends chartjs_chart_wrapper\n */\nexport function bar_chart_wrapper(div_wrapper, data, ylabel) {\n    chartjs_chart_wrapper.call(this, div_wrapper)\n    /**\n     * Data for the bar chart\n     * @type {{labels: string[] | number[], values: number[]}}\n     * @private\n     */\n    this._data = undefined\n    if (Array.isArray(data)) {\n        this._check_array_valid(data)\n        this._data = this._parse_array(data)\n    } else {\n        this._check_object_valid(data)\n        this._data = this._parse_object(data)\n    }\n    /**\n     * Label for the y-axis\n     * @type {string}\n     * @private\n     */\n    this._ylabel = ylabel\n    /**\n     * Color for each bar\n     * @type {string[]}\n     * @private\n     */\n    this._bar_colors = Array(this._data.labels.length).fill(DEFAULT_BAR_COLOR)\n}\n// Set prototype chain\nObject.setPrototypeOf(bar_chart_wrapper.prototype, chartjs_chart_wrapper.prototype)\n\n/**\n * Check if the input data array is valid\n * \n * Throws error otherwise\n * @param {string[] | number[]} arr the array to check\n * @function\n * @private\n * @name bar_chart_wrapper#_check_array_valid\n */\nbar_chart_wrapper.prototype._check_array_valid = function (arr) {\n    if (!arr.length) {\n        throw new Error(\"Input array is empty!\")\n    }\n    /**\n     * Type of the first element of the array\n     * @type {string}\n     */\n    const type = typeof arr[0]\n    if (type !== 'number' && type !== 'string') {\n        throw new Error(\"Input array is not made of numbers or strings\")\n    }\n    for (const ele of arr.slice(1)) {\n        if (typeof ele !== type) {\n            throw new Error(\"Input array combines multiple types\")\n        }\n    }\n}\n\n/**\n * Parse the input data array\n * \n * @param {string[] | number[]} arr the input array\n * @returns {{labels: string[] | number[], values: number[]}}\n * \t\t\tthe parsed input data in internal format\n * @function\n * @private\n * @name bar_chart_wrapper#_parse_array\n */\nbar_chart_wrapper.prototype._parse_array = function (arr) {\n    /**\n     * Unique values of the input array\n     * @type {number[] | string[]}\n     */\n    const labels = arr.filter((v, i, a) => a.indexOf(v) === i)\n    /**\n     * Count for each unique value in the input array\n     * @type {number[]}\n     */\n    const values = labels.map((v) => arr.filter((ele) => ele === v).length)\n    /**\n     * Parsed data\n     * @type {{labels: string[] | number[], values: number[]}}\n     */\n    let parsed = {\n        labels: labels,\n        values: values,\n    }\n    return parsed\n}\n\n/**\n * Check if the input data object is valid\n * \n * Throws error otherwise\n * @param {{[key: string | number]: number}} obj the object to check\n * @function\n * @private\n * @name bar_chart_wrapper#_check_object_valid\n */\nbar_chart_wrapper.prototype._check_object_valid = function (obj) {\n    if (!obj) {\n        throw new Error(\"Input data object is null or undefined\")\n    }\n    /**\n     * Keys of the input data object\n     * @type {number[] | string[]}\n     */\n    const keys = Object.keys(obj)\n    if (!keys.length) {\n        throw new Error(\"Input data object is empty\")\n    }\n    /**\n     * Values of the input data object\n     * @type {number}\n     */\n    const values = Object.values(obj)\n    for (const val of values) {\n        if (typeof val !== 'number') {\n            throw new Error(\"A value in the input data object is not a number\")\n        }\n    }\n}\n\n/**\n * Parse the input data object\n * \n * @param {{[key: string | number]: number}} obj the input array\n * @returns {{labels: string[] | number[], values: number[]}}\n * \t\t\tthe parsed input data in internal format\n * @function\n * @private\n * @name bar_chart_wrapper#_parse_object\n */\nbar_chart_wrapper.prototype._parse_object = function (obj) {\n    return {\n        labels: Object.keys(obj),\n        values: Object.values(obj),\n    }\n}\n\n/**\n * Get the bar colors\n * @returns {string[]} the bar colors as rgba strings\n */\nbar_chart_wrapper.prototype.get_bar_colors = function () {\n    return this._bar_colors\n}\n\n/**\n * Set new bar colors\n * \n * Updates chart instance accordingly\n * @param {string[]} bar_colors the new bar colors as rgba strings\n */\nbar_chart_wrapper.prototype.set_bar_colors = function (bar_colors) {\n    this._bar_colors = bar_colors\n    this.chart.data.datasets[0].backgroundColor = bar_colors\n    this.chart.update()\n}\n\n/**\n * Set a color for a given bar\n * @param {number} index the index of the bar \n * @param {string} bar_color the new bar color as an rgba string\n */\nbar_chart_wrapper.prototype.set_bar_color = function (index, bar_color) {\n    if (typeof index !== 'number') {\n        throw new Error(\"Index is not a number\")\n    } else if (!Number.isInteger(index)) {\n        throw new Error(\"Index is not an integer\")\n    } else if (index < 0 || index >= this._data.labels.length) {\n        throw new Error(\"Index is out of bounds\")\n    }\n    this._bar_colors[index] = bar_color\n    this.chart.data.datasets[0].backgroundColor[index] = bar_color\n    this.chart.update()\n}\n\n/**\n * Render the chart and the control panel\n * @function\n * @name bar_chart_wrapper#render\n */\nbar_chart_wrapper.prototype.render = function () {\n    // Call super render method\n    chartjs_chart_wrapper.prototype.render.call(this)\n    // Render chart\n    this._render_chart()\n    // Render control panel\n    this._render_control_panel()\n}\n\n/**\n * Render the chart\n * @function\n * @private\n * @name bar_chart_wrapper#_render_chart\n */\nbar_chart_wrapper.prototype._render_chart = function () {\n    const chart_data = {\n        labels: this._data.labels,\n        datasets: [{\n            label: this._ylabel,\n            data: this._data.values,\n            backgroundColor: this._bar_colors,\n        }],\n    }\n    const scales_options = {\n        y: {\n            title: {\n                display: true,\n                text: this._ylabel,\n                font: {\n                    size: 14,\n                }\n            },\n        },\n    }\n    const plugins_options = {\n        legend: {\n            display: false,\n        },\n    }\n    // Render the graph\n    this.chart = new Chart(this.canvas, {\n        type: 'bar',\n        data: chart_data,\n        options: {\n            scales: scales_options,\n            plugins: plugins_options,\n            normalized: true,\n        },\n    })\n}\n\n/**\n * Render the control panel\n * @function\n * @private\n * @name bar_chart_wrapper#_render_control_panel\n */\nbar_chart_wrapper.prototype._render_control_panel = function () {\n    /**\n     * This bar_chart_wrapper instance\n     * @type {bar_chart_wrapper}\n     */\n    const self = this\n    // Create controls container\n    this.controls_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'controls',\n        class_name: 'o-green',\n        parent: this.div_wrapper,\n    })\n    /**\n     * Select for bar choice\n     * @type {Element}\n     */\n    const bar_select = common.create_dom_element({\n        element_type: 'select',\n        id: 'bar_selection',\n        parent: this.controls_container,\n        // TODO: add ARIA attributes?\n    })\n    for (const [index, label] of this._data.labels.entries()) {\n        common.create_dom_element({\n            element_type: 'option',\n            value: String(index),  // 0 as a number becomes false as a boolean...\n            text_content: label,\n            parent: bar_select,\n        })\n    }\n    /** iro.js color picker */\n    const color_picker_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'color_picker_container',\n        parent: this.controls_container\n    })\n    const color_picker = new window.iro.ColorPicker(color_picker_container, {\n        color: this._bar_colors[0],\n        width: COLOR_PICKER_WIDTH,\n        layoutDirection: 'horizontal',\n        layout: [\n            {\n                component: window.iro.ui.Wheel,\n            },\n            {\n                component: window.iro.ui.Slider,\n            },\n            {\n                component: window.iro.ui.Slider,\n                options: {\n                    sliderType: 'alpha',\n                }\n            },\n        ],\n    })\n    // Bar select change event\n    bar_select.addEventListener('change', () => {\n        const index = Number(bar_select.value)\n        color_picker.color.set(self._bar_colors[index])\n    })\n    // Color change event\n    color_picker.on('color:change', function (color) {\n        const index = Number(bar_select.value)\n        self.set_bar_color(index, color.rgbaString)\n    })\n}","/*global tstring, page_globals, Promise, data_manager, common */\n/*eslint no-undef: \"error\"*/\n\n\"use strict\";\n\n\nimport { chart_wrapper } from \"./charts/chart-wrapper.js\";\nimport { histogram_wrapper } from \"./charts/chartjs/histogram-wrapper.js\";\nimport { bar_chart_wrapper } from \"./charts/chartjs/bar-chart-wrapper.js\";\n\nexport const analysis =  {\n\n\t// Form factory instance\n\tform: null,\n\n\tarea_name\t\t\t\t: null,\n\trow\t\t\t\t\t\t: null,\n\n\t// DOM containers\n\texport_data_container\t: null,\n\tform_items_container\t: null,\n\tchart_wrapper_container\t: null,\n\n\t/**\n\t * Chart wrapper instance\n\t * @type {chart_wrapper}\n\t */\n\tchart_wrapper: null,\n\n\n\tset_up : function(options) {\n\n\t\tconst self = this\n\n\t\t// options\n\t\t\tself.area_name\t\t\t\t\t= options.area_name\n\t\t\tself.export_data_container\t\t= options.export_data_container\n\t\t\tself.row\t\t\t\t\t\t= options.row\n\t\t\tself.form_items_container\t\t= options.form_items_container\n\t\t\tself.chart_wrapper_container\t= options.chart_wrapper_container\n\n\t\t// form\n\t\tconst form_node = self.render_form()\n\t\tself.form_items_container.appendChild(form_node)\n\n\t\treturn true\n\t},//end set_up\n\n\t/**\n\t * RENDER FORM\n\t */\n\trender_form : function() {\n\n\t\tconst self = this\n\n\t\t// DocumentFragment is like a virtual DOM\n\t\tconst fragment = new DocumentFragment()\n\n\t\t// form_factory instance\n\t\t\tself.form = self.form || new form_factory()\n\n\t\tconst form_row = common.create_dom_element({\n\t\t\telement_type\t: \"div\",\n\t\t\tclass_name\t\t: \"form-row fields\",\n\t\t\tparent\t\t\t: fragment\n\t\t})\n\n\t\t// mint\n\t\t\tself.form.item_factory({\n\t\t\t\tid\t\t\t\t: \"mint\",\n\t\t\t\tname\t\t\t: \"mint\",\n\t\t\t\tlabel\t\t\t: tstring.mint || \"mint\",\n\t\t\t\tq_column\t\t: \"p_mint\",\n\t\t\t\tvalue_wrapper\t: ['[\"', '\"]'], // to obtain [\"value\"] in selected value only\n\t\t\t\teq\t\t\t\t: \"LIKE\",\n\t\t\t\teq_in\t\t\t: \"%\",\n\t\t\t\teq_out\t\t\t: \"%\",\n\t\t\t\tis_term\t\t\t: true,\n\t\t\t\tparent\t\t\t: form_row,\n\t\t\t\tcallback\t\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\n\t\t// submit button\n\t\t\tconst submit_group = common.create_dom_element({\n\t\t\t\telement_type\t: \"div\",\n\t\t\t\tclass_name\t\t: \"form-group field button_submit\",\n\t\t\t\tparent\t\t\t: fragment\n\t\t\t})\n\t\t\tconst submit_button = common.create_dom_element({\n\t\t\t\telement_type\t: \"input\",\n\t\t\t\ttype\t\t\t: \"submit\",\n\t\t\t\tid\t\t\t\t: \"submit\",\n\t\t\t\tvalue\t\t\t: tstring.search || \"Search\",\n\t\t\t\tclass_name\t\t: \"btn btn-light btn-block primary\",\n\t\t\t\tparent\t\t\t: submit_group\n\t\t\t})\n\t\t\tsubmit_button.addEventListener(\"click\", function (e) {\n\t\t\t\te.preventDefault()\n\t\t\t\tself.form_submit(form)\n\t\t\t})\n\n\t\t// reset button\n\t\t\tconst reset_button = common.create_dom_element({\n\t\t\t\telement_type\t: \"input\",\n\t\t\t\ttype\t\t\t: \"button\",\n\t\t\t\tid\t\t\t\t: \"button_reset\",\n\t\t\t\tvalue\t\t\t: tstring.reset || 'Reset',\n\t\t\t\tclass_name\t\t: \"btn btn-light btn-block secondary button_reset\",\n\t\t\t\tparent\t\t\t: submit_group\n\t\t\t})\n\t\t\treset_button.addEventListener(\"click\", function (e) {\n\t\t\t\te.preventDefault()\n\t\t\t\twindow.location.replace(window.location.pathname);\n\t\t\t})\n\n\t\t// operators\n\t\t\t// fragment.appendChild( forms.build_operators_node() )\n\t\t\tconst operators_node = self.form.build_operators_node()\n\t\t\tfragment.appendChild( operators_node )\n\n\t\t// the form element itself!\n\t\t\tconst form = common.create_dom_element({\n\t\t\t\telement_type\t: \"form\",\n\t\t\t\tid\t\t\t\t: \"search_form\",\n\t\t\t\tclass_name\t\t: \"form-inline\"\n\t\t\t})\n\t\t\tform.appendChild(fragment)\n\n\n\t\treturn form\n\t},//end render_form\n\n\t/**\n\t * FORM SUBMIT\n\t * Form submit launch search\n\t */\n\tform_submit : function(form_obj, options={}) {\n\t\t\n\t\tconst self = this\n\n\t\t// options\n\t\t\tconst scroll_result\t= typeof options.scroll_result===\"boolean\" ? options.scroll_result : true\n\t\t\tconst form_items\t= options.form_items || self.form.form_items\n\n\t\t// build filter\n\t\t\tconst filter = self.form.build_filter({\n\t\t\t\tform_items: form_items\n\t\t\t})\n\t\t\n\t\t// empty filter case\n\t\t\tif (!filter || filter.length<1) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t// search rows exec against API\n\t\t\tconst js_promise = self.search_rows({\n\t\t\t\tfilter\t\t\t: filter,\n\t\t\t\tlimit\t\t\t: 0\n\t\t\t})\n\t\t\t.then((parsed_data)=>{\n\n\t\t\t\tevent_manager.publish('form_submit', parsed_data)\n\n\t\t\t\t// TODO: do stuff with the data\n\t\t\t\tconsole.log(parsed_data)\n\t\t\t\tconst diameters = parsed_data\n\t\t\t\t\t.map((ele) => ele.full_coins_reference_diameter_max)\n\t\t\t\t\t.flat()\n\t\t\t\t\t.filter((ele) => ele)\n\t\t\t\tthis.chart_wrapper = new histogram_wrapper(\n\t\t\t\t\tthis.chart_wrapper_container,\n\t\t\t\t\tdiameters,\n\t\t\t\t\t\"Diameter\"\n\t\t\t\t)\n\t\t\t\t// this.chart_wrapper = new bar_chart_wrapper(\n\t\t\t\t// \tthis.chart_wrapper_container,\n\t\t\t\t// \tcultures,\n\t\t\t\t// \t'Count'\n\t\t\t\t// )\n\t\t\t\tthis.chart_wrapper.render()\n\n\t\t\t})\n\n\t},\n\n\t/**\n\t * SEARCH_ROWS\n\t * Call to API and load json data results of search\n\t */\n\tsearch_rows : function(options) {\n\n\t\tconst self = this\n\n\t\t// sort vars\n\t\t\tconst filter\t\t\t= options.filter || null\n\t\t\tconst ar_fields\t\t\t= options.ar_fields || [\"*\"]\n\t\t\tconst order\t\t\t\t= options.order || \"norder ASC\"\n\t\t\tconst lang\t\t\t\t= page_globals.WEB_CURRENT_LANG_CODE\n\t\t\tconst process_result\t= options.process_result || null\n\t\t\tconst limit\t\t\t\t= options.limit != undefined\n\t\t\t\t\t\t\t\t\t\t? options.limit\n\t\t\t\t\t\t\t\t\t\t: 30\n\t\t\n\t\treturn new Promise(function(resolve){\n\t\t\t// parse_sql_filter\n\t\t\t\tconst group = []\n\t\t\t// parsed filters\n\t\t\t\tconst sql_filter = self.form.parse_sql_filter(filter)\n\t\t\t// request\n\t\t\t\tconst request_body = {\n\t\t\t\t\tdedalo_get\t\t: 'records',\n\t\t\t\t\ttable\t\t\t: 'catalog',\n\t\t\t\t\tar_fields\t\t: ar_fields,\n\t\t\t\t\tlang\t\t\t: lang,\n\t\t\t\t\tsql_filter\t\t: sql_filter,\n\t\t\t\t\tlimit\t\t\t: limit,\n\t\t\t\t\tgroup\t\t\t: (group.length>0) ? group.join(\",\") : null,\n\t\t\t\t\tcount\t\t\t: false,\n\t\t\t\t\torder\t\t\t: order,\n\t\t\t\t\tprocess_result\t: process_result\n\t\t\t\t}\n\t\t\t\tdata_manager.request({\n\t\t\t\t\tbody : request_body\n\t\t\t\t})\n\t\t\t\t.then((response)=>{\n\t\t\t\t\t// data parsed\n\t\t\t\t\tconst data = page.parse_catalog_data(response.result)\n\n\t\t\t\t\tresolve(data)\n\t\t\t\t})\n\t\t})\n\n\t},\n\n}//end analysis\n\n"],"mappings":"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"}