{"version":3,"names":["COLOR_PALETTE","chart_wrapper","div_wrapper","this","constructor","Error","download_chart_container","undefined","controls_container","chartjs_chart_wrapper","call","canvas","chart","histogram_wrapper","data","xlabel","_data","_density","_n_bins_default","Math","ceil","sqrt","length","_n_bins","_xlabel","_n_decimals","_max_bins_multiplier","_bar_color","bar_chart_wrapper","ylabel","Array","isArray","_check_array_valid","_parse_array","_check_object_valid","_parse_object","_ylabel","_bar_colors","labels","fill","d3_chart_wrapper","svg","toggle_visibility","element","attr","transition","linspace","start","stop","nsteps","delta","d3","range","map","i","boxvio_chart_wrapper","_metrics","name","values","Object","entries","calc_metrics","_data_extent","extent","flat","_full_width","_full_height","_chart","margin","top","right","bottom","left","width","height","yscale","scaleLinear","domain","clamp","yaxis","axisLeft","xscale","scaleBand","keys","padding","xaxis","axisBottom","n_bins_default","n_bins","max_bins_multiplier","histogram","bin","thresholds","value","d","bins","key","_graphics","root_g","violins_g","boxes_g","metrics","max","upper_fence","quartile3","median","mean","iqr","quartile1","lower_fence","min","quantile","prototype","render","self","replaceChildren","common","create_dom_element","element_type","id","class_name","style","display","parent","format_select","format","get_supported_export_formats","text_content","toUpperCase","addEventListener","download_chart","filename","download_func_name","setPrototypeOf","download_chart_as_png","tmpLink","href","toBase64Image","setAttribute","click","remove","download_chart_as_svg","_tweak_c2s","offsetWidth","offsetHeight","options","animation","reponsive","svgContext","C2S","Chart","config","_config","encodeURIComponent","getSerializedSvg","getContext","contextId","__canvas","getAttribute","type","listener","eventListenerOptions","get_density","set_density","density","bin_centers","plot_data","half_bin_width","data_min","data_max","_get_plotting_data","datasets","label","_get_density_string","scales","y","title","text","update","get_n_bins","set_n_bins","x","ticks","stepSize","plugins","tooltip","callbacks","_get_tooltip_title_callback","get_bar_color","set_bar_color","bar_color","backgroundColor","bin_width","apply","index","j","sum","reduce","partialSum","val","n_decimals","items","dataIndex","toFixed","_render_chart","_render_control_panel","chart_data","categoryPercentage","barPercentage","scales_options","offset","grid","callback","Number","font","size","plugins_options","legend","parsing","normalized","slider","density_checkbox","Boolean","checked","color_picker_container","window","iro","ColorPicker","color","layoutDirection","layout","component","ui","Wheel","Slider","sliderType","on","rgbaString","arr","ele","slice","filter","v","a","indexOf","obj","get_bar_colors","set_bar_colors","bar_colors","isInteger","bar_select","String","color_picker","set","select","append","svg_data","node","outerHTML","svg_blob","Blob","url","URL","createObjectURL","revokeObjectURL","selectAll","_render_violins","_render_axis","_render_boxes","g","is_g_ready","max_count","group","longest","xNum","bandwidth","enter","datum","area","x0","x1","curve","curveCatmullRom","outliers","boxes","box_width","group_box","outlier","whiskers","n_bins_slider","show_violins_checkbox","show_boxes_checkbox","analysis","form","area_name","row","export_data_container","form_items_container","chart_wrapper_container","set_up","form_node","render_form","appendChild","fragment","DocumentFragment","form_factory","form_row","item_factory","tstring","mint","q_column","value_wrapper","eq","eq_in","eq_out","is_term","form_item","activate_autocomplete","table","q_table","number_key","denomination","submit_group","search","e","preventDefault","form_submit","reset","location","replace","pathname","operators_node","build_operators_node","form_obj","scroll_result","form_items","build_filter","search_rows","limit","then","parsed_data","event_manager","publish","console","log","term","split","includes","tmpData","calculable","full_coins_reference_calculable","diameter_max","full_coins_reference_diameter_max","diameter_min","full_coins_reference_diameter_min","weight","full_coins_reference_weight","input_data","props","ar_fields","order","lang","page_globals","WEB_CURRENT_LANG_CODE","process_result","Promise","resolve","sql_filter","parse_sql_filter","request_body","dedalo_get","join","count","data_manager","request","body","response","page","parse_catalog_data","result"],"sources":["charts/chart-wrapper.js","charts/chartjs/chartjs-chart-wrapper.js","charts/chartjs/histogram-wrapper.js","charts/chartjs/bar-chart-wrapper.js","charts/d3/d3-chart-wrapper.js","charts/d3/utils.js","charts/d3/boxvio-chart-wrapper.js","analysis.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Width (in pixels) of color picker\n * @type {number}\n */\nexport const COLOR_PICKER_WIDTH = 200\n\n/**\n * Default name for the chart -> when exporting,\n * `<name>.<format>`\n * @type {string}\n */\nconst DEFAULT_CHART_NAME = 'chart'\n\n/**\n * Color palette, totally stolen from matplotlib\n * @type {string[]}\n */\nexport const COLOR_PALETTE = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']\n\n\n/**\n * Chart wrapper class\n * \n * It clears the container div during render, so subclasses should work with the dom\n * after the render method of this superclass has been called\n * @class\n * @abstract\n * @param {Element} div_wrapper \n */\nexport function chart_wrapper(div_wrapper) {\n    if (this.constructor === chart_wrapper) {\n        throw new Error(\"Abstract class 'chart_wrapper' cannot be instantiated\")\n    }\n    /**\n     * Div element wrapping the chart itself and\n     * the controls\n     * @type {Element}\n     * @protected\n     */\n    this.div_wrapper = div_wrapper\n    /**\n     * Div container for chart download\n     * @type {Element}\n     * @protected\n     */\n    this.download_chart_container = undefined\n    /**\n     * Div container for user controls\n     * Used freely by each subclass\n     * @type {Element}\n     * @protected\n     */\n    this.controls_container = undefined\n}\n\n/**\n * Render the chart and controls\n * \n * Empties the div wrapper and resets properties\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name chart_wrapper#render\n * @function\n */\nchart_wrapper.prototype.render = function () {\n    // Save this chart_wrapper intance\n    /**\n     * This chart_wrapper intance\n     * @type {chart_wrapper}\n     */\n    const self = this\n    // Remove all children in the div_wrapper\n    this.div_wrapper.replaceChildren()\n    // Set controls container to undefined\n    this.controls_container = undefined\n    // Create the chart download section\n    this.download_chart_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'download_chart_container',\n        class_name: 'o-purple',\n        style: {\n            'display': 'flex',\n            'flex-direction': 'row',\n            'justify-content': 'center',\n        },\n        parent: this.div_wrapper,\n    })\n    const format_select = common.create_dom_element({\n        element_type: 'select',\n        id: 'chart_export_format',\n        style: {\n            'width': '80%',\n        },\n        parent: this.download_chart_container,\n        // TODO: add ARIA attributes?\n    })\n    for (const format of this.get_supported_export_formats()) {\n        common.create_dom_element({\n            element_type: 'option',\n            value: format,\n            text_content: format.toUpperCase(),\n            parent: format_select,\n        })\n    }\n    const chart_download_button = common.create_dom_element({\n        element_type: 'button',\n        text_content: 'Download',\n        style: {\n            'width': '20%',\n        },\n        parent: this.download_chart_container,\n    })\n    chart_download_button.addEventListener('click', () => {\n        self.download_chart(format_select.value)\n    })\n}\n\n/**\n * Download the chart as an image\n * \n * For each supported format in the subclass,\n * @see chart_wrapper#get_supported_export_formats\n * the subclass must implement a method called\n * `download_chart_as_<format>`\n * @param {string} format the image format\n * @function\n * @abstract\n * @name chart_wrapper#download_chart\n */\nchart_wrapper.prototype.download_chart = function (format) {\n    /**\n     * File name for the chart\n     * @type {string}\n     */\n    const filename = `${DEFAULT_CHART_NAME}.${format}`\n    /**\n     * Function name for downloading with the particular format\n     * @type {string}\n     */\n    const download_func_name = `download_chart_as_${format}`\n    if (this[download_func_name] === undefined) {\n        throw new Error(`${download_func_name} is not implemented!`)\n    }\n    this[download_func_name](filename)\n}\n\n/**\n * Get the supported chart export formats\n * \n * Subclasses must return their own supported formats, e.g.,\n * `['png', 'jpg', 'eps']`\n * @function\n * @returns {string[]} the supported formats\n * @abstract\n * @name chart_wrapper#get_supported_export_formats\n */\nchart_wrapper.prototype.get_supported_export_formats = function () {\n    throw new Error(`Abstract method 'chart_wrapper.download_chart' cannot be called`)\n}","\"use strict\";\n\nimport { chart_wrapper } from \"../chart-wrapper.js\";\n\n/**\n * Chart.js chart wrapper class\n * @class\n * @abstract\n * @param {Element} div_wrapper the div conatining the chart\n * @extends chart_wrapper\n */\nexport function chartjs_chart_wrapper(div_wrapper) {\n    if (this.constructor === chartjs_chart_wrapper) {\n        throw new Error(\"Abstract class 'chartjs_chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper.call(this, div_wrapper)\n    /**\n     * Canvas instance, will be created during\n     * render\n     * @type {HTMLCanvasElement}\n     * @protected\n     */\n    this.canvas = undefined\n    /**\n     * Chart instance (chart.js)\n     * @protected\n     */\n    this.chart = undefined\n}\n// Set prototype chain\nObject.setPrototypeOf(chartjs_chart_wrapper.prototype, chart_wrapper.prototype)\n\n/**\n * Render the chart (chartjs) and controls\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name chartjs_chart_wrapper#render\n * @function\n */\nchartjs_chart_wrapper.prototype.render = function () {\n    chart_wrapper.prototype.render.call(this)\n    // Create canvas\n    this.canvas = common.create_dom_element({\n        element_type: 'canvas',\n        id: 'result_graph',\n        class_name: 'o-blue',\n        parent: this.div_wrapper,\n    })\n    // Set chart instance to undefined\n    this.chart = undefined\n}\n\n/**\n * Get the supported chart export formats\n * @function\n * @returns {string[]} the supported formats\n * @name chartjs_chart_wrapper#get_supported_export_formats\n */\nchartjs_chart_wrapper.prototype.get_supported_export_formats = function () {\n    return ['png']\n}\n\n/**\n * Download the chart as png\n * @param {string} filename the name of the file\n * @function\n * @name chartjs_chart_wrapper#_download_chart_as_png\n */\nchartjs_chart_wrapper.prototype.download_chart_as_png = function (filename) {\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: this.chart.toBase64Image(),\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n}\n\n/**\n * FIXME: this is not working...\n * Download the chart as svg\n * @param {string} filename the name of the file\n * @function\n * @name chartjs_chart_wrapper#_download_chart_as_svg\n */\nchartjs_chart_wrapper.prototype.download_chart_as_svg = function (filename) {\n    // Tweak C2S library\n    this._tweak_c2s()\n    // Get original width and height\n    const width = this.canvas.offsetWidth\n    const height = this.canvas.offsetHeight\n    // TODO: Turn off responsiveness and animations\n    this.chart.options.animation = false\n    this.chart.options.reponsive = false\n    // Replicate chart in C2S space\n    const svgContext = C2S(width, height)\n    const svgChart = new Chart(svgContext, this.chart.config._config)\n    // Download\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: 'data:image/svg+xml;utf8,'\n            + encodeURIComponent(svgContext.getSerializedSvg()),\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n    // TODO: Turn on responsiveness and animations\n    this.chart.options.animation = true\n    this.chart.options.reponsive = true\n}\n\n/**\n * Some tweaks to the canvas2svg library are required for svg export to work\n * \n * Via: https://stackoverflow.com/questions/62249315/export-canvas-to-svg-file\n * @function\n * @private\n * @name chartjs_chart_wrapper#_tweak_c2s\n */\nchartjs_chart_wrapper.prototype._tweak_c2s = function () {\n    C2S.prototype.getContext = function (contextId) {\n        if (contextId === '2d' || contextId === '2D') {\n            return this;\n        }\n        return null;\n    }\n    C2S.prototype.style = function () {\n        return this.__canvas.style;\n    }\n    C2S.prototype.getAttribute = function (name) {\n        return this[name];\n    }\n    C2S.prototype.addEventListener = function (type, listener, eventListenerOptions) {\n        // nothing to do here, but we need this function :)\n    }\n}","\"use strict\";\n\nimport { chartjs_chart_wrapper } from \"./chartjs-chart-wrapper.js\";\nimport { COLOR_PICKER_WIDTH, COLOR_PALETTE } from \"../chart-wrapper.js\";\n\n/**\n * Histogram wrapper\n * @param {Element}  div_wrapper the div to work in\n * @param {number[]} data the data\n * @param {string} xlabel the label for the x-axis\n * @class\n * @extends chartjs_chart_wrapper\n */\nexport function histogram_wrapper(div_wrapper, data, xlabel) {\n    /*\n     * <Function>.call is a method that executes the defined function,\n     * but with the \"this\" variable pointing to the first argument,\n     * and the rest of the arguments being arguments of the function\n     * that is being \"called\". This essentially performs all of\n     * chart_wrapper's constructor logic on histogram_wrapper's \"this\".\n     */\n    chartjs_chart_wrapper.call(this, div_wrapper)\n\n    /**\n     * Data values\n     * @type {number[]}\n     * @private\n     */\n    this._data = data\n    /**\n     * Whether to perform a density plot\n     * @type {boolean}\n     * @private\n     */\n    this._density = false\n    /**\n     * Default number of bins\n     * @type {number}\n     * @private\n     */\n    this._n_bins_default = Math.ceil(Math.sqrt(this._data.length))\n    /**\n     * Number of bins in the histogram\n     * \n     * Defined as the square root of the\n     * amount of datapoints, computed\n     * during render\n     * @type {number}\n     * @private\n     */\n    this._n_bins = undefined\n    /** Label for the xaxis\n     * @type {string}\n     * @private\n    */\n    this._xlabel = xlabel\n    /**\n     * Number of decimals to display\n     * @type {number}\n     * @private\n     */\n    this._n_decimals = 3\n    /**\n     * Maximum number of bins as mutiplier of default\n     * @type {number}\n     * @private\n     */\n    this._max_bins_multiplier = 3\n    /**\n     * Default color for the bars in rgba\n     * @type {string}\n     * @private\n     */\n    this._bar_color = COLOR_PALETTE[0]\n}\n// Set prototype chain\nObject.setPrototypeOf(histogram_wrapper.prototype, chartjs_chart_wrapper.prototype)\n\n/**\n * Check whether we are doing a density plot\n * @returns {boolean} `true` if density plot,\n * \t\t\t`false` otherwise\n * @name histogram_wrapper#get_density\n * @function\n */\nhistogram_wrapper.prototype.get_density = function () {\n    return this._density\n}\n\n/**\n * Change the density plot attribute\n * @param density {boolean} `true` if density, `false` otherwise\n * @function\n * @name histogram_wrapper#set_density\n */\nhistogram_wrapper.prototype.set_density = function (density) {\n    this._density = density\n    if (!this.chart) {\n        return\n    }\n    // Update chart\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n    this.chart.data.datasets[0].label = this._get_density_string()\n    this.chart.data.datasets[0].data = plot_data\n    this.chart.options.scales.y.title.text = this._get_density_string()\n    this.chart.update()\n}\n\n/**\n * Get a string representing the plot mode\n * @returns {string} `'Density'` if we are in density\n * \t\t\tmode, `'Frequency'` otherwise\n * @function\n * @private\n * @name histogram_wrapper#_get_density_string\n */\nhistogram_wrapper.prototype._get_density_string = function () {\n    return this._density ? 'Density' : 'Frequency'\n}\n\n/**\n * Get the amount of bins in the histogram\n * @returns {number} the amount of bins\n * @function\n * @name histogram_wrapper#get_n_bins\n */\nhistogram_wrapper.prototype.get_n_bins = function () {\n    return this._n_bins\n}\n\n/**\n * Set a new number of bins for the histogram\n * \n * Updates chart instance accordingly\n * @param {number} n_bins amount of bins\n * @function\n * @name histogram_wrapper#set_n_bins\n */\nhistogram_wrapper.prototype.set_n_bins = function (n_bins) {\n    this._n_bins = n_bins\n    if (!this.chart) {\n        return\n    }\n    // Update chart\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n    this.chart.data.datasets[0].data = plot_data\n    this.chart.options.scales.x.min = data_min\n    this.chart.options.scales.x.max = data_max\n    this.chart.options.scales.x.ticks.stepSize = 2 * half_bin_width\n    this.chart.options.plugins.tooltip.callbacks.title =\n        this._get_tooltip_title_callback(bin_centers, half_bin_width)\n    this.chart.update()\n}\n\n/**\n * Get the color of the bars in the histogram\n * @returns {string} the bar color as an rgba string\n * @function\n * @name histogram_wrapper#get_bar_color\n */\nhistogram_wrapper.prototype.get_bar_color = function () {\n    return this._bar_color\n}\n\n/**\n * Set a new color for the bars in the histogram\n * \n * Updates the chart instance accordingly\n * @param {string} bar_color the new bar color for the histogram\n * @function\n * @name histogram_wrapper#set_bar_color\n */\nhistogram_wrapper.prototype.set_bar_color = function (bar_color) {\n    this._bar_color = bar_color\n    if (!this.chart) {\n        return\n    }\n    this.chart.data.datasets[0].backgroundColor = this._bar_color\n    this.chart.update()\n}\n\n/**\n * Get data needed to generate the chart\n * TODO: there is no need to recompute bin_centers unless the number of bins\n* \t\t has changed\n* @function\n* @name histogram_wrapper#_get_plotting_data\n* @private\n* \n* @returns {[number[], {x: number, y: number}[], number, number, number]}\n* \t\t\tthe bin centers, {bin centers, count per bin}, half of the bin width,\n* \t\t\tthe minimum and maximum of input data\n */\nhistogram_wrapper.prototype._get_plotting_data = function () {\n    const data_max = Math.max(...this._data)\n    const data_min = Math.min(...this._data)\n    const bin_width = (data_max - data_min) / this._n_bins\n    const half_bin_width = 0.5 * bin_width\n    /**\n     * Center of each bin\n     * @type {number[]}\n     */\n    const bin_centers = Array.apply(null, Array(this._n_bins)).map(\n        (value, index) => data_min + (2 * index + 1) * half_bin_width\n    )\n    // We bin with right-open intervals\n    /**\n     * Count per bin\n     * @type {number[]}\n     */\n    let entries = Array.apply(null, Array(this._n_bins)).map(() => 0)\n    for (let i = 0; i < this._data.length; i++) {\n        // If value is max, add it to last bin\n        if (this._data[i] === data_max) {\n            entries[this._n_bins - 1]++\n            continue\n        }\n        // Proceed as usual\n        for (let j = 0; j < this._n_bins; j++) {\n            if (this._data[i] >= bin_centers[j] - half_bin_width\n                && this._data[i] < bin_centers[j] + half_bin_width) {\n                entries[j]++\n                break\n            }\n        }\n    }\n    // Normalize if density\n    if (this._density) {\n        const sum = entries.reduce((partialSum, val) => partialSum + val, 0)\n        for (let j = 0; j < this._n_bins; j++) {\n            entries[j] /= (sum * bin_width);\n        }\n    }\n    return [\n        bin_centers,\n        bin_centers.map((val, i) => ({ x: val, y: entries[i] })),\n        half_bin_width,\n        data_min,\n        data_max,\n    ]\n}\n\n/**\n * Get callback function for tooltip title\n * @param {number[]} bin_centers the bin centers\n * @param {number} half_bin_width half of the bin width\n * @returns the callback function\n * @function\n * @private\n * @name histogram_wrapper#_get_tooltip_title_callback\n */\nhistogram_wrapper.prototype._get_tooltip_title_callback = function (bin_centers, half_bin_width) {\n    // Cannot use `this` inside inner function!!!\n    const xlabel = this._xlabel\n    const n_decimals = this._n_decimals\n    /**\n     * Callback function for the tooltip title\n     * @param {TooltipItem[]} items the tooltip item contexts\n     * @returns {string} the title of the tooltip\n     * @function\n     * @name histogram_wrapper#_get_tooltip_title_callback~inner\n     */\n    const callback = function (items) {\n        if (!items.length) {\n            return ''\n        }\n        const item = items[0]\n        const index = item.dataIndex\n        const min = bin_centers[index] - half_bin_width\n        const max = bin_centers[index] + half_bin_width\n        return `${xlabel}: ${min.toFixed(n_decimals)} `\n            + `- ${max.toFixed(n_decimals)}`\n    }\n    return callback\n}\n\n/**\n * Render the chart and the control panel\n * @function\n * @name histogram_wrapper#render\n */\nhistogram_wrapper.prototype.render = function () {\n    // Call super render method\n    chartjs_chart_wrapper.prototype.render.call(this)\n    // Render chart\n    this._render_chart()\n    // Render control panel\n    this._render_control_panel()\n}\n\n/**\n * Render the chart\n * @function\n * @private\n * @name histogram_wrapper#_render_chart\n */\nhistogram_wrapper.prototype._render_chart = function () {\n    this._n_bins = this._n_bins_default\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n\n    // Split chart options\n    const chart_data = {\n        datasets: [{\n            label: this._get_density_string(),\n            data: plot_data,\n            categoryPercentage: 1,\n            barPercentage: 1,\n            backgroundColor: this._bar_color,\n        }],\n    }\n    const scales_options = {\n        x: {\n            type: 'linear',  // otherwise it goes to a category axis...\n            min: data_min,\n            max: data_max,\n            offset: false,\n            grid: {\n                offset: false,\n            },\n            ticks: {\n                stepSize: 2 * half_bin_width,\n                callback: (label, index, labels) => {\n                    return Number(label).toFixed(this._n_decimals)\n                }\n            },\n            title: {\n                display: true,\n                text: this._xlabel,\n                font: {\n                    size: 14\n                },\n            }\n        },\n        y: {\n            title: {\n                display: true,\n                text: this._get_density_string(),\n                font: {\n                    size: 14,\n                },\n            },\n        },\n    }\n    const plugins_options = {\n        legend: {\n            display: false,\n        },\n        tooltip: {\n            callbacks: {\n                title: this._get_tooltip_title_callback(bin_centers, half_bin_width),\n            },\n        },\n    }\n\n    // Render the graph\n    this.chart = new Chart(this.canvas, {\n        type: 'bar',\n        data: chart_data,\n        options: {\n            scales: scales_options,\n            plugins: plugins_options,\n            parsing: false,\n            normalized: true,\n        },\n    })\n}\n\n\n/**\n * Render the control panel\n * @function\n * @private\n * @name histogram_wrapper#_render_control_panel\n */\nhistogram_wrapper.prototype._render_control_panel = function () {\n    // Save this histogram wrapper instance, because when we change scope\n    // we may still need to refer to it\n    /**\n     * This histogram_wrapper instance\n     * @type {histogram_wrapper}\n     */\n    const self = this\n    // Create controls container\n    this.controls_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'controls',\n        class_name: 'o-green',\n        parent: this.div_wrapper,\n    })\n    /**\n     * Slider for number of bins\n     * @type {Element}\n     */\n    const slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        value: this._n_bins_default,\n        parent: this.controls_container,\n    })\n    slider.setAttribute('min', 1)\n    slider.setAttribute('max', this._max_bins_multiplier * this._n_bins_default)\n    slider.addEventListener('input', () => {\n        this.set_n_bins(Number(slider.value))\n    })\n    /**\n     * Reset button for the slider\n     * @type {Element}\n     */\n    const slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    slider_reset.addEventListener('click', () => {\n        slider.value = this._n_bins_default\n        this.set_n_bins(Number(slider.value))\n    })\n    /**\n     * Checkbox for density plot\n     * @type {Element}\n     */\n    const density_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: 'density_checkbox',\n        parent: this.controls_container,\n    })\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const density_checkbox_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Density',\n        parent: this.controls_container,\n    })\n    density_checkbox_label.setAttribute('for', 'density_checkbox')\n    density_checkbox.addEventListener('change', () => {\n        this.set_density(Boolean(density_checkbox.checked))\n    })\n    /** iro.js color picker */\n    const color_picker_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'color_picker_container',\n        parent: this.controls_container\n    })\n    const color_picker = new window.iro.ColorPicker(color_picker_container, {\n        color: this._bar_color,\n        width: COLOR_PICKER_WIDTH,\n        layoutDirection: 'horizontal',\n        layout: [\n            {\n                component: window.iro.ui.Wheel,\n            },\n            {\n                component: window.iro.ui.Slider,\n            },\n            {\n                component: window.iro.ui.Slider,\n                options: {\n                    sliderType: 'alpha',\n                }\n            },\n        ],\n    })\n    color_picker.on('color:change', function (color) {\n        self.set_bar_color(color.rgbaString)\n    })\n}","\"use strict\";\n\nimport { chartjs_chart_wrapper } from \"./chartjs-chart-wrapper.js\";\nimport { COLOR_PALETTE, COLOR_PICKER_WIDTH } from \"../chart-wrapper.js\";\n\n/**\n * Bar chart wrapper\n * @param {Element} div_wrapper the div to work in\n * @param {number[] | string[] | {[key: string | number]: number}} data\n * \t\t  input data. Either an array of occurences, which are parsed by\n * \t\t  the bar chart wrapper (e.g., `['bronze', 'bronze', 'iron']`), or\n * \t\t  an object with keys and counts (e.g. `{'bronze': 2, 'iron': 1}`)\n * @param {string} ylabel the label for the y-axis\n * @class\n * @extends chartjs_chart_wrapper\n */\nexport function bar_chart_wrapper(div_wrapper, data, ylabel) {\n    chartjs_chart_wrapper.call(this, div_wrapper)\n    /**\n     * Data for the bar chart\n     * @type {{labels: string[] | number[], values: number[]}}\n     * @private\n     */\n    this._data = undefined\n    if (Array.isArray(data)) {\n        this._check_array_valid(data)\n        this._data = this._parse_array(data)\n    } else {\n        this._check_object_valid(data)\n        this._data = this._parse_object(data)\n    }\n    /**\n     * Label for the y-axis\n     * @type {string}\n     * @private\n     */\n    this._ylabel = ylabel\n    /**\n     * Color for each bar\n     * @type {string[]}\n     * @private\n     */\n    this._bar_colors = Array(this._data.labels.length).fill(COLOR_PALETTE[0])\n}\n// Set prototype chain\nObject.setPrototypeOf(bar_chart_wrapper.prototype, chartjs_chart_wrapper.prototype)\n\n/**\n * Check if the input data array is valid\n * \n * Throws error otherwise\n * @param {string[] | number[]} arr the array to check\n * @function\n * @private\n * @name bar_chart_wrapper#_check_array_valid\n */\nbar_chart_wrapper.prototype._check_array_valid = function (arr) {\n    if (!arr.length) {\n        throw new Error(\"Input array is empty!\")\n    }\n    /**\n     * Type of the first element of the array\n     * @type {string}\n     */\n    const type = typeof arr[0]\n    if (type !== 'number' && type !== 'string') {\n        throw new Error(\"Input array is not made of numbers or strings\")\n    }\n    for (const ele of arr.slice(1)) {\n        if (typeof ele !== type) {\n            throw new Error(\"Input array combines multiple types\")\n        }\n    }\n}\n\n/**\n * Parse the input data array\n * \n * @param {string[] | number[]} arr the input array\n * @returns {{labels: string[] | number[], values: number[]}}\n * \t\t\tthe parsed input data in internal format\n * @function\n * @private\n * @name bar_chart_wrapper#_parse_array\n */\nbar_chart_wrapper.prototype._parse_array = function (arr) {\n    /**\n     * Unique values of the input array\n     * @type {number[] | string[]}\n     */\n    const labels = arr.filter((v, i, a) => a.indexOf(v) === i)\n    /**\n     * Count for each unique value in the input array\n     * @type {number[]}\n     */\n    const values = labels.map((v) => arr.filter((ele) => ele === v).length)\n    /**\n     * Parsed data\n     * @type {{labels: string[] | number[], values: number[]}}\n     */\n    let parsed = {\n        labels: labels,\n        values: values,\n    }\n    return parsed\n}\n\n/**\n * Check if the input data object is valid\n * \n * Throws error otherwise\n * @param {{[key: string | number]: number}} obj the object to check\n * @function\n * @private\n * @name bar_chart_wrapper#_check_object_valid\n */\nbar_chart_wrapper.prototype._check_object_valid = function (obj) {\n    if (!obj) {\n        throw new Error(\"Input data object is null or undefined\")\n    }\n    /**\n     * Keys of the input data object\n     * @type {number[] | string[]}\n     */\n    const keys = Object.keys(obj)\n    if (!keys.length) {\n        throw new Error(\"Input data object is empty\")\n    }\n    /**\n     * Values of the input data object\n     * @type {number}\n     */\n    const values = Object.values(obj)\n    for (const val of values) {\n        if (typeof val !== 'number') {\n            throw new Error(\"A value in the input data object is not a number\")\n        }\n    }\n}\n\n/**\n * Parse the input data object\n * \n * @param {{[key: string | number]: number}} obj the input array\n * @returns {{labels: string[] | number[], values: number[]}}\n * \t\t\tthe parsed input data in internal format\n * @function\n * @private\n * @name bar_chart_wrapper#_parse_object\n */\nbar_chart_wrapper.prototype._parse_object = function (obj) {\n    return {\n        labels: Object.keys(obj),\n        values: Object.values(obj),\n    }\n}\n\n/**\n * Get the bar colors\n * @returns {string[]} the bar colors as rgba strings\n */\nbar_chart_wrapper.prototype.get_bar_colors = function () {\n    return this._bar_colors\n}\n\n/**\n * Set new bar colors\n * \n * Updates chart instance accordingly\n * @param {string[]} bar_colors the new bar colors as rgba strings\n */\nbar_chart_wrapper.prototype.set_bar_colors = function (bar_colors) {\n    this._bar_colors = bar_colors\n    this.chart.data.datasets[0].backgroundColor = bar_colors\n    this.chart.update()\n}\n\n/**\n * Set a color for a given bar\n * @param {number} index the index of the bar \n * @param {string} bar_color the new bar color as an rgba string\n */\nbar_chart_wrapper.prototype.set_bar_color = function (index, bar_color) {\n    if (typeof index !== 'number') {\n        throw new Error(\"Index is not a number\")\n    } else if (!Number.isInteger(index)) {\n        throw new Error(\"Index is not an integer\")\n    } else if (index < 0 || index >= this._data.labels.length) {\n        throw new Error(\"Index is out of bounds\")\n    }\n    this._bar_colors[index] = bar_color\n    this.chart.data.datasets[0].backgroundColor[index] = bar_color\n    this.chart.update()\n}\n\n/**\n * Render the chart and the control panel\n * @function\n * @name bar_chart_wrapper#render\n */\nbar_chart_wrapper.prototype.render = function () {\n    // Call super render method\n    chartjs_chart_wrapper.prototype.render.call(this)\n    // Render chart\n    this._render_chart()\n    // Render control panel\n    this._render_control_panel()\n}\n\n/**\n * Render the chart\n * @function\n * @private\n * @name bar_chart_wrapper#_render_chart\n */\nbar_chart_wrapper.prototype._render_chart = function () {\n    const chart_data = {\n        labels: this._data.labels,\n        datasets: [{\n            label: this._ylabel,\n            data: this._data.values,\n            backgroundColor: this._bar_colors,\n        }],\n    }\n    const scales_options = {\n        y: {\n            title: {\n                display: true,\n                text: this._ylabel,\n                font: {\n                    size: 14,\n                }\n            },\n        },\n    }\n    const plugins_options = {\n        legend: {\n            display: false,\n        },\n    }\n    // Render the graph\n    this.chart = new Chart(this.canvas, {\n        type: 'bar',\n        data: chart_data,\n        options: {\n            scales: scales_options,\n            plugins: plugins_options,\n            normalized: true,\n        },\n    })\n}\n\n/**\n * Render the control panel\n * @function\n * @private\n * @name bar_chart_wrapper#_render_control_panel\n */\nbar_chart_wrapper.prototype._render_control_panel = function () {\n    /**\n     * This bar_chart_wrapper instance\n     * @type {bar_chart_wrapper}\n     */\n    const self = this\n    // Create controls container\n    this.controls_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'controls',\n        class_name: 'o-green',\n        parent: this.div_wrapper,\n    })\n    /**\n     * Select for bar choice\n     * @type {Element}\n     */\n    const bar_select = common.create_dom_element({\n        element_type: 'select',\n        id: 'bar_selection',\n        parent: this.controls_container,\n        // TODO: add ARIA attributes?\n    })\n    for (const [index, label] of this._data.labels.entries()) {\n        common.create_dom_element({\n            element_type: 'option',\n            value: String(index),  // 0 as a number becomes false as a boolean...\n            text_content: label,\n            parent: bar_select,\n        })\n    }\n    /** iro.js color picker */\n    const color_picker_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'color_picker_container',\n        parent: this.controls_container\n    })\n    const color_picker = new window.iro.ColorPicker(color_picker_container, {\n        color: this._bar_colors[0],\n        width: COLOR_PICKER_WIDTH,\n        layoutDirection: 'horizontal',\n        layout: [\n            {\n                component: window.iro.ui.Wheel,\n            },\n            {\n                component: window.iro.ui.Slider,\n            },\n            {\n                component: window.iro.ui.Slider,\n                options: {\n                    sliderType: 'alpha',\n                }\n            },\n        ],\n    })\n    // Bar select change event\n    bar_select.addEventListener('change', () => {\n        const index = Number(bar_select.value)\n        color_picker.color.set(self._bar_colors[index])\n    })\n    // Color change event\n    color_picker.on('color:change', function (color) {\n        const index = Number(bar_select.value)\n        self.set_bar_color(index, color.rgbaString)\n    })\n}","\"use strict\";\n\nimport { chart_wrapper } from \"../chart-wrapper\";\n\n/**\n * D3 chart wrapper class\n * \n * Appends an `svg` tag to the provided div, so that it spans all width\n * \n * Subclasses MUST specify the viewBox of the svg, so that it responds to window resizing\n * @param {Element} div_wrapper the div containing the chart\n * @class\n * @abstract\n * @extends chart_wrapper\n */\nexport function d3_chart_wrapper(div_wrapper) {\n    if (this.constructor === d3_chart_wrapper) {\n        throw new Error(\"Abstract class 'd3_chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper.call(this, div_wrapper)\n    /**\n     * D3 selection object for the root `svg` tag\n     * @protected\n     */\n    this.svg = undefined\n\n}\n// Set prototype chain\nObject.setPrototypeOf(d3_chart_wrapper.prototype, chart_wrapper.prototype)\n\n/**\n * Render the chart (d3) and controls\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name d3_chart_wrapper#render\n * @function\n */\nd3_chart_wrapper.prototype.render = function () {\n    chart_wrapper.prototype.render.call(this)\n\n    this.svg = d3.select(this.div_wrapper)\n        .append('svg')\n        .attr('version', '1.1') // When drawing SVG to canvas with an `Image`, if we don't add version and xmlns the `Image` will never load :(\n        .attr('xmlns', 'http://www.w3.org/2000/svg')\n        .attr('width', '100%')\n}\n\n/**\n * Get the supported chart export formats\n * @function\n * @returns {string[]} the supported formats\n * @name d3_chart_wrapper#get_supported_export_formats\n */\nd3_chart_wrapper.prototype.get_supported_export_formats = function () {\n    return ['svg']\n}\n\n/**\n * Download the chart as svg\n * @param {string} filename the name of the file\n * @function\n * @name d3_chart_wrapper#_download_chart_as_svg\n */\nd3_chart_wrapper.prototype.download_chart_as_svg = function (filename) {\n    const svg_data = this.svg.node().outerHTML\n    const svg_blob = new Blob([svg_data], { type: \"image/svg+xml;charset=utf-8\" })\n    const url = URL.createObjectURL(svg_blob)\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: url,\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n    URL.revokeObjectURL(url)\n}","/**\n * Toggle visibility of a d3 selection element\n * @param {d3.selection} element the elememt\n */\nexport function toggle_visibility(element) {\n    if (element.attr('opacity') == 0) {\n        element.transition().attr('opacity', 1)\n    } else {\n        element.transition().attr('opacity', 0)\n    }\n}\n\n/**\n * Get an array of values, evenly spaced over an\n * interval\n * \n * https://gist.github.com/davebiagioni/1ac21feb1c2db04be4e6\n * @param {number} start start value\n * @param {number} stop stop value\n * @param {number} nsteps amount of spets\n * @returns {number[]} the values\n */\nexport function linspace(start, stop, nsteps){\n    const delta = (stop-start)/(nsteps-1)\n    return d3.range(nsteps).map((i) => start+i*delta)\n}","\"use strict\";\n\nimport { d3_chart_wrapper } from \"./d3-chart-wrapper\";\nimport { COLOR_PALETTE } from \"../chart-wrapper\";\nimport { toggle_visibility, linspace } from \"./utils\";\n\n\n/**\n * Boxplot + violin chart wrapper\n * \n * Inspired in http://bl.ocks.org/asielen/d15a4f16fa618273e10f\n * \n * @param {Element}  div_wrapper the div to work in\n * @param {{[group_name: string]: number[]}} data the input data: group name\n *        and array of values\n * @param {string} ylabel the y label\n * @class\n * @extends d3_chart_wrapper\n */\nexport function boxvio_chart_wrapper(div_wrapper, data, ylabel) {\n    d3_chart_wrapper.call(this, div_wrapper)\n    /**\n     * Data: group name to array of values\n     * @type {Object.<string, number[]>}\n     * @private\n     */\n    this._data = data\n    /**\n     * The label for the y axis\n     * @type {string}\n     * @private\n     */\n    this._ylabel = ylabel\n    /**\n     * Boxplot metrics for each group name\n     * @type {{[group_name: string]: {\n     *  max: number,\n     *  upper_fence: number,\n     *  quartile3: number,\n     *  median: number,\n     *  mean: number,\n     *  iqr: number,\n     *  quartile1: number,\n     *  lower_fence: number,\n     *  min: number,\n     * }}}\n     * @private\n     */\n    this._metrics = {}\n    for (const [name, values] of Object.entries(data)) {\n        this._metrics[name] = calc_metrics(values)\n    }\n    /**\n     * Maximum and minimum of the input data\n     * @type {[number, number]}\n     */\n    this._data_extent = d3.extent(Object.values(this._data).flat())\n    /**\n     * Full width of svg\n     * @type {number}\n     */\n    this._full_width = 960\n    /**\n     * Full height of svg\n     * @type {number}\n     */\n    this._full_height = 420\n    /**\n     * Non-graphic components of the chart: setting, scales, etc.\n     * @private\n     */\n    this._chart = {}\n    this._chart.margin = { top: 15, right: 3, bottom: 23, left: 50 }\n    this._chart.width = this._full_width - this._chart.margin.left - this._chart.margin.right\n    this._chart.height = this._full_height - this._chart.margin.top - this._chart.margin.bottom\n    this._chart.yscale = d3.scaleLinear()\n        .range([this._chart.height, 0])\n        .domain(this._data_extent)\n        .clamp(true)  // when input outside of domain, its output is clamped to range\n    this._chart.yaxis = d3.axisLeft(this._chart.yscale)\n    this._chart.xscale = d3.scaleBand()\n        .domain(Object.keys(this._data))\n        .range([0, this._chart.width])\n        .padding(0.22)     // This is important: it is the space between 2 groups. 0 means no padding. 1 is the maximum.\n        this._chart.xaxis = d3.axisBottom(this._chart.xscale)\n    this._chart.n_bins_default = 15\n    this._chart.n_bins = this._chart.n_bins_default\n    this._chart.max_bins_multiplier = 3\n    this._chart.histogram = d3.bin()\n        .domain(this._chart.yscale.domain())\n        // TODO: compute number of bins automatically depending on the range of the data\n        .thresholds(\n            linspace(this._data_extent[0], this._data_extent[1], this._chart.n_bins+1)\n        )\n        .value((d) => d)\n    this._chart.bins = Object.entries(this._data).map(\n        ([name, values]) => {return {key: name, value: this._chart.histogram(values)}}\n    )\n    /**\n     * Graphic components of the chart: d3 selection objects\n     * @private\n     * @type {{[name: string]: d3.selection}}\n     */\n    this._graphics = {\n        root_g: null,\n        violins_g: null,\n        boxes_g: null,\n    }\n}\n// Set prototype chain\nObject.setPrototypeOf(boxvio_chart_wrapper.prototype, d3_chart_wrapper.prototype)\n\n/**\n * Set a new number of bins for the violin plot\n * @function\n * @param {number} n_bins the number of bins\n * @name boxvio_chart_wrapper#set_n_bins\n */\nboxvio_chart_wrapper.prototype.set_n_bins = function (n_bins) {\n    this._chart.n_bins = n_bins\n    this._chart.histogram.thresholds(\n        linspace(this._data_extent[0], this._data_extent[1], n_bins+1)\n    )\n    this._chart.bins = Object.entries(this._data).map(\n        ([name, values]) => {return {key: name, value: this._chart.histogram(values)}}\n    )\n    // Remove the violin graphics, only leaving its root g tag (violins_g)\n    this._graphics.violins_g.selectAll('*').remove()\n    this._render_violins(true)\n}\n\n/**\n * Render the chart and the control panel\n * @function\n * @name boxvio_chart_wrapper#render\n */\nboxvio_chart_wrapper.prototype.render = function () {\n    // Call super render method\n    d3_chart_wrapper.prototype.render.call(this)\n    // Render chart\n    this._render_chart()\n    // Render control panel\n    this._render_control_panel()\n}\n\n/**\n * Render the chart\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_chart\n */\nboxvio_chart_wrapper.prototype._render_chart = function () {\n\n    // Set viewBox of svg\n    this.svg.attr('viewBox', `0 0 ${this._full_width} ${this._full_height}`)\n\n    // Root g tag\n    this._graphics.root_g = this.svg.append('g')\n        .attr('transform', `translate(${this._chart.margin.left},${this._chart.margin.top})`)\n\n    this._render_axis()\n    this._render_violins()\n    this._render_boxes()\n\n}\n\n/**\n * Render the axis\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_axis\n */\nboxvio_chart_wrapper.prototype._render_axis = function () {\n    const g = this._graphics.root_g\n    // Render x axis\n    g.append('g')\n        .attr('transform', `translate(0,${this._chart.height})`)\n        .call(this._chart.xaxis)\n    // Render y axis\n    g.append('g')\n        .call(this._chart.yaxis)\n\n    // Render Y axis label\n    g.append('text')\n        .attr('text-anchor', 'middle')\n        .attr('transform', 'rotate(-90)')\n        .attr('y', -this._chart.margin.left + 20)\n        .attr('x', -this._chart.height / 2)\n        .text(this._ylabel);\n}\n\n/**\n * Render the violins\n * @function\n * @private\n * @param {boolean} is_g_ready whether the g tag for violins is\n *        set up (default: `false`)\n * @name boxvio_chart_wrapper#_render_violins\n */\nboxvio_chart_wrapper.prototype._render_violins = function (is_g_ready=false) {\n\n    const chart = this._chart\n    const g = this._graphics.root_g\n\n    // Get the largest count in a bin, as it will be the maximum width\n    let max_count = 0\n    for (const group of chart.bins) {\n        const longest = d3.max(group.value.map((v) => v.length))\n        if (longest > max_count) {\n            max_count = longest\n        }\n    }\n\n    // Make a scale linear to map bin counts to bandwidth\n    const xNum = d3.scaleLinear()\n        .range([0, chart.xscale.bandwidth()])\n        .domain([-max_count, max_count])\n\n    // Render\n    if (!is_g_ready) {\n        this._graphics.violins_g = g.append('g')\n    }\n    this._graphics.violins_g\n        .selectAll('violin')\n        .data(chart.bins)\n        .enter()  // Working per group now\n        .append('g')\n            .attr('transform', (d) => `translate(${chart.xscale(d.key)},0)`)\n        .append('path')\n            .datum((d) => d.value)  // Working per bin within a group\n            .style('stroke', 'gray')\n            .style('stroke-width', 0.4)\n            .style('fill', 'ghostwhite')\n            .attr('d', d3.area()\n                .x0((d) => xNum(-d.length))\n                .x1((d) => xNum(d.length))\n                .y((d) => chart.yscale(d.x0))\n                .curve(d3.curveCatmullRom)\n        )\n\n}\n\n/**\n * Render the boxes (including whiskers and outliers)\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_boxes\n */\nboxvio_chart_wrapper.prototype._render_boxes = function () {\n\n    const chart = this._chart\n    const g = this._graphics.root_g\n\n    // Get outliers\n    const outliers = {}\n    for (const [name, values] of Object.entries(this._data)) {\n        outliers[name] = values.filter(\n            (v) => v < this._metrics[name].lower_fence || v > this._metrics[name].upper_fence\n        )\n    }\n\n    // Draw\n    const boxes = g.append('g')\n    this._graphics.boxes_g = boxes\n    const bandwidth = chart.xscale.bandwidth()\n    const box_width = 0.5 * bandwidth\n\n    const whiskers_lw = 2\n    const median_lw = 3\n\n    // Iterate over the groups\n    for (const [i, name] of Object.entries(Object.keys(this._data))) {\n\n        const metrics = this._metrics[name]\n        const color = COLOR_PALETTE[i % COLOR_PALETTE.length]  // loop around!\n\n        const group_box = boxes.append('g')\n            .attr('transform', `translate(${chart.xscale(name) + bandwidth / 2},0)`)\n\n        // Draw outliers\n        for (const outlier of outliers[name]) {\n            group_box.append('circle')\n                .attr('cx', 0)\n                .attr('cy', chart.yscale(outlier))\n                .attr('r', 0.03*bandwidth)\n                .style('fill', color)\n                .style('opacity', 0.7)\n        }\n\n        // Draw whiskers\n        const whiskers = group_box.append('g')\n        whiskers.append('line')  // vertical line\n            .attr('x1', 0)\n            .attr('y1', chart.yscale(metrics.lower_fence))\n            .attr('x2', 0)\n            .attr('y2', chart.yscale(metrics.upper_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n        whiskers.append('line') // lower horizontal\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.lower_fence))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.lower_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n        whiskers.append('line') // upper horizontal\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.upper_fence))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.upper_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n\n        // Draw IQR box\n        const iqr = group_box.append('g')\n        iqr.append('rect')  // iqr rect\n            .attr('x', -box_width / 2)\n            .attr('y', chart.yscale(metrics.quartile3))\n            .attr('width', box_width)\n            .attr('height', chart.yscale(metrics.quartile1) - chart.yscale(metrics.quartile3))\n            .attr('fill', color)\n        iqr.append('line')  // median line\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.median))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.median))\n            .attr('stroke', 'black')\n            .attr('stroke-width', median_lw)\n        iqr.append('circle')  // median dot\n            .attr('cx', 0)\n            .attr('cy', chart.yscale(metrics.median))\n            .attr('r', 5)\n            .style('fill', 'white')\n            .attr('stroke', 'black')\n            .attr('stroke-width', 2)\n    }\n\n}\n\n\n\n/**\n * Render the control panel\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_control_panel\n */\nboxvio_chart_wrapper.prototype._render_control_panel = function () {\n\n    // Create controls container\n    this.controls_container = common.create_dom_element({\n        element_type: 'div',\n        id: 'controls',\n        class_name: 'o-green',\n        parent: this.div_wrapper,\n    })\n\n    /**\n     * Slider for number of bins\n     * @type {Element}\n     */\n    const n_bins_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        value: this._chart.n_bins_default,\n        parent: this.controls_container,\n    })\n    n_bins_slider.setAttribute('min', 1)\n    n_bins_slider.setAttribute('max', this._chart.max_bins_multiplier * this._chart.n_bins_default)\n    n_bins_slider.addEventListener('input', () => {\n        this.set_n_bins(Number(n_bins_slider.value))\n    })\n    /**\n     * Reset button for the n_bins_slider\n     * @type {Element}\n     */\n    const n_bins_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    n_bins_slider_reset.addEventListener('click', () => {\n        n_bins_slider.value = this._chart.n_bins_default\n        this.set_n_bins(Number(n_bins_slider.value))\n    })\n\n    /**\n     * Checkbox for showing violins\n     * @type {Element}\n     */\n    const show_violins_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: 'show_violins_checkbox',\n        parent: this.controls_container,\n    })\n    show_violins_checkbox.checked = true\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const show_violins_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Show violins',\n        parent: this.controls_container,\n    })\n    show_violins_label.setAttribute('for', 'show_violins_checkbox')\n    show_violins_checkbox.addEventListener('change', () => {\n        toggle_visibility(this._graphics.violins_g)\n    })\n\n    /**\n     * Checkbox for showing boxes\n     * @type {Element}\n     */\n     const show_boxes_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: 'show_boxes_checkbox',\n        parent: this.controls_container,\n    })\n    show_boxes_checkbox.checked = true\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const show_boxes_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Show boxes',\n        parent: this.controls_container,\n    })\n    show_boxes_label.setAttribute('for', 'show_boxes_checkbox')\n    show_boxes_checkbox.addEventListener('change', () => {\n        toggle_visibility(this._graphics.boxes_g)\n    })\n\n}\n\n// HELPER FUNCTIONS\n\n/**\n * Compute (boxplot) metrics for the data\n * @param {number[]} values the data values\n * @returns {{\n *  max: number,\n *  upper_fence: number,\n *  quartile3: number,\n *  median: number,\n *  mean: number,\n *  iqr: number,\n *  quartile1: number,\n *  lower_fence: number,\n *  min: number,\n * }}\n */\nfunction calc_metrics(values) {\n    const metrics = {\n        max: null,\n        upper_fence: null,\n        quartile3: null,\n        median: null,\n        mean: null,\n        iqr: null,\n        quartile1: null,\n        lower_fence: null,\n        min: null,\n    }\n\n    metrics.min = d3.min(values)\n    metrics.quartile1 = d3.quantile(values, 0.25)\n    metrics.median = d3.median(values)\n    metrics.mean = d3.mean(values)\n    metrics.quartile3 = d3.quantile(values, 0.75)\n    metrics.max = d3.max(values)\n    metrics.iqr = metrics.quartile3 - metrics.quartile1\n    metrics.lower_fence = metrics.quartile1 - 1.5 * metrics.iqr\n    metrics.upper_fence = metrics.quartile3 + 1.5 * metrics.iqr\n\n    return metrics\n}","/*global tstring, page_globals, Promise, data_manager, common */\n/*eslint no-undef: \"error\"*/\n\n\"use strict\";\n\n\nimport { chart_wrapper } from \"./charts/chart-wrapper.js\";\nimport { histogram_wrapper } from \"./charts/chartjs/histogram-wrapper.js\";\nimport { bar_chart_wrapper } from \"./charts/chartjs/bar-chart-wrapper.js\";\nimport { boxvio_chart_wrapper } from \"./charts/d3/boxvio-chart-wrapper.js\";\n\n\nexport const analysis =  {\n\n\t// Form factory instance\n\tform: null,\n\n\tarea_name\t\t\t\t: null,\n\trow\t\t\t\t\t\t: null,\n\n\t// DOM containers\n\texport_data_container\t: null,\n\tform_items_container\t: null,\n\tchart_wrapper_container\t: null,\n\n\t/**\n\t * Chart wrapper instance\n\t * @type {chart_wrapper}\n\t */\n\tchart_wrapper: null,\n\n\n\tset_up : function(options) {\n\n\t\tconst self = this\n\n\t\t// options\n\t\t\tself.area_name\t\t\t\t\t= options.area_name\n\t\t\tself.export_data_container\t\t= options.export_data_container\n\t\t\tself.row\t\t\t\t\t\t= options.row\n\t\t\tself.form_items_container\t\t= options.form_items_container\n\t\t\tself.chart_wrapper_container\t= options.chart_wrapper_container\n\n\t\t// form\n\t\tconst form_node = self.render_form()\n\t\tself.form_items_container.appendChild(form_node)\n\n\t\treturn true\n\t},//end set_up\n\n\t/**\n\t * RENDER FORM\n\t */\n\trender_form : function() {\n\n\t\tconst self = this\n\n\t\t// DocumentFragment is like a virtual DOM\n\t\tconst fragment = new DocumentFragment()\n\n\t\t// form_factory instance\n\t\t\tself.form = self.form || new form_factory()\n\n\t\tconst form_row = common.create_dom_element({\n\t\t\telement_type\t: \"div\",\n\t\t\tclass_name\t\t: \"form-row fields\",\n\t\t\tparent\t\t\t: fragment\n\t\t})\n\n\t\t// mint\n\t\t\tself.form.item_factory({\n\t\t\t\tid\t\t\t\t: \"mint\",\n\t\t\t\tname\t\t\t: \"mint\",\n\t\t\t\tlabel\t\t\t: tstring.mint || \"mint\",\n\t\t\t\tq_column\t\t: \"p_mint\",\n\t\t\t\tvalue_wrapper\t: ['[\"', '\"]'], // to obtain [\"value\"] in selected value only\n\t\t\t\teq\t\t\t\t: \"LIKE\",\n\t\t\t\teq_in\t\t\t: \"%\",\n\t\t\t\teq_out\t\t\t: \"%\",\n\t\t\t\tis_term\t\t\t: true,\n\t\t\t\tparent\t\t\t: form_row,\n\t\t\t\tcallback\t\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// number\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"number\",\n\t\t\t\tname \t\t: \"number\",\n\t\t\t\tq_column \t: \"term\",\n\t\t\t\tq_table \t: \"types\",\n\t\t\t\tlabel\t\t: tstring.number_key || \"Number & Key\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// denomination\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"denomination\",\n\t\t\t\tname \t\t: \"denomination\",\n\t\t\t\tq_column \t: \"ref_type_denomination\",\n\t\t\t\tq_table \t: \"any\",\n\t\t\t\tlabel\t\t: tstring.denomination || \"denomination\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\n\t\t// submit button\n\t\t\tconst submit_group = common.create_dom_element({\n\t\t\t\telement_type\t: \"div\",\n\t\t\t\tclass_name\t\t: \"form-group field button_submit\",\n\t\t\t\tparent\t\t\t: fragment\n\t\t\t})\n\t\t\tconst submit_button = common.create_dom_element({\n\t\t\t\telement_type\t: \"input\",\n\t\t\t\ttype\t\t\t: \"submit\",\n\t\t\t\tid\t\t\t\t: \"submit\",\n\t\t\t\tvalue\t\t\t: tstring.search || \"Search\",\n\t\t\t\tclass_name\t\t: \"btn btn-light btn-block primary\",\n\t\t\t\tparent\t\t\t: submit_group\n\t\t\t})\n\t\t\tsubmit_button.addEventListener(\"click\", function (e) {\n\t\t\t\te.preventDefault()\n\t\t\t\tself.form_submit(form)\n\t\t\t})\n\n\t\t// reset button\n\t\t\tconst reset_button = common.create_dom_element({\n\t\t\t\telement_type\t: \"input\",\n\t\t\t\ttype\t\t\t: \"button\",\n\t\t\t\tid\t\t\t\t: \"button_reset\",\n\t\t\t\tvalue\t\t\t: tstring.reset || 'Reset',\n\t\t\t\tclass_name\t\t: \"btn btn-light btn-block secondary button_reset\",\n\t\t\t\tparent\t\t\t: submit_group\n\t\t\t})\n\t\t\treset_button.addEventListener(\"click\", function (e) {\n\t\t\t\te.preventDefault()\n\t\t\t\twindow.location.replace(window.location.pathname);\n\t\t\t})\n\n\t\t// operators\n\t\t\t// fragment.appendChild( forms.build_operators_node() )\n\t\t\tconst operators_node = self.form.build_operators_node()\n\t\t\tfragment.appendChild( operators_node )\n\n\t\t// the form element itself!\n\t\t\tconst form = common.create_dom_element({\n\t\t\t\telement_type\t: \"form\",\n\t\t\t\tid\t\t\t\t: \"search_form\",\n\t\t\t\tclass_name\t\t: \"form-inline\"\n\t\t\t})\n\t\t\tform.appendChild(fragment)\n\n\n\t\treturn form\n\t},//end render_form\n\n\t/**\n\t * FORM SUBMIT\n\t * Form submit launch search\n\t */\n\tform_submit : function(form_obj, options={}) {\n\t\t\n\t\tconst self = this\n\n\t\t// options\n\t\t\tconst scroll_result\t= typeof options.scroll_result===\"boolean\" ? options.scroll_result : true\n\t\t\tconst form_items\t= options.form_items || self.form.form_items\n\n\t\t// build filter\n\t\t\tconst filter = self.form.build_filter({\n\t\t\t\tform_items: form_items\n\t\t\t})\n\t\t\n\t\t// empty filter case\n\t\t\tif (!filter || filter.length<1) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t// search rows exec against API\n\t\t\tconst js_promise = self.search_rows({\n\t\t\t\tfilter\t\t\t: filter,\n\t\t\t\tlimit\t\t\t: 0\n\t\t\t})\n\t\t\t.then((parsed_data)=>{\n\n\t\t\t\tevent_manager.publish('form_submit', parsed_data)\n\n\t\t\t\tconsole.log(parsed_data)\n\n\t\t\t\t// const diameters = parsed_data\n\t\t\t\t// \t.map((ele) => ele.full_coins_reference_diameter_max)\n\t\t\t\t// \t.flat()\n\t\t\t\t// \t.filter((v) => v)\n\t\t\t\t// console.log(diameters)\n\n\t\t\t\t// this.chart_wrapper = new histogram_wrapper(\n\t\t\t\t// \tthis.chart_wrapper_container,\n\t\t\t\t// \tdiameters,\n\t\t\t\t// \t'Diameter'\n\t\t\t\t// )\n\t\t\t\t// this.chart_wrapper.render()\n\n\t\t\t\tconst data = {}\n\t\t\t\tfor (const ele of parsed_data) {\n\t\t\t\t\tconst name = ele.term.split(' ')[0].slice(0, -1)\n\t\t\t\t\tif (!['12', '59', '62', '18','11a','14'].includes(name)) continue\n\t\t\t\t\t// if (!['59', '62'].includes(name)) continue\n\t\t\t\t\tconst tmpData = {}\n\t\t\t\t\tconst calculable = ele.full_coins_reference_calculable\n\t\t\t\t\tconst diameter_max = ele.full_coins_reference_diameter_max\n\t\t\t\t\tconst diameter_min = ele.full_coins_reference_diameter_min\n\t\t\t\t\tconst weight = ele.full_coins_reference_weight\n\t\t\t\t\tif (diameter_max && diameter_max.length) {\n\t\t\t\t\t\ttmpData.diameter_max = diameter_max.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (diameter_min && diameter_min.length) {\n\t\t\t\t\t\ttmpData.diameter_min = diameter_min.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (weight && weight.length) {\n\t\t\t\t\t\ttmpData.weight = weight.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (Object.keys(tmpData).length) {\n\t\t\t\t\t\tdata[name] = tmpData\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.log(data)\n\t\t\t\tconst input_data = {}\n\t\t\t\tfor (const [name, props] of Object.entries(data)) {\n\t\t\t\t\tinput_data[name] = props.diameter_max\n\t\t\t\t}\n\t\t\t\tconsole.log(input_data)\n\t\t\t\tthis.chart_wrapper = new boxvio_chart_wrapper(\n\t\t\t\t\tthis.chart_wrapper_container,\n\t\t\t\t\tinput_data,\n\t\t\t\t\t'Diameter'\n\t\t\t\t)\n\t\t\t\tthis.chart_wrapper.render()\n\n\t\t\t})\n\n\t},\n\n\t/**\n\t * SEARCH_ROWS\n\t * Call to API and load json data results of search\n\t */\n\tsearch_rows : function(options) {\n\n\t\tconst self = this\n\n\t\t// sort vars\n\t\t\tconst filter\t\t\t= options.filter || null\n\t\t\tconst ar_fields\t\t\t= options.ar_fields || [\"*\"]\n\t\t\tconst order\t\t\t\t= options.order || \"norder ASC\"\n\t\t\tconst lang\t\t\t\t= page_globals.WEB_CURRENT_LANG_CODE\n\t\t\tconst process_result\t= options.process_result || null\n\t\t\tconst limit\t\t\t\t= options.limit != undefined\n\t\t\t\t\t\t\t\t\t\t? options.limit\n\t\t\t\t\t\t\t\t\t\t: 30\n\t\t\n\t\treturn new Promise(function(resolve){\n\t\t\t// parse_sql_filter\n\t\t\t\tconst group = []\n\t\t\t// parsed filters\n\t\t\t\tconst sql_filter = self.form.parse_sql_filter(filter)\n\t\t\t// request\n\t\t\t\tconst request_body = {\n\t\t\t\t\tdedalo_get\t\t: 'records',\n\t\t\t\t\ttable\t\t\t: 'catalog',\n\t\t\t\t\tar_fields\t\t: ar_fields,\n\t\t\t\t\tlang\t\t\t: lang,\n\t\t\t\t\tsql_filter\t\t: sql_filter,\n\t\t\t\t\tlimit\t\t\t: limit,\n\t\t\t\t\tgroup\t\t\t: (group.length>0) ? group.join(\",\") : null,\n\t\t\t\t\tcount\t\t\t: false,\n\t\t\t\t\torder\t\t\t: order,\n\t\t\t\t\tprocess_result\t: process_result\n\t\t\t\t}\n\t\t\t\tdata_manager.request({\n\t\t\t\t\tbody : request_body\n\t\t\t\t})\n\t\t\t\t.then((response)=>{\n\t\t\t\t\t// data parsed\n\t\t\t\t\tconst data = page.parse_catalog_data(response.result)\n\n\t\t\t\t\tresolve(data)\n\t\t\t\t})\n\t\t})\n\n\t},\n\n}//end analysis\n\n"],"mappings":"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"}