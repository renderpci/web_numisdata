{"version":3,"names":["COLOR_PALETTE","chart_wrapper","div_wrapper","options","this","constructor","Error","_n_charts_created","id","_display_download","display_download","_download_chart_container","undefined","plot_container","_display_control_panel","display_control_panel","controls_container","d3_chart_wrapper","call","svg","toggle_visibility","element","attr","transition","linspace","start","stop","nsteps","delta","d3","range","map","i","prototype","id_string","render","replaceChildren","_render_download_panel","render_plot","render_control_panel","supported_formats","get_supported_export_formats","length","download_chart_container","common","create_dom_element","element_type","class_name","style","display","parent","format_select","width","format","value","text_content","toUpperCase","addEventListener","self","download_chart","filename","download_func_name","Object","setPrototypeOf","select","append","download_chart_as_svg","svg_data","node","outerHTML","svg_blob","Blob","type","url","URL","createObjectURL","tmpLink","href","setAttribute","click","remove","revokeObjectURL","CURVES","Basis","curveBasis","curveBasisClosed","curveBasisOpen","Bundle","curveBundle","curveBumpX","curveBumpY","Cardinal","curveCardinal","curveCardinalClosed","curveCardinalOpen","curveCatmullRom","curveCatmullRomClosed","curveCatmullRomOpen","Linear","curveLinear","curveLinearClosed","curveMonotoneX","curveMonotoneY","Natural","curveNatural","Step","curveStep","curveStepAfter","curveStepBefore","compute_n_bins","boxvio_chart_wrapper","data","_overflow","overflow","_data","Array","isArray","values","_data_flat","cname","group","entries","gname","join_class_group_name","obj","_sort_xaxis","sort_xaxis","_class_names","keys","sort","_cg_names","_colors","name","_ylabel","ylabel","yaxis_padding","_metrics","fromEntries","calc_metrics","_outliers","filter","v","lower_fence","upper_fence","_data_extents","extent","_data_extent","flat","_full_width","Math","sqrt","_full_height","_chart","margin","top","right","bottom","left","height","yscale","scaleLinear","domain","clamp","yticks_division","yaxis","axisLeft","tickFormat","d","toFixed","ticks","violin_scale_default","violin_scale","box_scale_default","box_scale","xscale","scaleBand","xaxis","axisBottom","split_class_group_name","xticklabel_angle","n_bins_default","sturges","n_bins","JSON","parse","stringify","histogram","bin","thresholds","bins","supported_curves","violin_curve","_graphics","root_g","xaxis_g","yaxwl_g","yaxis_g","violins_g","violins","boxes_g","outliers","_controls","max_bins_multiplier","metrics","max","quartile3","median","mean","iqr","quartile1","min","quantile","split","chartjs_chart_wrapper","canvas","chart","histogram_wrapper","_density","_n_bins_default","_n_bins","_xlabel","xlabel","_n_decimals","_max_bins_multiplier","_bar_color","ceil","log2","rice","pow","doane","n","sigma","std","deviation","sum","skew","abs","scott","freedman_diaconis","set_violin_scale","scale","selectAll","_render_violins","set_n_bins","_render_violin","set_violin_curve","curve_name","set_box_scale","_render_boxes","_render_axis","_render_ygrid","g","apply_xticklabel_angle","text","apply_ygrid_mode","mode","major_lines","minor_lines","angle","is_g_ready","bandwidth","max_count","x_num","datum","area","x0","x1","y","curve","boxes","box_width","color","group_box","outlier","whiskers","_render_grid_select","_render_xticklabel_angle_slider","_render_violin_curve_selector","_render_checkboxes","_render_scale_sliders","_render_n_bins_control","grid_select_id","grid_select","xticklabel_angle_slider","Number","curve_select_id","curve_select","show_violins_checkbox_id","show_violins_checkbox","checked","show_boxes_checkbox_id","show_boxes_checkbox","show_outliers_checkbox_id","show_outliers_checkbox","violin_scale_slider","box_scale_slider","group_select_id","group_select","join","violin_n_bins_slider","download_chart_as_png","toBase64Image","_tweak_c2s","offsetWidth","offsetHeight","animation","reponsive","svgContext","C2S","Chart","config","_config","encodeURIComponent","getSerializedSvg","getContext","contextId","__canvas","getAttribute","listener","eventListenerOptions","get_density","set_density","density","bin_centers","plot_data","half_bin_width","data_min","data_max","_get_plotting_data","datasets","label","_get_density_string","scales","title","update","get_n_bins","x","stepSize","plugins","tooltip","callbacks","_get_tooltip_title_callback","get_bar_color","set_bar_color","bar_color","backgroundColor","bin_width","apply","index","j","reduce","partialSum","val","n_decimals","items","dataIndex","chart_data","categoryPercentage","barPercentage","scales_options","offset","grid","callback","labels","Boolean","font","size","plugins_options","legend","parsing","normalized","slider","density_checkbox_id","density_checkbox","color_picker_container","window","iro","ColorPicker","layoutDirection","layout","component","ui","Wheel","Slider","sliderType","on","rgbaString","analysis","form","area_name","row","export_data_container","form_items_container","diameter_chart_container","weight_chart_container","diameter_chart_wrapper","weight_chart_wrapper","set_up","form_node","render_form","appendChild","fragment","DocumentFragment","form_factory","form_row","item_factory","tstring","mint","q_column","value_wrapper","eq","eq_in","eq_out","is_term","form_item","activate_autocomplete","table","q_table","number_key","group_op","material","denomination","submit_group","search","e","preventDefault","form_submit","reset","location","replace","pathname","operators_node","build_operators_node","form_obj","scroll_result","form_items","build_filter","scrollIntoView","behavior","block","inline","search_rows","limit","process_result","fn","columns","then","parsed_data","event_manager","publish","console","log","ele","ref_type_number","tmpData","calculable","full_coins_reference_calculable","diameter_max","full_coins_reference_diameter_max","diameter_min","full_coins_reference_diameter_min","weight","full_coins_reference_weight","weights","props","diameters","ar_fields","order","lang","page_globals","WEB_CURRENT_LANG_CODE","Promise","resolve","sql_filter","parse_sql_filter","request_body","dedalo_get","count","data_manager","request","body","response","page","parse_catalog_data","result"],"sources":["../../lib/charts/chart-wrapper.js","../../lib/charts/d3/d3-chart-wrapper.js","../../lib/charts/d3/utils.js","../../lib/charts/compute-n-bins.js","../../lib/charts/d3/boxvio-chart-wrapper.js","../../lib/charts/utils.js","../../lib/charts/chartjs/chartjs-chart-wrapper.js","../../lib/charts/chartjs/histogram-wrapper.js","analysis.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Width (in pixels) of color picker\n * @type {number}\n */\nexport const COLOR_PICKER_WIDTH = 200\n\n/**\n * Default name for the chart -> when exporting,\n * `<name>.<format>`\n * @type {string}\n */\nconst DEFAULT_CHART_NAME = 'chart'\n\n/**\n * Color palette, totally stolen from matplotlib\n * @type {string[]}\n */\nexport const COLOR_PALETTE = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#17becf']\n\n\n/**\n * Chart wrapper class (download panel, plot, and control panel)\n * \n * The `render` method must be called for the chart to be rendered to the DOM!!!\n * \n * Within the provided div wrapper, it will create three divs:\n * 1. If download is supported, a div to containing the download section, with\n *    id `chart<id>_download_chart_container` class `download_chart_container`\n * 2. A div to contain the plot itself, with id `chart<id>_plot_wrapper` class `plot_wrapper` \n * 3. A div to contain the control panel, with id `chart<id>_control_panel` and class `control_panel`\n * \n * It clears the container div during render, so subclasses should work with the dom\n * after the render methods of this superclass (`render_plot` and `render_control_panel`) have been called.\n * In other words, subclasses should override those specific methods instead of the general `render` function\n * \n * Last reminder, the constructor is the place to do data processing exclusively. All rendering to the DOM\n * must be done in the specific render methods. Otherwise, bugs WILL appear.\n * @class\n * @abstract\n * @param {Element} div_wrapper\n * @param {Object} options configuration options\n * @param {boolean} options.display_download whether to display the download panel (default `false`)\n * @param {boolean} options.display_control_panel whether to display the control panel (default `false`)\n */\nexport function chart_wrapper(div_wrapper, options) {\n    if (this.constructor === chart_wrapper) {\n        throw new Error(\"Abstract class 'chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper._n_charts_created++;\n    /**\n     * Unique identifier for the chart.\n     * \n     * Subclasses MUST use this in order to assing IDs\n     * to DOM elements, in order to avoid bugs and cross-chart events\n     * @type {number}\n     * @protected\n     */\n    this.id = chart_wrapper._n_charts_created\n    /**\n     * Div element wrapping the chart itself and\n     * the controls\n     * @type {Element}\n     * @protected\n     */\n    this.div_wrapper = div_wrapper\n    /**\n     * Whether to display the download panel\n     * @type {boolean}\n     * @private\n     */\n    this._display_download = options.display_download || false\n    /**\n     * Div container for chart download\n     * @type {Element}\n     * @private\n     */\n    this._download_chart_container = undefined\n    /**\n     * Div inside the div_wrapper, that just wraps the drawing\n     * @type {Element}\n     * @protected\n     */\n    this.plot_container = undefined\n    /**\n     * Whether to display the control panel\n     * @type {boolean}\n     * @private\n     */\n     this._display_control_panel = options.display_control_panel || false\n    /**\n     * Div container for user controls\n     * Used freely by each subclass\n     * @type {Element}\n     * @protected\n     */\n    this.controls_container = undefined\n}\n\n/**\n * Amount of created charts\n * @type {number}\n * @static\n * @private\n */\nchart_wrapper._n_charts_created = 0;\n\n/**\n * Get a string representing the ID of the chart\n * @returns {string} the id as a string\n *          (`'chart1'`, `'chart2'`, ...)\n */\nchart_wrapper.prototype.id_string = function () {\n    return `chart${this.id}`\n}\n\n/**\n * Render the chart\n * \n * Empties the div wrapper and resets properties\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name chart_wrapper#render\n * @function\n * @public\n */\nchart_wrapper.prototype.render = function () {\n    // Save this chart_wrapper intance\n    /**\n     * This chart_wrapper intance\n     * @type {chart_wrapper}\n     */\n    const self = this\n    // Remove all children in the div_wrapper\n    this.div_wrapper.replaceChildren()\n\n    // Create the chart download section\n    if (this._display_download) {\n        this._render_download_panel()\n    }\n\n    // Create the div for wrapping the plot\n    this.render_plot()\n\n    // Create the div for the control panel\n    if (this._display_control_panel) {\n        this.render_control_panel()\n    }\n\n}\n\n/**\n * Render the download panel to the DOM\n * @function\n * @private\n * @name chart_wrapper#_render_download_panel\n */\nchart_wrapper.prototype._render_download_panel = function () {\n    const supported_formats = this.get_supported_export_formats()\n    if (supported_formats.length) {\n        this.download_chart_container = common.create_dom_element({\n            element_type: 'div',\n            id: `${this.id_string()}_download_chart_container`,\n            class_name: 'o-purple download_chart_container',\n            style: {\n                'display': 'flex',\n                'flex-direction': 'row',\n                'justify-content': 'center',\n            },\n            parent: this.div_wrapper,\n        })\n        const format_select = common.create_dom_element({\n            element_type: 'select',\n            id: `${this.id_string()}_chart_export_format`,\n            style: {\n                'width': '80%',\n            },\n            parent: this.download_chart_container,\n            // TODO: add ARIA attributes?\n        })\n        for (const format of supported_formats) {\n            common.create_dom_element({\n                element_type: 'option',\n                value: format,\n                text_content: format.toUpperCase(),\n                parent: format_select,\n            })\n        }\n        const chart_download_button = common.create_dom_element({\n            element_type: 'button',\n            text_content: 'Download',\n            style: {\n                'width': '20%',\n            },\n            parent: this.download_chart_container,\n        })\n        chart_download_button.addEventListener('click', () => {\n            self.download_chart(format_select.value)\n        })\n    }\n}\n\n/**\n * Render the plot to the DOM\n * \n * Subclasses should override this method and make\n * use of the plot container\n * @function\n * @protected\n * @name chart_wrapper#render_plot\n */\nchart_wrapper.prototype.render_plot = function () {\n    this.plot_container = common.create_dom_element({\n        element_type: 'div',\n        id: `${this.id_string()}_plot_wrapper`,\n        class_name: 'o-purple plot_wrapper',\n        parent: this.div_wrapper,\n    })\n}\n\n/**\n * Render the control panel to the DOM\n * \n * Subclasses should override this method and make\n * use of the controls container\n * @function\n * @protected\n * @name chart_wrapper#render_control_panel\n */\nchart_wrapper.prototype.render_control_panel = function () {\n    this.controls_container = common.create_dom_element({\n        element_type: 'div',\n        id: `${this.id_string()}_control_panel`,\n        class_name: 'o-green control_panel',\n        parent: this.div_wrapper,\n    })\n}\n\n/**\n * Download the chart as an image\n * \n * For each supported format in the subclass,\n * @see chart_wrapper#get_supported_export_formats\n * the subclass must implement a method called\n * `download_chart_as_<format>`\n * @param {string} format the image format\n * @function\n * @abstract\n * @name chart_wrapper#download_chart\n */\nchart_wrapper.prototype.download_chart = function (format) {\n    /**\n     * File name for the chart\n     * @type {string}\n     */\n    const filename = `${DEFAULT_CHART_NAME}.${format}`\n    /**\n     * Function name for downloading with the particular format\n     * @type {string}\n     */\n    const download_func_name = `download_chart_as_${format}`\n    if (this[download_func_name] === undefined) {\n        throw new Error(`${download_func_name} is not implemented!`)\n    }\n    this[download_func_name](filename)\n}\n\n/**\n * Get the supported chart export formats\n * \n * Subclasses must return their own supported formats, if any, e.g.,\n * `['png', 'jpg', 'eps']`. If no format is supported, there is no\n * need to override this method.\n * @function\n * @returns {string[]} the supported formats\n * @name chart_wrapper#get_supported_export_formats\n */\nchart_wrapper.prototype.get_supported_export_formats = function () {\n    return []\n}","\"use strict\";\n\nimport { chart_wrapper } from \"../chart-wrapper\";\n\n/**\n * D3 chart wrapper class\n * \n * Appends an `svg` tag to the provided div.\n * \n * Subclasses MUST specify the viewBox of the svg, so that it responds to window resizing\n * The created svg tag has width=100%, spanning the width of the parent element. Subclasses\n * can alter this behavior by modifying the svg after the superclass `render_plot` method has been\n * called\n * @param {Element} div_wrapper the div containing the chart\n * @param {Object} options configuration options\n * @param {boolean} options.display_download whether to display the download panel (default `true`)\n * @param {boolean} options.display_control_panel whether to display the control panel (default `true`)\n * @class\n * @abstract\n * @extends chart_wrapper\n */\nexport function d3_chart_wrapper(div_wrapper, options) {\n    if (this.constructor === d3_chart_wrapper) {\n        throw new Error(\"Abstract class 'd3_chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper.call(this, div_wrapper, options)\n    /**\n     * D3 selection object for the root `svg` tag\n     * @protected\n     */\n    this.svg = undefined\n\n}\n// Set prototype chain\nObject.setPrototypeOf(d3_chart_wrapper.prototype, chart_wrapper.prototype)\n\n/**\n * Render the plot to the DOM\n * \n * Subclasses must call this method at the top\n * of their own implementation. Then, they can\n * make use of the svg d3.selection object\n * @function\n * @protected\n * @name chart_wrapper#render_plot\n */\nd3_chart_wrapper.prototype.render_plot = function () {\n    chart_wrapper.prototype.render_plot.call(this)\n\n    this.svg = d3.select(this.plot_container)\n        .append('svg')\n        // When drawing SVG to canvas with an `Image`, if we don't add version and xmlns the `Image` will never load :(\n        .attr('version', '1.1')\n        .attr('xmlns', 'http://www.w3.org/2000/svg')\n        .attr('width', '100%')\n}\n\n/**\n * Get the supported chart export formats\n * @function\n * @returns {string[]} the supported formats\n * @name d3_chart_wrapper#get_supported_export_formats\n */\nd3_chart_wrapper.prototype.get_supported_export_formats = function () {\n    return ['svg']\n}\n\n/**\n * Download the chart as svg\n * @param {string} filename the name of the file\n * @function\n * @name d3_chart_wrapper#_download_chart_as_svg\n */\nd3_chart_wrapper.prototype.download_chart_as_svg = function (filename) {\n    const svg_data = this.svg.node().outerHTML\n    const svg_blob = new Blob([svg_data], { type: \"image/svg+xml;charset=utf-8\" })\n    const url = URL.createObjectURL(svg_blob)\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: url,\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n    URL.revokeObjectURL(url)\n}","/**\n * Toggle visibility of a d3 selection element\n * @param {d3.selection} element the elememt\n */\nexport function toggle_visibility(element) {\n    if (element.attr('opacity') == 0) {\n        element.transition().attr('opacity', 1)\n    } else {\n        element.transition().attr('opacity', 0)\n    }\n}\n\n/**\n * Get an array of values, evenly spaced over an\n * interval\n * \n * https://gist.github.com/davebiagioni/1ac21feb1c2db04be4e6\n * @param {number} start start value\n * @param {number} stop stop value\n * @param {number} nsteps amount of spets\n * @returns {number[]} the values\n */\nexport function linspace(start, stop, nsteps){\n    const delta = (stop-start)/(nsteps-1)\n    return d3.range(nsteps).map((i) => start+i*delta)\n}\n\n/**\n * Map from name to d3 curve\n * https://github.com/d3/d3/blob/main/API.md#curves\n * @type {Object.<string, d3.curve>}\n */\nexport const CURVES = {\n    // cubic basis spline, repeating the end points\n    'Basis': d3.curveBasis,\n    // a closed cubic basis spline\n    'Basis closed': d3.curveBasisClosed,\n    // a cubic basis spline\n    'Basis open': d3.curveBasisOpen,\n    // a straightened cubic basis spline (works only with d3.line, not d3.area!)\n    'Bundle': d3.curveBundle,\n    // a cubic Bézier spline with horizontal tangents\n    'Bump X': d3.curveBumpX,\n    // a cubic Bézier spline with vertical tangents\n    'Bump Y': d3.curveBumpY,\n    // a cubic cardinal spline, with one-sided difference at each end\n    'Cardinal': d3.curveCardinal,\n    // a closed cubic cardinal spline\n    'Cardinal closed': d3.curveCardinalClosed,\n    // a cubic cardinal spline\n    'Cardinal open': d3.curveCardinalOpen,\n    // a cubic Catmull–Rom spline, with one-sided difference at each end\n    'Catmull-Rom': d3.curveCatmullRom,\n    // a closed cubic Catmull–Rom spline\n    'Catmull-Rom closed': d3.curveCatmullRomClosed,\n    // a cubic Catmull–Rom spline\n    'Catmull-Rom open': d3.curveCatmullRomOpen,\n    // a polyline\n    'Linear': d3.curveLinear,\n    // a closed polyline.\n    'Linear closed': d3.curveLinearClosed,\n    // a cubic spline that, given monotonicity in x, preserves it in y\n    'Monotone X': d3.curveMonotoneX,\n    // a cubic spline that, given monotonicity in y, preserves it in x\n    'Monotone Y': d3.curveMonotoneY,\n    // a natural cubic spline\n    'Natural': d3.curveNatural,\n    // a piecewise constant function\n    'Step': d3.curveStep,\n    // a piecewise constant function\n    'Step after': d3.curveStepAfter,\n    // a piecewise constant function\n    'Step before': d3.curveStepBefore,\n}\n","/**\n * Implements methods for computing the number of\n * bins based on the data values\n * \n * Each method takes an array of data values as input\n * and outputs the number of bins\n * @class\n */\nexport function compute_n_bins() {}\n\n/**\n * Compute number of bins with the square root rule\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.sqrt = function (values) {\n\treturn Math.ceil(Math.sqrt(values.length))\n}\n\n/**\n * Compute number of bins with the Sturges rule\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.sturges = function (values) {\n\treturn Math.ceil(Math.log2(values.length)) + 1\n}\n\n/**\n * Compute number of bins with the Rice rule\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.rice = function (values) {\n\treturn Math.ceil(2*Math.pow(values.length, 1/3))\n}\n\n/**\n * Compute number of bins with Doane's formula\n * \n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.doane = function (values) {\n\tconst n = values.length\n\tif (n < 2) {\n\t\tthrow new Error(\"Doane's rule needs at least 2 datapoints\")\n\t}\n\tconst sigma = Math.sqrt(6*(n-2)/((n+1)*(n+3)))\n\tconst std = d3.deviation(values)\n\tconst mean = d3.mean(values)\n\tconst sum = d3.sum(values)\n\t// The adjusted Fisher-Pearson skewness coefficient\n\t// https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/skewness.htm\n\tconst skew = (Math.sqrt(n*(n+1))/(n-2))*((sum-n*mean)/(n*Math.pow(std, 3)))\n\treturn 1 + Math.ceil(Math.log2(n)) + Math.ceil(Math.log2(1+Math.abs(skew)/sigma))\n}\n\n/**\n * Compute number of bins with Scott's normal\n * reference rule\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.scott = function (values) {\n\tif (values.length < 2) {\n\t\tthrow new Error(\n\t\t\t\"Cannot compute standard deviation of an array with less than 2 values\"\n\t\t)\n\t}\n\treturn Math.ceil(\n\t\t(d3.max(values)-d3.min(values))*Math.pow(values.length, 1/3)/(3.49*d3.deviation(values))\n\t)\n}\n\n/**\n * Compute number of bins with Freedman-Diaconis' choice\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.freedman_diaconis = function (values) {\n\tconst quartile3 = d3.quantile(values, 0.75)\n\tconst quartile1 = d3.quantile(values, 0.25)\n\tconst iqr =  quartile3 - quartile1\n\tif (quartile1 === quartile3) {\n\t\tthrow new Error(\"IQR is 0!\")\n\t}\n\treturn Math.ceil(\n\t\t(d3.max(values)-d3.min(values))*Math.pow(values.length, 1/3)/(2*iqr)\n\t)\n}\n","\"use strict\";\n\nimport { d3_chart_wrapper } from \"./d3-chart-wrapper\";\nimport { COLOR_PALETTE } from \"../chart-wrapper\";\nimport { toggle_visibility, linspace, CURVES } from \"./utils\";\nimport { compute_n_bins } from \"../compute-n-bins\";\nimport { deepcopy } from \"../utils\"\n\n\n/**\n * TODO: make a superclass (in the middle of this and d3_chart_wrapper) called xy-chart-wrapper\n * which manages the axes, grid, and so on. This will be useful if we add other charts that make\n * use of x and y axis \n *\n * Boxplot + violin chart wrapper\n * \n * Inspired in:\n * - http://bl.ocks.org/asielen/d15a4f16fa618273e10f,\n * - https://d3-graph-gallery.com/graph/violin_basicHist.html,\n * - https://d3-graph-gallery.com/graph/boxplot_show_individual_points.html\n * \n * @param {Element} div_wrapper the div to work in\n * @param {Object.<string, number[] | Object.<string, number[]>>} data the input data: either group name\n *        and array of values, or class name, to group name, to array of values\n *        (CLASS NAMES MUST NOT INCLUDE '_^_', or things WILL break)\n * @param {Object} options configuration options\n * @param {boolean} options.display_download whether to display the download panel (default `false`)\n * @param {boolean} options.display_control_panel whether to display the control panel (default `false`)\n * @param {boolean} options.sort_xaxis whether to sort the xaxis (default `false`)\n * @param {string} options.ylabel the y-label (default `null`)\n * @param {boolean} options.overflow whether to go beyond the width of the plot container (default `false`)\n * @param {number} options.xticklabel_angle the angle (in degrees) for the xtick labels (default `0`)\n * @class\n * @extends d3_chart_wrapper\n */\nexport function boxvio_chart_wrapper(div_wrapper, data, options) {\n    d3_chart_wrapper.call(this, div_wrapper, options)\n    /**\n     * Whether to go beyond the width of the plot container\n     * @type {boolean}\n     */\n    this._overflow = options.overflow || false\n    /**\n     * Data: class name to group name to array of values\n     * @type {Object.<string, Object.<string, number[]>>}\n     * @private\n     */\n    this._data = Array.isArray(Object.values(data)[0]) ? {'Class 1': data} : data\n    /**\n     * Data flat: class name + group name to array of values\n     * @type {Object.<string, number[]>}\n     * @orivate\n     */\n    this._data_flat = {}\n    for (const [cname, group] of Object.entries(this._data)) {\n        for (const [gname, values] of Object.entries(group)) {\n            this._data_flat[join_class_group_name(cname, gname)] = values\n        }\n    }\n    /**\n     * Whether to sort the xaxis\n     * @type {boolean}\n     * @private\n     */\n    this._sort_xaxis = options.sort_xaxis || false\n    /**\n     * Class names\n     * @type {string[]}\n     * @private\n     */\n    this._class_names = this._sort_xaxis ? Object.keys(this._data).sort() : Object.keys(this._data)\n    /**\n     * Class+Group names\n     * @type {string[]}\n     * @private\n     */\n    this._cg_names = this._sort_xaxis ? Object.keys(this._data_flat).sort() : Object.keys(this._data_flat)\n    /**\n     * Colors\n     * @type {string[]}\n     * @private\n     */\n    this._colors = this._cg_names.map((name, i) => COLOR_PALETTE[i % COLOR_PALETTE.length])\n    /**\n     * The label for the y axis\n     * @type {string}\n     * @private\n     */\n    this._ylabel = options.ylabel || null\n    /**\n     * Padding for the y axis, to account for the label and ticks\n     * @type {number}\n     */\n    this.yaxis_padding = this._ylabel ? 62 : 35;\n    /**\n     * Boxplot metrics for each class + group name\n     * @type {{[cg_name: string]: {\n     *  max: number,\n     *  upper_fence: number,\n     *  quartile3: number,\n     *  median: number,\n     *  mean: number,\n     *  iqr: number,\n     *  quartile1: number,\n     *  lower_fence: number,\n     *  min: number,\n     * }}}\n     * @private\n     */\n    this._metrics = Object.fromEntries(Object.entries(this._data_flat).map(\n        ([name, values]) => [name, calc_metrics(values)]\n    ))\n    /**\n     * Outliers per class + group name\n     * @type {{[cg_name: string]: number[]}}\n     * @private\n     */\n    this._outliers = Object.fromEntries(Object.entries(this._data_flat).map(\n        ([name, values]) => [\n            name,\n            values.filter(\n                (v) => v < this._metrics[name].lower_fence || v > this._metrics[name].upper_fence\n            )\n        ]\n    ))\n    /**\n     * Maximum and minimum values of each class+group\n     * @type {Object.<string, [number, number]>}\n     */\n    this._data_extents = Object.fromEntries(Object.entries(this._data_flat).map(\n        ([name, values]) => [name, d3.extent(values)]\n    ))\n    /**\n     * Maximum and minimum of the input data\n     * @type {[number, number]}\n     */\n    this._data_extent = d3.extent(Object.values(this._data_extents).flat())\n    /**\n     * Full width of svg\n     * @type {number}\n     */\n    this._full_width = 330.664701211*Math.sqrt(Object.keys(data).length) + -170.664701211 + this.yaxis_padding\n    /**\n     * Full height of svg\n     * @type {number}\n     */\n    this._full_height = 423\n    /**\n     * Non-graphic components of the chart: setting, scales, etc.\n     * @private\n     */\n    this._chart = {}\n    this._chart.margin = { top: 15, right: 4, bottom: 31, left: this.yaxis_padding }\n    this._chart.width = this._full_width - this._chart.margin.left - this._chart.margin.right\n    this._chart.height = this._full_height - this._chart.margin.top - this._chart.margin.bottom\n    this._chart.yscale = d3.scaleLinear()\n        .range([this._chart.height, 0])\n        .domain(this._data_extent)\n        .clamp(true)  // when input outside of domain, its output is clamped to range\n    this._chart.yticks_division = 2  // TODO: make this part of the input options object\n    // TODO: make number of decimals and number of ticks part of input options object\n    this._chart.yaxis = d3.axisLeft(this._chart.yscale)\n        .tickFormat((d, i) => i % this._chart.yticks_division ? '' : d.toFixed(1))\n        .ticks(19)\n    this._chart.violin_scale_default = 0.8\n    this._chart.violin_scale = this._chart.violin_scale_default\n    this._chart.box_scale_default = 0.3\n    this._chart.box_scale = this._chart.box_scale_default\n    this._chart.xscale = d3.scaleBand()\n        .domain(this._cg_names)\n        .range([0, this._chart.width])\n        // .padding(1-this._chart.violin_scale)     // This is important: it is the space between 2 groups. 0 means no padding. 1 is the maximum.\n    this._chart.xaxis = d3.axisBottom(this._chart.xscale)\n        .tickFormat((d) => split_class_group_name(d)[1])\n    this._chart.xticklabel_angle = options.xticklabel_angle || 0\n    this._chart.n_bins_default = Object.fromEntries(Object.entries(this._data_flat).map(\n        ([name, values]) => [name, compute_n_bins.sturges(values)]\n    ))\n    this._chart.n_bins = deepcopy(this._chart.n_bins_default)\n    this._chart.histogram = Object.fromEntries(Object.entries(this._data_extents).map(\n        ([name, extent]) => {\n            return [\n                name,\n                d3.bin().domain(extent).thresholds(\n                    linspace(extent[0], extent[1], this._chart.n_bins[name])\n                )\n            ]\n        }\n    ))\n    this._chart.bins = Object.fromEntries(Object.entries(this._data_flat).map(\n        ([name, values]) => [name, this._chart.histogram[name](values)]\n    ))\n    this._chart.supported_curves = [\n        'Basis', 'Bump Y', 'Cardinal', 'Catmull-Rom', 'Linear',\n        'Monotone Y', 'Natural', 'Step'\n    ]\n    this._chart.violin_curve = CURVES[this._chart.supported_curves[0]]\n    /**\n     * Graphic components of the chart: d3 selection objects\n     * @private\n     * @type {{[name: string]: d3.selection | {[group: string]: d3.selection}}}\n     */\n    this._graphics = {\n        // Root g tag (translated to account for the margins)\n        root_g: null,\n        // g tag for the x-axis\n        xaxis_g: null,\n        // g tag for the y-axis and label\n        yaxwl_g: null,\n        // g tag for the y-axis\n        yaxis_g: null,\n        // g tag grouping all violins\n        violins_g: null,\n        // individual g tag for each violin (mapped by group name)\n        violins: {},\n        // g tag grouping all boxes\n        boxes_g: null,\n        // per group: g tag grouping all outliers of the group\n        outliers: {},\n    }\n    /**\n     * Control panel things\n     * @private\n     */\n    this._controls = {}\n    this._controls.max_bins_multiplier = 3\n}\n// Set prototype chain\nObject.setPrototypeOf(boxvio_chart_wrapper.prototype, d3_chart_wrapper.prototype)\n\n/**\n * Set the scale for the violins\n * @function\n * @param {number} scale the scale [0, 1]\n * @name boxvio_chart_wrapper#set_violin_scale\n */\nboxvio_chart_wrapper.prototype.set_violin_scale = function (scale) {\n    this._chart.violin_scale = scale\n    // Remove the violin graphics, only leaving its root g tag (violins_g)\n    this._graphics.violins_g.selectAll('*').remove()\n    this._render_violins(true)\n}\n\n/**\n * Set the number of bins for a particular violin\n * \n * Updates the chart accordingly\n * @param {string} name name of the group \n * @param {number} n_bins number of bins\n * @name boxvio_chart_wrapper#set_n_bins\n */\nboxvio_chart_wrapper.prototype.set_n_bins = function (name, n_bins) {\n    const chart = this._chart\n    const extent = this._data_extents[name]\n    chart.n_bins[name] = n_bins\n    chart.histogram[name].thresholds(\n        linspace(extent[0], extent[1], n_bins)\n    )\n    chart.bins[name] = chart.histogram[name](this._data_flat[name])\n    // Delete the oath of the existing violin and redraw\n    this._graphics.violins[name].selectAll('*').remove()\n    this._render_violin(name)\n}\n\n/**\n * Set the curve for the violins\n * \n * Updates the chart accordingly\n * @param {string} curve_name name of the curve \n * @name boxvio_chart_wrapper#set_violin_curve\n */\nboxvio_chart_wrapper.prototype.set_violin_curve = function (curve_name) {\n    this._chart.violin_curve = CURVES[curve_name]\n    // Remove the violin graphics, only leaving its root g tag (violins_g)\n    this._graphics.violins_g.selectAll('*').remove()\n    this._render_violins(true)\n}\n\n/**\n * Set the scale for the boxes\n * @function\n * @param {number} scale the scale [0, 1]\n * @name boxvio_chart_wrapper#set_box_scale\n */\nboxvio_chart_wrapper.prototype.set_box_scale = function (scale) {\n    this._chart.box_scale = scale\n    // Remove the box graphics, only leaving its root g tag (boxes_g)\n    this._graphics.boxes_g.selectAll('*').remove()\n    this._render_boxes(true)\n}\n\n/**\n * Render the plot\n * @function\n * @protected\n * @name boxvio_chart_wrapper#render_plot\n */\nboxvio_chart_wrapper.prototype.render_plot = function () {\n    d3_chart_wrapper.prototype.render_plot.call(this)\n\n    if (this._overflow) {\n        this.svg.attr('width', null)\n        this.svg.attr('height', '500px')\n        this.plot_container.style = \"overflow: auto;\"\n    }\n\n    // Set viewBox of svg\n    this.svg.attr('viewBox', `0 0 ${this._full_width} ${this._full_height}`)\n\n    // Root g tag\n    this._graphics.root_g = this.svg.append('g')\n        .attr('transform', `translate(${this._chart.margin.left},${this._chart.margin.top})`)\n\n    this._render_axis()\n    this._render_ygrid()\n    this._render_violins()\n    this._render_boxes()\n\n}\n\n/**\n * Render the axis\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_axis\n */\nboxvio_chart_wrapper.prototype._render_axis = function () {\n    const g = this._graphics.root_g\n    // Render x axis\n    this._graphics.xaxis_g = g.append('g')\n    const xaxis_g = this._graphics.xaxis_g\n    xaxis_g\n        .attr('transform', `translate(0,${this._chart.height})`)\n        .call(this._chart.xaxis)\n    this.apply_xticklabel_angle()\n    \n    // Render y axis\n    this._graphics.yaxwl_g = g.append('g')\n    const yaxwl_g = this._graphics.yaxwl_g\n    this._graphics.yaxis_g = yaxwl_g.append('g')\n        .call(this._chart.yaxis)\n    // Render Y axis label\n    yaxwl_g.append('text')\n        .attr('text-anchor', 'middle')\n        .attr('transform', 'rotate(-90)')\n        .attr('y', -this._chart.margin.left + 20)\n        .attr('x', -this._chart.height / 2)\n        .text(this._ylabel)\n\n}\n\n/**\n * Render the grid for the y-axis\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_ygrid\n */\nboxvio_chart_wrapper.prototype._render_ygrid = function () {\n    const ticks = this._graphics.yaxis_g.selectAll('g.tick')\n    ticks.append('line')\n        .attr('x1', 0)\n        .attr('y1', 0)\n        .attr('x2', this._chart.width)\n        .attr('y2', 0)\n        .attr('stroke', (d, i) => i % 2 ? '#E0E0E0' : '#D1D1D1')\n        .attr('stroke-width', (d, i) => i % 2 ? 0.5 : 0.8)\n        .attr('class', (d, i) => i % 2 ? 'minor' : 'major')\n        .attr('opacity', 0)  // disabled by default\n}\n\n/**\n * Apply a grid mode to the y axis\n * @param {'None' | 'Major' | 'Major + Minor'} mode the mode\n */\nboxvio_chart_wrapper.prototype.apply_ygrid_mode = function (mode) {\n    const major_lines = this._graphics.yaxis_g.selectAll('g.tick line.major')\n    const minor_lines = this._graphics.yaxis_g.selectAll('g.tick line.minor')\n    switch (mode) {\n        case 'None':\n            if (major_lines.attr('opacity') == 1) {\n                toggle_visibility(major_lines)\n            }\n            if (minor_lines.attr('opacity') == 1) {\n                toggle_visibility(minor_lines)\n            }\n            break\n        case 'Major':\n            if (major_lines.attr('opacity') == 0) {\n                toggle_visibility(major_lines)\n            }\n            if (minor_lines.attr('opacity') == 1) {\n                toggle_visibility(minor_lines)\n            }\n            break\n        case 'Major + Minor':\n            if (major_lines.attr('opacity') == 0) {\n                toggle_visibility(major_lines)\n            }\n            if (minor_lines.attr('opacity') == 0) {\n                toggle_visibility(minor_lines)\n            }\n            break\n        default:\n            throw new Error(`Grid mode '${mode}' is not supported?`)\n    }\n}\n\n/**\n * Apply an angle to the xtick labels\n * @function\n */\nboxvio_chart_wrapper.prototype.apply_xticklabel_angle = function () {\n    const angle = this._chart.xticklabel_angle\n    const xaxis_g = this._graphics.xaxis_g\n    if (angle < 10) {\n        xaxis_g.selectAll('text')\n            .attr('text-anchor', 'middle')\n            .attr(\"dy\", \"0.8em\")\n            .attr(\"dx\", \"0\")\n            .attr('transform', `rotate(${-this._chart.xticklabel_angle})`)\n    } else {\n        xaxis_g.selectAll('text')\n            .attr('text-anchor', 'end')\n            .attr(\"dy\", `${-angle*angle*0.00006172839}em`)\n            .attr(\"dx\", \"-0.9em\")\n            .attr('transform',\n                `rotate(${-this._chart.xticklabel_angle})`\n            )\n        if (angle < 50) {\n            xaxis_g.selectAll('text')\n                .attr('dx', '-0.7em')\n        }\n    }\n}\n\n/**\n * Render the violins\n * @function\n * @private\n * @param {boolean} is_g_ready whether the g tag for violins is\n *        set up (default: `false`)\n * @name boxvio_chart_wrapper#_render_violins\n */\nboxvio_chart_wrapper.prototype._render_violins = function (is_g_ready=false) {\n\n    const chart = this._chart\n    const g = this._graphics.root_g\n\n    // Render\n    if (!is_g_ready) {\n        this._graphics.violins_g = g.append('g')\n    }\n    const violins_g = this._graphics.violins_g\n    for (const name of Object.keys(chart.bins)) {\n        this._graphics.violins[name] = violins_g.append('g')\n            .attr('transform', `translate(${chart.xscale(name)},0)`)\n        this._render_violin(name)\n    }\n\n}\n\n/**\n * Render the violins\n * @function\n * @private\n * @param {boolean} is_g_ready whether the g tag for violins is\n *        set up (default: `false`)\n * @name boxvio_chart_wrapper#_render_violins\n */\nboxvio_chart_wrapper.prototype._render_violin = function (name) {\n    const bins = this._chart.bins[name]\n    const violin_scale = this._chart.violin_scale\n    const bandwidth = this._chart.xscale.bandwidth()\n    const yscale = this._chart.yscale\n    const violin_curve = this._chart.violin_curve\n\n    // Get the largest count in a bin as it will be maximum width\n    const max_count = d3.max(bins, (bin) => bin.length)\n    // Make a linear scale to map bin counts to bandwidth\n    const x_num = d3.scaleLinear()\n        .range([0, bandwidth])\n        .domain([-max_count, max_count])\n\n    // Only render violin if there is more than 1 datapoint (otherwise there are NaNs around)\n    if (this._data_flat[name].length > 1) {\n        this._graphics.violins[name]\n            .append('path')\n            .datum(bins)\n                .style('stroke', 'gray')\n                .style('stroke-width', 0.4)\n                .style('fill', '#d2d2d2')\n                .attr('d', d3.area()\n                    .x0((d) => x_num(-d.length*violin_scale))\n                    .x1((d) => x_num(d.length*violin_scale))\n                    .y((d) => yscale(d.x0))\n                    .curve(violin_curve)\n                )\n    }\n}\n\n/**\n * Render the boxes (including whiskers and outliers)\n * @function\n * @private\n * @param {boolean} is_g_ready whether the g tag for boxes is\n *        set up (default: `false`)\n * @name boxvio_chart_wrapper#_render_boxes\n */\nboxvio_chart_wrapper.prototype._render_boxes = function (is_g_ready=false) {\n\n    const chart = this._chart\n    const g = this._graphics.root_g\n\n    // Draw\n    if (!is_g_ready) {\n        this._graphics.boxes_g = g.append('g')\n    }\n    const boxes = this._graphics.boxes_g\n    const bandwidth = chart.xscale.bandwidth()\n    const box_width = this._chart.box_scale * bandwidth\n\n    const whiskers_lw = 2\n    const median_lw = 3\n\n    // Iterate over the groups\n    for (const [i, name] of Object.entries(this._cg_names)) {\n\n        const metrics = this._metrics[name]\n        const color = this._colors[i]\n\n        const group_box = boxes.append('g')\n            .attr('transform', `translate(${chart.xscale(name) + bandwidth / 2},0)`)\n\n        // Draw outliers\n        this._graphics.outliers[name] = group_box.append('g')\n        const outliers = this._graphics.outliers[name]\n        for (const outlier of this._outliers[name]) {\n            outliers.append('circle')\n                .attr('cx', 0)\n                .attr('cy', chart.yscale(outlier))\n                .attr('r', 4)\n                .style('fill', color)\n                .style('opacity', 0.7)\n        }\n\n        // Draw whiskers\n        const whiskers = group_box.append('g')\n        whiskers.append('line')  // vertical line\n            .attr('x1', 0)\n            .attr('y1', chart.yscale(metrics.lower_fence))\n            .attr('x2', 0)\n            .attr('y2', chart.yscale(metrics.upper_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n        whiskers.append('line') // lower horizontal\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.lower_fence))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.lower_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n        whiskers.append('line') // upper horizontal\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.upper_fence))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.upper_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n\n        // Draw IQR box\n        const iqr = group_box.append('g')\n        iqr.append('rect')  // iqr rect\n            .attr('x', -box_width / 2)\n            .attr('y', chart.yscale(metrics.quartile3))\n            .attr('width', box_width)\n            .attr('height', chart.yscale(metrics.quartile1) - chart.yscale(metrics.quartile3))\n            .attr('fill', color)\n        iqr.append('line')  // median line\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.median))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.median))\n            .attr('stroke', 'black')\n            .attr('stroke-width', median_lw)\n        iqr.append('circle')  // median dot\n            .attr('cx', 0)\n            .attr('cy', chart.yscale(metrics.median))\n            .attr('r', 4.5)\n            .style('fill', 'white')\n            .attr('stroke', 'black')\n            .attr('stroke-width', 2)\n    }\n\n}\n\n/**\n * Render the control panel\n * @function\n * @protected\n * @name boxvio_chart_wrapper#render_control_panel\n */\nboxvio_chart_wrapper.prototype.render_control_panel = function () {\n    d3_chart_wrapper.prototype.render_control_panel.call(this)\n\n    this._render_grid_select()\n    this._render_xticklabel_angle_slider()\n    this._render_violin_curve_selector()\n    this._render_checkboxes()\n    this._render_scale_sliders()\n    this._render_n_bins_control()\n\n}\n\nboxvio_chart_wrapper.prototype._render_grid_select = function () {\n    const grid_select_id = `${this.id_string()}_grid_select`\n    const grid_select = common.create_dom_element({\n        element_type: 'select',\n        id: grid_select_id,\n        parent: this.controls_container,\n        // TODO: add ARIA attributes?\n    })\n    for (const mode of ['None', 'Major', 'Major + Minor']) {\n        common.create_dom_element({\n            element_type: 'option',\n            value: mode,\n            text_content: mode,\n            parent: grid_select,\n        })\n    }\n    grid_select.addEventListener('change', () => {\n        const mode = grid_select.value\n        this.apply_ygrid_mode(mode)\n    })\n}\n\n/**\n * Render the slider for the xticklabel angle\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_xticklabel_angle_slider\n */\nboxvio_chart_wrapper.prototype._render_xticklabel_angle_slider = function () {\n    /** @type {Element} */\n    const xticklabel_angle_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        parent: this.controls_container,\n    })\n    xticklabel_angle_slider.setAttribute('min', 0)\n    xticklabel_angle_slider.setAttribute('max', 90)\n    xticklabel_angle_slider.value = this._chart.xticklabel_angle\n    xticklabel_angle_slider.addEventListener('input', () => {\n        this._chart.xticklabel_angle = Number(xticklabel_angle_slider.value)\n        this.apply_xticklabel_angle()\n    })\n}\n\n/**\n * Render the selector for the violin curve\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_violin_curve_selector\n */\nboxvio_chart_wrapper.prototype._render_violin_curve_selector = function () {\n    const curve_select_id = `${this.id_string()}_curve_select`\n    const curve_select = common.create_dom_element({\n        element_type: 'select',\n        id: curve_select_id,\n        parent: this.controls_container,\n        // TODO: add ARIA attributes?\n    })\n    for (const curve_name of this._chart.supported_curves) {\n        common.create_dom_element({\n            element_type: 'option',\n            value: curve_name,\n            text_content: curve_name,\n            parent: curve_select,\n        })\n    }\n    curve_select.addEventListener('change', () => {\n        this.set_violin_curve(curve_select.value)\n    })\n}\n\n/**\n * Render the checkboxes of the control panel\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_checkboxes\n */\nboxvio_chart_wrapper.prototype._render_checkboxes = function () {\n    const show_violins_checkbox_id = `${this.id_string()}_show_violins_checkbox`\n    /**\n     * Checkbox for showing violins\n     * @type {Element}\n     */\n    const show_violins_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: show_violins_checkbox_id,\n        parent: this.controls_container,\n    })\n    show_violins_checkbox.checked = true\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const show_violins_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Show violins',\n        parent: this.controls_container,\n    })\n    show_violins_label.setAttribute('for', show_violins_checkbox_id)\n    show_violins_checkbox.addEventListener('change', () => {\n        toggle_visibility(this._graphics.violins_g)\n    })\n\n    const show_boxes_checkbox_id = `${this.id_string()}_show_boxes_checkbox`\n    /**\n     * Checkbox for showing boxes\n     * @type {Element}\n     */\n     const show_boxes_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: show_boxes_checkbox_id,\n        parent: this.controls_container,\n    })\n    show_boxes_checkbox.checked = true\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const show_boxes_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Show boxes',\n        parent: this.controls_container,\n    })\n    show_boxes_label.setAttribute('for', show_boxes_checkbox_id)\n    show_boxes_checkbox.addEventListener('change', () => {\n        toggle_visibility(this._graphics.boxes_g)\n        // (DISABLED) Disable the checkbox for outliers (defined below)\n        // show_outliers_checkbox.disabled = !show_boxes_checkbox.checked\n    })\n\n    const show_outliers_checkbox_id = `${this.id_string()}_show_outliers_checkbox`\n    /**\n     * Checkbox for showing outliers\n     * @type {Element}\n     */\n    const show_outliers_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: show_outliers_checkbox_id,\n        parent: this.controls_container,\n    })\n    show_outliers_checkbox.checked = true\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const show_outliers_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Show outliers',\n        parent: this.controls_container,\n    })\n    show_outliers_label.setAttribute('for', show_outliers_checkbox_id)\n    show_outliers_checkbox.addEventListener('change', () => {\n        for (const group of Object.values(this._graphics.outliers)) {\n            toggle_visibility(group)\n        }\n    })\n}\n\n/**\n * Render the sliders of the control panel that\n * control the scale of violins and boxes\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_scale_sliders\n */\nboxvio_chart_wrapper.prototype._render_scale_sliders = function () {\n    /**\n     * Slider for violin scale\n     * @type {Element}\n     */\n    const violin_scale_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        // value: this._chart.violin_scale_default,  // This does not work here?\n        parent: this.controls_container,\n    })\n    violin_scale_slider.setAttribute('min', 0)\n    violin_scale_slider.setAttribute('max', 1)\n    violin_scale_slider.setAttribute('step', 0.05)\n    violin_scale_slider.value = this._chart.violin_scale_default\n    violin_scale_slider.addEventListener('input', () => {\n        this.set_violin_scale(Number(violin_scale_slider.value))\n    })\n    /**\n     * Reset button for the violin_scale_slider\n     * @type {Element}\n     */\n    const violin_scale_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    violin_scale_slider_reset.addEventListener('click', () => {\n        violin_scale_slider.value = this._chart.violin_scale_default\n        this.set_violin_scale(Number(violin_scale_slider.value))\n    })\n\n    /**\n     * Slider for box scale\n     * @type {Element}\n     */\n    const box_scale_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        // value: this._chart.box_scale_default,  // This does not work here?\n        parent: this.controls_container,\n    })\n    box_scale_slider.setAttribute('min', 0)\n    box_scale_slider.setAttribute('max', 1)\n    box_scale_slider.setAttribute('step', 0.05)\n    box_scale_slider.value = this._chart.box_scale_default\n    box_scale_slider.addEventListener('input', () => {\n        this.set_box_scale(Number(box_scale_slider.value))\n    })\n    /**\n     * Reset button for the box_scale_slider\n     * @type {Element}\n     */\n    const box_scale_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    box_scale_slider_reset.addEventListener('click', () => {\n        box_scale_slider.value = this._chart.box_scale_default\n        this.set_box_scale(Number(box_scale_slider.value))\n    })\n}\n\n/**\n * Render the control elements to change the number of bins\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_n_bins_control\n */\nboxvio_chart_wrapper.prototype._render_n_bins_control = function () {\n    const group_select_id = `${this.id_string()}_group_select`\n    const group_select = common.create_dom_element({\n        element_type: 'select',\n        id: group_select_id,\n        parent: this.controls_container,\n        // TODO: add ARIA attributes?\n    })\n    for (const name of this._cg_names) {\n        common.create_dom_element({\n            element_type: 'option',\n            value: name,\n            text_content: this._class_names.length > 1 ?\n                          split_class_group_name(name).join(' ') :\n                          split_class_group_name(name)[1],\n            parent: group_select,\n        })\n    }\n    group_select.addEventListener('change', () => {\n        const name = group_select.value\n        violin_n_bins_slider.setAttribute(\n            'max',\n            this._controls.max_bins_multiplier * this._chart.n_bins_default[name]\n        )\n        violin_n_bins_slider.value = this._chart.n_bins[name]\n    })\n\n    const violin_n_bins_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        // value: this._chart.violin_scale_default,  // This does not work here?\n        parent: this.controls_container,\n    })\n    violin_n_bins_slider.setAttribute('min', 1)\n    violin_n_bins_slider.setAttribute(\n        'max',\n        this._controls.max_bins_multiplier * this._chart.n_bins_default[group_select.value]\n    )\n    violin_n_bins_slider.value = this._chart.n_bins[group_select.value]\n    violin_n_bins_slider.addEventListener('input', () => {\n        this.set_n_bins(group_select.value, Number(violin_n_bins_slider.value))\n    })\n\n    const violin_n_bins_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    violin_n_bins_slider_reset.addEventListener('click', () => {\n        const name = group_select.value\n        violin_n_bins_slider.value = this._chart.n_bins_default[name]\n        this.set_n_bins(name, Number(violin_n_bins_slider.value))\n    })\n\n    const violin_all_n_bins_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset all bins',\n        parent: this.controls_container,\n    })\n    violin_all_n_bins_slider_reset.addEventListener('click', () => {\n        const name = group_select.value\n        // Update the value of the slider\n        violin_n_bins_slider.value = this._chart.n_bins_default[name]\n        for (const [name, n_bins] of Object.entries(this._chart.n_bins_default)) {\n            this.set_n_bins(name, n_bins)\n        }\n    })\n}\n\n\n// HELPER FUNCTIONS\n\n/**\n * Compute (boxplot) metrics for the data\n * @param {number[]} values the data values\n * @returns {{\n *  max: number,\n *  upper_fence: number,\n *  quartile3: number,\n *  median: number,\n *  mean: number,\n *  iqr: number,\n *  quartile1: number,\n *  lower_fence: number,\n *  min: number,\n * }}\n */\nfunction calc_metrics(values) {\n    const metrics = {\n        max: null,\n        upper_fence: null,\n        quartile3: null,\n        median: null,\n        mean: null,\n        iqr: null,\n        quartile1: null,\n        lower_fence: null,\n        min: null,\n    }\n\n    metrics.min = d3.min(values)\n    metrics.quartile1 = d3.quantile(values, 0.25)\n    metrics.median = d3.median(values)\n    metrics.mean = d3.mean(values)\n    metrics.quartile3 = d3.quantile(values, 0.75)\n    metrics.max = d3.max(values)\n    metrics.iqr = metrics.quartile3 - metrics.quartile1\n    metrics.lower_fence = metrics.quartile1 - 1.5 * metrics.iqr\n    metrics.upper_fence = metrics.quartile3 + 1.5 * metrics.iqr\n\n    return metrics\n}\n\n/**\n * Join class and group name together\n * @param {string} cname the class name\n * @param {string} gname the group name\n * @returns {string} the join\n */\nfunction join_class_group_name(cname, gname) {\n    return `${cname}_^_${gname}`\n}\n\n/**\n * Split class and group name\n * @param {string} name the combination of class and group name \n * @returns {[number, number]} the class and group name\n */\nfunction split_class_group_name(name) {\n    return name.split('_^_')\n}","/**\n * Get a deep copy of an object\n * @param {Object} obj the object\n * @returns a deep copy of the object\n */\nexport function deepcopy(obj) {\n\treturn JSON.parse(JSON.stringify(obj))\n}","\"use strict\";\n\nimport { chart_wrapper } from \"../chart-wrapper.js\";\n\n/**\n * Chart.js chart wrapper class\n * @class\n * @abstract\n * @param {Element} div_wrapper the div conatining the chart\n * @param {Object} options configuration options\n * @param {boolean} options.display_download whether to display the download panel (default `false`)\n * @param {boolean} options.display_control_panel whether to display the control panel (default `false`)\n * @extends chart_wrapper\n */\nexport function chartjs_chart_wrapper(div_wrapper, options) {\n    if (this.constructor === chartjs_chart_wrapper) {\n        throw new Error(\"Abstract class 'chartjs_chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper.call(this, div_wrapper, options)\n    /**\n     * Canvas instance, will be created during\n     * render\n     * @type {HTMLCanvasElement}\n     * @protected\n     */\n    this.canvas = undefined\n    /**\n     * Chart instance (chart.js)\n     * @protected\n     */\n    this.chart = undefined\n}\n// Set prototype chain\nObject.setPrototypeOf(chartjs_chart_wrapper.prototype, chart_wrapper.prototype)\n\n/**\n * Render the plot\n * \n * Subclasses must call this method at the top\n * of their own implementation. Then, they can make\n * use of the canvas and the chartjs chart instance\n * @name chartjs_chart_wrapper#render_plot\n * @function\n * @protected\n */\nchartjs_chart_wrapper.prototype.render_plot = function () {\n    chart_wrapper.prototype.render_plot.call(this)\n    // Create canvas\n    this.canvas = common.create_dom_element({\n        element_type: 'canvas',\n        id: 'result_graph',\n        class_name: 'o-blue',\n        parent: this.plot_container,\n    })\n    // Set chart instance to undefined\n    this.chart = undefined\n}\n\n/**\n * Get the supported chart export formats\n * @function\n * @returns {string[]} the supported formats\n * @name chartjs_chart_wrapper#get_supported_export_formats\n */\nchartjs_chart_wrapper.prototype.get_supported_export_formats = function () {\n    return ['png']\n}\n\n/**\n * Download the chart as png\n * @param {string} filename the name of the file\n * @function\n * @name chartjs_chart_wrapper#_download_chart_as_png\n */\nchartjs_chart_wrapper.prototype.download_chart_as_png = function (filename) {\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: this.chart.toBase64Image(),\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n}\n\n/**\n * FIXME: this is not working...\n * Download the chart as svg\n * @param {string} filename the name of the file\n * @function\n * @name chartjs_chart_wrapper#_download_chart_as_svg\n */\nchartjs_chart_wrapper.prototype.download_chart_as_svg = function (filename) {\n    // Tweak C2S library\n    this._tweak_c2s()\n    // Get original width and height\n    const width = this.canvas.offsetWidth\n    const height = this.canvas.offsetHeight\n    // TODO: Turn off responsiveness and animations\n    this.chart.options.animation = false\n    this.chart.options.reponsive = false\n    // Replicate chart in C2S space\n    const svgContext = C2S(width, height)\n    const svgChart = new Chart(svgContext, this.chart.config._config)\n    // Download\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: 'data:image/svg+xml;utf8,'\n            + encodeURIComponent(svgContext.getSerializedSvg()),\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n    // TODO: Turn on responsiveness and animations\n    this.chart.options.animation = true\n    this.chart.options.reponsive = true\n}\n\n/**\n * Some tweaks to the canvas2svg library are required for svg export to work\n * \n * Via: https://stackoverflow.com/questions/62249315/export-canvas-to-svg-file\n * @function\n * @private\n * @name chartjs_chart_wrapper#_tweak_c2s\n */\nchartjs_chart_wrapper.prototype._tweak_c2s = function () {\n    C2S.prototype.getContext = function (contextId) {\n        if (contextId === '2d' || contextId === '2D') {\n            return this;\n        }\n        return null;\n    }\n    C2S.prototype.style = function () {\n        return this.__canvas.style;\n    }\n    C2S.prototype.getAttribute = function (name) {\n        return this[name];\n    }\n    C2S.prototype.addEventListener = function (type, listener, eventListenerOptions) {\n        // nothing to do here, but we need this function :)\n    }\n}","\"use strict\";\n\nimport { chartjs_chart_wrapper } from \"./chartjs-chart-wrapper.js\";\nimport { COLOR_PICKER_WIDTH, COLOR_PALETTE } from \"../chart-wrapper.js\";\nimport { compute_n_bins } from \"../compute-n-bins.js\";\n\n/**\n * Histogram wrapper\n * @param {Element}  div_wrapper the div to work in\n * @param {number[]} data the data\n * @param {Object} options configuration options\n * @param {boolean} options.display_download whether to display the download panel (default `false`)\n * @param {boolean} options.display_control_panel whether to display the control panel (default `false`)\n * @param {string} options.xlabel the label for the x-axis (default `null` )\n * @class\n * @extends chartjs_chart_wrapper\n */\nexport function histogram_wrapper(div_wrapper, data, options) {\n    /*\n     * <Function>.call is a method that executes the defined function,\n     * but with the \"this\" variable pointing to the first argument,\n     * and the rest of the arguments being arguments of the function\n     * that is being \"called\". This essentially performs all of\n     * chart_wrapper's constructor logic on histogram_wrapper's \"this\".\n     */\n    chartjs_chart_wrapper.call(this, div_wrapper, options)\n\n    /**\n     * Data values\n     * @type {number[]}\n     * @private\n     */\n    this._data = data\n    /**\n     * Whether to perform a density plot\n     * @type {boolean}\n     * @private\n     */\n    this._density = false\n    /**\n     * Default number of bins\n     * @type {number}\n     * @private\n     */\n    this._n_bins_default = compute_n_bins.sqrt(this._data)\n    /**\n     * Number of bins in the histogram\n     * \n     * Defined as the square root of the\n     * amount of datapoints, computed\n     * during render\n     * @type {number}\n     * @private\n     */\n    this._n_bins = undefined\n    /** Label for the xaxis\n     * @type {string}\n     * @private\n    */\n    this._xlabel = options.xlabel || null\n    /**\n     * Number of decimals to display\n     * @type {number}\n     * @private\n     */\n    this._n_decimals = 3\n    /**\n     * Maximum number of bins as mutiplier of default\n     * @type {number}\n     * @private\n     */\n    this._max_bins_multiplier = 3\n    /**\n     * Default color for the bars in rgba\n     * @type {string}\n     * @private\n     */\n    this._bar_color = COLOR_PALETTE[0]\n}\n// Set prototype chain\nObject.setPrototypeOf(histogram_wrapper.prototype, chartjs_chart_wrapper.prototype)\n\n/**\n * Check whether we are doing a density plot\n * @returns {boolean} `true` if density plot,\n * \t\t\t`false` otherwise\n * @name histogram_wrapper#get_density\n * @function\n */\nhistogram_wrapper.prototype.get_density = function () {\n    return this._density\n}\n\n/**\n * Change the density plot attribute\n * @param density {boolean} `true` if density, `false` otherwise\n * @function\n * @name histogram_wrapper#set_density\n */\nhistogram_wrapper.prototype.set_density = function (density) {\n    this._density = density\n    if (!this.chart) {\n        return\n    }\n    // Update chart\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n    this.chart.data.datasets[0].label = this._get_density_string()\n    this.chart.data.datasets[0].data = plot_data\n    this.chart.options.scales.y.title.text = this._get_density_string()\n    this.chart.update()\n}\n\n/**\n * Get a string representing the plot mode\n * @returns {string} `'Density'` if we are in density\n * \t\t\tmode, `'Frequency'` otherwise\n * @function\n * @private\n * @name histogram_wrapper#_get_density_string\n */\nhistogram_wrapper.prototype._get_density_string = function () {\n    return this._density ? 'Density' : 'Frequency'\n}\n\n/**\n * Get the amount of bins in the histogram\n * @returns {number} the amount of bins\n * @function\n * @name histogram_wrapper#get_n_bins\n */\nhistogram_wrapper.prototype.get_n_bins = function () {\n    return this._n_bins\n}\n\n/**\n * Set a new number of bins for the histogram\n * \n * Updates chart instance accordingly\n * @param {number} n_bins amount of bins\n * @function\n * @name histogram_wrapper#set_n_bins\n */\nhistogram_wrapper.prototype.set_n_bins = function (n_bins) {\n    this._n_bins = n_bins\n    if (!this.chart) {\n        return\n    }\n    // Update chart\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n    this.chart.data.datasets[0].data = plot_data\n    this.chart.options.scales.x.min = data_min\n    this.chart.options.scales.x.max = data_max\n    this.chart.options.scales.x.ticks.stepSize = 2 * half_bin_width\n    this.chart.options.plugins.tooltip.callbacks.title =\n        this._get_tooltip_title_callback(bin_centers, half_bin_width)\n    this.chart.update()\n}\n\n/**\n * Get the color of the bars in the histogram\n * @returns {string} the bar color as an rgba string\n * @function\n * @name histogram_wrapper#get_bar_color\n */\nhistogram_wrapper.prototype.get_bar_color = function () {\n    return this._bar_color\n}\n\n/**\n * Set a new color for the bars in the histogram\n * \n * Updates the chart instance accordingly\n * @param {string} bar_color the new bar color for the histogram\n * @function\n * @name histogram_wrapper#set_bar_color\n */\nhistogram_wrapper.prototype.set_bar_color = function (bar_color) {\n    this._bar_color = bar_color\n    if (!this.chart) {\n        return\n    }\n    this.chart.data.datasets[0].backgroundColor = this._bar_color\n    this.chart.update()\n}\n\n/**\n * Get data needed to generate the chart\n * TODO: there is no need to recompute bin_centers unless the number of bins\n* \t\t has changed\n* @function\n* @name histogram_wrapper#_get_plotting_data\n* @private\n* \n* @returns {[number[], {x: number, y: number}[], number, number, number]}\n* \t\t\tthe bin centers, {bin centers, count per bin}, half of the bin width,\n* \t\t\tthe minimum and maximum of input data\n */\nhistogram_wrapper.prototype._get_plotting_data = function () {\n    const data_max = Math.max(...this._data)\n    const data_min = Math.min(...this._data)\n    const bin_width = (data_max - data_min) / this._n_bins\n    const half_bin_width = 0.5 * bin_width\n    /**\n     * Center of each bin\n     * @type {number[]}\n     */\n    const bin_centers = Array.apply(null, Array(this._n_bins)).map(\n        (value, index) => data_min + (2 * index + 1) * half_bin_width\n    )\n    // We bin with right-open intervals\n    /**\n     * Count per bin\n     * @type {number[]}\n     */\n    let entries = Array.apply(null, Array(this._n_bins)).map(() => 0)\n    for (let i = 0; i < this._data.length; i++) {\n        // If value is max, add it to last bin\n        if (this._data[i] === data_max) {\n            entries[this._n_bins - 1]++\n            continue\n        }\n        // Proceed as usual\n        for (let j = 0; j < this._n_bins; j++) {\n            if (this._data[i] >= bin_centers[j] - half_bin_width\n                && this._data[i] < bin_centers[j] + half_bin_width) {\n                entries[j]++\n                break\n            }\n        }\n    }\n    // Normalize if density\n    if (this._density) {\n        const sum = entries.reduce((partialSum, val) => partialSum + val, 0)\n        for (let j = 0; j < this._n_bins; j++) {\n            entries[j] /= (sum * bin_width);\n        }\n    }\n    return [\n        bin_centers,\n        bin_centers.map((val, i) => ({ x: val, y: entries[i] })),\n        half_bin_width,\n        data_min,\n        data_max,\n    ]\n}\n\n/**\n * Get callback function for tooltip title\n * @param {number[]} bin_centers the bin centers\n * @param {number} half_bin_width half of the bin width\n * @returns the callback function\n * @function\n * @private\n * @name histogram_wrapper#_get_tooltip_title_callback\n */\nhistogram_wrapper.prototype._get_tooltip_title_callback = function (bin_centers, half_bin_width) {\n    // Cannot use `this` inside inner function!!!\n    const xlabel = this._xlabel\n    const n_decimals = this._n_decimals\n    /**\n     * Callback function for the tooltip title\n     * @param {TooltipItem[]} items the tooltip item contexts\n     * @returns {string} the title of the tooltip\n     * @function\n     * @name histogram_wrapper#_get_tooltip_title_callback~inner\n     */\n    const callback = function (items) {\n        if (!items.length) {\n            return ''\n        }\n        const item = items[0]\n        const index = item.dataIndex\n        const min = bin_centers[index] - half_bin_width\n        const max = bin_centers[index] + half_bin_width\n        return `${xlabel}: ${min.toFixed(n_decimals)} `\n            + `- ${max.toFixed(n_decimals)}`\n    }\n    return callback\n}\n\n/**\n * Render the plot\n * @function\n * @protected\n * @name histogram_wrapper#render_plot\n */\nhistogram_wrapper.prototype.render_plot = function () {\n    chartjs_chart_wrapper.prototype.render_plot.call(this)\n\n    this._n_bins = this._n_bins_default\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n\n    // Split chart options\n    const chart_data = {\n        datasets: [{\n            label: this._get_density_string(),\n            data: plot_data,\n            categoryPercentage: 1,\n            barPercentage: 1,\n            backgroundColor: this._bar_color,\n        }],\n    }\n    const scales_options = {\n        x: {\n            type: 'linear',  // otherwise it goes to a category axis...\n            min: data_min,\n            max: data_max,\n            offset: false,\n            grid: {\n                offset: false,\n            },\n            ticks: {\n                stepSize: 2 * half_bin_width,\n                callback: (label, index, labels) => {\n                    return Number(label).toFixed(this._n_decimals)\n                }\n            },\n            title: {\n                display: Boolean(this._xlabel),  // Only display if there is a label\n                text: this._xlabel,\n                font: {\n                    size: 14\n                },\n            }\n        },\n        y: {\n            title: {\n                display: true,\n                text: this._get_density_string(),\n                font: {\n                    size: 14,\n                },\n            },\n        },\n    }\n    const plugins_options = {\n        legend: {\n            display: false,\n        },\n        tooltip: {\n            callbacks: {\n                title: this._get_tooltip_title_callback(bin_centers, half_bin_width),\n            },\n        },\n    }\n\n    // Render the graph\n    this.chart = new Chart(this.canvas, {\n        type: 'bar',\n        data: chart_data,\n        options: {\n            scales: scales_options,\n            plugins: plugins_options,\n            parsing: false,\n            normalized: true,\n        },\n    })\n}\n\n\n/**\n * Render the control panel\n * @function\n * @protected\n * @name histogram_wrapper#render_control_panel\n */\nhistogram_wrapper.prototype.render_control_panel = function () {\n    chartjs_chart_wrapper.prototype.render_control_panel.call(this)\n\n    // Save this histogram wrapper instance, because when we change scope\n    // we may still need to refer to it\n    /**\n     * This histogram_wrapper instance\n     * @type {histogram_wrapper}\n     */\n    const self = this\n    /**\n     * Slider for number of bins\n     * @type {Element}\n     */\n    const slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        value: this._n_bins_default,\n        parent: this.controls_container,\n    })\n    slider.setAttribute('min', 1)\n    slider.setAttribute('max', this._max_bins_multiplier * this._n_bins_default)\n    slider.addEventListener('input', () => {\n        this.set_n_bins(Number(slider.value))\n    })\n    /**\n     * Reset button for the slider\n     * @type {Element}\n     */\n    const slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    slider_reset.addEventListener('click', () => {\n        slider.value = this._n_bins_default\n        this.set_n_bins(Number(slider.value))\n    })\n\n    const density_checkbox_id = `${this.id_string()}_density_checkbox`\n    /**\n     * Checkbox for density plot\n     * @type {Element}\n     */\n    const density_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: density_checkbox_id,\n        parent: this.controls_container,\n    })\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const density_checkbox_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Density',\n        parent: this.controls_container,\n    })\n    density_checkbox_label.setAttribute('for', density_checkbox_id)\n    density_checkbox.addEventListener('change', () => {\n        this.set_density(Boolean(density_checkbox.checked))\n    })\n    /** iro.js color picker */\n    const color_picker_container = common.create_dom_element({\n        element_type: 'div',\n        id: `${this.id_string()}_color_picker_container`,\n        parent: this.controls_container\n    })\n    const color_picker = new window.iro.ColorPicker(color_picker_container, {\n        color: this._bar_color,\n        width: COLOR_PICKER_WIDTH,\n        layoutDirection: 'horizontal',\n        layout: [\n            {\n                component: window.iro.ui.Wheel,\n            },\n            {\n                component: window.iro.ui.Slider,\n            },\n            {\n                component: window.iro.ui.Slider,\n                options: {\n                    sliderType: 'alpha',\n                }\n            },\n        ],\n    })\n    color_picker.on('color:change', function (color) {\n        self.set_bar_color(color.rgbaString)\n    })\n}","/*global tstring, page_globals, Promise, data_manager, common */\n/*eslint no-undef: \"error\"*/\n\n\"use strict\";\n\n\nimport { chart_wrapper } from \"../../lib/charts/chart-wrapper.js\";\nimport { boxvio_chart_wrapper } from \"../../lib/charts/d3/boxvio-chart-wrapper.js\";\nimport { histogram_wrapper } from \"../../lib/charts/chartjs/histogram-wrapper.js\";\n\n\nexport const analysis =  {\n\n\t// Form factory instance\n\tform: null,\n\n\tarea_name\t\t\t\t: null,\n\trow\t\t\t\t\t\t: null,\n\n\t// DOM containers\n\texport_data_container\t\t: null,\n\tform_items_container\t\t: null,\n\tdiameter_chart_container\t: null,\n\tweight_chart_container\t\t: null,\n\n\t/**\n\t * Chart wrapper instance for diameter\n\t * @type {chart_wrapper}\n\t */\n\tdiameter_chart_wrapper: null,\n\t/**\n\t * Chart wrapper instance for weight\n\t * @type {chart_wrapper}\n\t */\n\tweight_chart_wrapper: null,\n\n\n\tset_up : function(options) {\n\n\t\tconst self = this\n\n\t\t// options\n\t\t\tself.area_name\t\t\t\t\t= options.area_name\n\t\t\tself.export_data_container\t\t= options.export_data_container\n\t\t\tself.row\t\t\t\t\t\t= options.row\n\t\t\tself.form_items_container\t\t= options.form_items_container\n\t\t\tself.diameter_chart_container\t= options.diameter_chart_container\n\t\t\tself.weight_chart_container\t\t= options.weight_chart_container\n\n\t\t// form\n\t\tconst form_node = self.render_form()\n\t\tself.form_items_container.appendChild(form_node)\n\n\t\treturn true\n\t},//end set_up\n\n\t/**\n\t * RENDER FORM\n\t */\n\trender_form : function() {\n\n\t\tconst self = this\n\n\t\t// DocumentFragment is like a virtual DOM\n\t\tconst fragment = new DocumentFragment()\n\n\t\t// form_factory instance\n\t\t\tself.form = self.form || new form_factory()\n\n\t\tconst form_row = common.create_dom_element({\n\t\t\telement_type\t: \"div\",\n\t\t\tclass_name\t\t: \"form-row fields\",\n\t\t\tparent\t\t\t: fragment\n\t\t})\n\n\t\t// mint\n\t\t\tself.form.item_factory({\n\t\t\t\tid\t\t\t\t: \"mint\",\n\t\t\t\tname\t\t\t: \"mint\",\n\t\t\t\tlabel\t\t\t: tstring.mint || \"mint\",\n\t\t\t\tq_column\t\t: \"p_mint\",\n\t\t\t\tvalue_wrapper\t: ['[\"', '\"]'], // to obtain [\"value\"] in selected value only\n\t\t\t\teq\t\t\t\t: \"LIKE\",\n\t\t\t\teq_in\t\t\t: \"%\",\n\t\t\t\teq_out\t\t\t: \"%\",\n\t\t\t\tis_term\t\t\t: true,\n\t\t\t\tparent\t\t\t: form_row,\n\t\t\t\tcallback\t\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// number\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"number\",\n\t\t\t\tname \t\t: \"number\",\n\t\t\t\tq_column \t: \"term\",\n\t\t\t\tq_table \t: \"types\",\n\t\t\t\tlabel\t\t: tstring.number_key || \"Number & Key\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tgroup_op \t: '$or',\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// material\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"material\",\n\t\t\t\tname \t\t: \"material\",\n\t\t\t\tq_column \t: \"ref_type_material\",\n\t\t\t\tq_table \t: \"any\",\n\t\t\t\tlabel\t\t: tstring.material || \"material\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// denomination\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"denomination\",\n\t\t\t\tname \t\t: \"denomination\",\n\t\t\t\tq_column \t: \"ref_type_denomination\",\n\t\t\t\tq_table \t: \"any\",\n\t\t\t\tlabel\t\t: tstring.denomination || \"denomination\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\n\t\t// submit button\n\t\t\tconst submit_group = common.create_dom_element({\n\t\t\t\telement_type\t: \"div\",\n\t\t\t\tclass_name\t\t: \"form-group field button_submit\",\n\t\t\t\tparent\t\t\t: fragment\n\t\t\t})\n\t\t\tconst submit_button = common.create_dom_element({\n\t\t\t\telement_type\t: \"input\",\n\t\t\t\ttype\t\t\t: \"submit\",\n\t\t\t\tid\t\t\t\t: \"submit\",\n\t\t\t\tvalue\t\t\t: tstring.search || \"Search\",\n\t\t\t\tclass_name\t\t: \"btn btn-light btn-block primary\",\n\t\t\t\tparent\t\t\t: submit_group\n\t\t\t})\n\t\t\tsubmit_button.addEventListener(\"click\", function (e) {\n\t\t\t\te.preventDefault()\n\t\t\t\tself.form_submit(form)\n\t\t\t})\n\n\t\t// reset button\n\t\t\tconst reset_button = common.create_dom_element({\n\t\t\t\telement_type\t: \"input\",\n\t\t\t\ttype\t\t\t: \"button\",\n\t\t\t\tid\t\t\t\t: \"button_reset\",\n\t\t\t\tvalue\t\t\t: tstring.reset || 'Reset',\n\t\t\t\tclass_name\t\t: \"btn btn-light btn-block secondary button_reset\",\n\t\t\t\tparent\t\t\t: submit_group\n\t\t\t})\n\t\t\treset_button.addEventListener(\"click\", function (e) {\n\t\t\t\te.preventDefault()\n\t\t\t\twindow.location.replace(window.location.pathname);\n\t\t\t})\n\n\t\t// operators\n\t\t\t// fragment.appendChild( forms.build_operators_node() )\n\t\t\tconst operators_node = self.form.build_operators_node()\n\t\t\tfragment.appendChild( operators_node )\n\n\t\t// the form element itself!\n\t\t\tconst form = common.create_dom_element({\n\t\t\t\telement_type\t: \"form\",\n\t\t\t\tid\t\t\t\t: \"search_form\",\n\t\t\t\tclass_name\t\t: \"form-inline\"\n\t\t\t})\n\t\t\tform.appendChild(fragment)\n\n\n\t\treturn form\n\t},//end render_form\n\n\t/**\n\t * FORM SUBMIT\n\t * Form submit launch search\n\t */\n\tform_submit : function(form_obj, options={}) {\n\t\t\n\t\tconst self = this\n\n\t\t// options\n\t\t\tconst scroll_result\t= typeof options.scroll_result===\"boolean\" ? options.scroll_result : true\n\t\t\tconst form_items\t= options.form_items || self.form.form_items\n\n\t\t// build filter\n\t\t\tconst filter = self.form.build_filter({\n\t\t\t\tform_items: form_items\n\t\t\t})\n\t\t\n\t\t// empty filter case\n\t\t\tif (!filter || filter.length<1) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t// scroll to head result\n\t\t\tif (scroll_result) {\n\t\t\t\tthis.diameter_chart_container.scrollIntoView(\n\t\t\t\t\t{behavior: \"smooth\", block: \"start\", inline: \"nearest\"}\n\t\t\t\t);\n\t\t\t}\n\n\t\t// search rows exec against API\n\t\t\tconst js_promise = self.search_rows({\n\t\t\t\tfilter\t\t\t: filter,\n\t\t\t\tlimit\t\t\t: 0,\n\t\t\t\tprocess_result\t: {\n\t\t\t\t\tfn\t\t: 'process_result::add_parents_and_children_recursive',\n\t\t\t\t\tcolumns\t: [{name : \"parents\"}]\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then((parsed_data)=>{\n\n\t\t\t\tevent_manager.publish('form_submit', parsed_data)\n\n\t\t\t\tconsole.log(parsed_data)\n\n\t\t\t\t// const diameters = parsed_data\n\t\t\t\t// \t.map((ele) => ele.full_coins_reference_diameter_max)\n\t\t\t\t// \t.flat()\n\t\t\t\t// \t.filter((v) => v)\n\t\t\t\t// console.log(diameters)\n\n\t\t\t\t// this.diameter_chart_wrapper = new histogram_wrapper(\n\t\t\t\t// \tthis.diameter_chart_container,\n\t\t\t\t// \tdiameters,\n\t\t\t\t// \t{\n\t\t\t\t// \t\txlabel: 'Diameter',\n\t\t\t\t// \t}\n\t\t\t\t// )\n\t\t\t\t// this.diameter_chart_wrapper.render()\n\n\t\t\t\tconst data = {}\n\t\t\t\tfor (const ele of parsed_data) {\n\t\t\t\t\tconst name = ele.ref_type_number\n\t\t\t\t\t// if (!['12', '59', '62', '18','11a','14'].includes(name)) continue\n\t\t\t\t\t// if (!['59', '62'].includes(name)) continue\n\t\t\t\t\tconst tmpData = {}\n\t\t\t\t\tconst calculable = ele.full_coins_reference_calculable\n\t\t\t\t\tconst diameter_max = ele.full_coins_reference_diameter_max\n\t\t\t\t\tconst diameter_min = ele.full_coins_reference_diameter_min\n\t\t\t\t\tconst weight = ele.full_coins_reference_weight\n\t\t\t\t\tif (diameter_max && diameter_max.length) {\n\t\t\t\t\t\ttmpData.diameter_max = diameter_max.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (diameter_min && diameter_min.length) {\n\t\t\t\t\t\ttmpData.diameter_min = diameter_min.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (weight && weight.length) {\n\t\t\t\t\t\ttmpData.weight = weight.filter((v, i) => v && calculable[i])\n\t\t\t\t\t}\n\t\t\t\t\tif (Object.keys(tmpData).length) {\n\t\t\t\t\t\tdata[name] = tmpData\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.log(data)\n\n\t\t\t\t// Weights\n\t\t\t\tconst weights = {}\n\t\t\t\tfor (const [name, props] of Object.entries(data)) {\n\t\t\t\t\tif (props.weight && props.weight.length) {\n\t\t\t\t\t\tweights[name] = props.weight\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.weight_chart_wrapper = new boxvio_chart_wrapper(\n\t\t\t\t\tthis.weight_chart_container,\n\t\t\t\t\tweights,\n\t\t\t\t\t{\n\t\t\t\t\t\tylabel: 'Weight',\n\t\t\t\t\t\toverflow: true,\n\t\t\t\t\t\tdisplay_control_panel: true,\n\t\t\t\t\t\tdisplay_download: true,\n\t\t\t\t\t\tsort_xaxis: true,\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tthis.weight_chart_wrapper.render()\n\n\t\t\t\t// Diameters\n\t\t\t\tconst diameters = {}\n\t\t\t\tfor (const [name, props] of Object.entries(data)) {\n\t\t\t\t\tif (props.diameter_max && props.diameter_max.length) {\n\t\t\t\t\t\tdiameters[name] = props.diameter_max\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.diameter_chart_wrapper = new boxvio_chart_wrapper(\n\t\t\t\t\tthis.diameter_chart_container,\n\t\t\t\t\tdiameters,\n\t\t\t\t\t{\n\t\t\t\t\t\tylabel: 'Diameter',\n\t\t\t\t\t\toverflow: true,\n\t\t\t\t\t\tdisplay_control_panel: true,\n\t\t\t\t\t\tdisplay_download: true,\n\t\t\t\t\t\tsort_xaxis: true,\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tthis.diameter_chart_wrapper.render()\n\n\t\t\t})\n\n\t},\n\n\t/**\n\t * SEARCH_ROWS\n\t * Call to API and load json data results of search\n\t */\n\tsearch_rows : function(options) {\n\n\t\tconst self = this\n\n\t\t// sort vars\n\t\t\tconst filter\t\t\t= options.filter || null\n\t\t\tconst ar_fields\t\t\t= options.ar_fields || [\"*\"]\n\t\t\tconst order\t\t\t\t= options.order || \"norder ASC\"\n\t\t\tconst lang\t\t\t\t= page_globals.WEB_CURRENT_LANG_CODE\n\t\t\tconst process_result\t= options.process_result || null\n\t\t\tconst limit\t\t\t\t= options.limit != undefined\n\t\t\t\t\t\t\t\t\t\t? options.limit\n\t\t\t\t\t\t\t\t\t\t: 30\n\t\t\n\t\treturn new Promise(function(resolve){\n\t\t\t// parse_sql_filter\n\t\t\t\tconst group = []\n\t\t\t// parsed filters\n\t\t\t\tconst sql_filter = self.form.parse_sql_filter(filter)\n\t\t\t// request\n\t\t\t\tconst request_body = {\n\t\t\t\t\tdedalo_get\t\t: 'records',\n\t\t\t\t\ttable\t\t\t: 'catalog',\n\t\t\t\t\tar_fields\t\t: ar_fields,\n\t\t\t\t\tlang\t\t\t: lang,\n\t\t\t\t\tsql_filter\t\t: sql_filter,\n\t\t\t\t\tlimit\t\t\t: limit,\n\t\t\t\t\tgroup\t\t\t: (group.length>0) ? group.join(\",\") : null,\n\t\t\t\t\tcount\t\t\t: false,\n\t\t\t\t\torder\t\t\t: order,\n\t\t\t\t\tprocess_result\t: process_result\n\t\t\t\t}\n\t\t\t\tdata_manager.request({\n\t\t\t\t\tbody : request_body\n\t\t\t\t})\n\t\t\t\t.then((response)=>{\n\t\t\t\t\t// data parsed\n\t\t\t\t\tconst data = page.parse_catalog_data(response.result)\n\n\t\t\t\t\tresolve(data)\n\t\t\t\t})\n\t\t})\n\n\t},\n\n}//end analysis\n\n"],"mappings":"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"}