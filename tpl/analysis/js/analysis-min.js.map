{"version":3,"names":["COLOR_PALETTE","chart_wrapper","div_wrapper","options","this","constructor","Error","_n_charts_created","id","_display_download","display_download","_download_chart_container","undefined","plot_container","_display_control_panel","display_control_panel","controls_container","d3_chart_wrapper","call","svg","toggle_visibility","element","attr","transition","linspace","start","stop","nsteps","delta","d3","range","map","i","prototype","id_string","render","replaceChildren","_render_download_panel","render_plot","render_control_panel","supported_formats","get_supported_export_formats","length","download_chart_container","common","create_dom_element","element_type","class_name","style","display","parent","format_select","width","format","value","text_content","toUpperCase","tstring","download","addEventListener","download_chart","filename","download_func_name","Object","setPrototypeOf","select","append","download_chart_as_svg","svg_data","node","outerHTML","svg_blob","Blob","type","url","URL","createObjectURL","tmpLink","href","setAttribute","click","remove","revokeObjectURL","CURVES","Basis","curveBasis","curveBasisClosed","curveBasisOpen","Bundle","curveBundle","curveBumpX","curveBumpY","Cardinal","curveCardinal","curveCardinalClosed","curveCardinalOpen","curveCatmullRom","curveCatmullRomClosed","curveCatmullRomOpen","Linear","curveLinear","curveLinearClosed","curveMonotoneX","curveMonotoneY","Natural","curveNatural","Step","curveStep","curveStepAfter","curveStepBefore","compute_n_bins","array_equal","arrs","size","arr","slice","sqrt","values","Math","ceil","sturges","log2","rice","pow","doane","n","sigma","std","deviation","mean","sum","skew","abs","scott","max","min","freedman_diaconis","quartile3","quantile","quartile1","iqr","TOOLTIP_STYLE","padding","DEFAULT_FLEX_GAP","DEFAULT_MARGIN","KEY_CHANGE_EVENT_NAME","KEY_CHANGE_EVENT","Event","KEY_CHANGE_LISTENER_CLASS_NAME","boxvio_chart_wrapper","data","key_titles","_overflow","overflow","sort_xaxis","_data","sort","a","b","key","join","localeCompare","ele","entries","metrics","calc_metrics","outliers","filter","v","lower_fence","upper_fence","extent","_data_extent","flat","_key_strings","join_key","_key_size","_key_titles","_colors","_","_ylabel","ylabel","yaxis_padding","_full_width","_full_height","_chart","margin","top","right","bottom","left","height","yscale","scaleLinear","domain","clamp","yticks_division","yaxis","axisLeft","tickFormat","d","toFixed","ticks","violin_scale","initial","box_scale","xscale","scaleBand","xaxis","axisBottom","split_key","split","SPLITTER","xticklabel_angle","n_bins","initial_value","histogram","bin","thresholds","bins","supported_curves","violin_curve","_graphics","root_g","yaxwl_g","xaxis_g","yaxis_g","cdividers_g","violins_g","violins","boxes_g","tooltip_div","_controls","max_bins_multiplier","selected_index","median","_query_data","key_tpl","_get_key_templates","templates_wd","obj","JSON","parse","stringify","concat","Array","fill","templates","tmp_template","template","push","_get_next_key_component_values","pkey","psize","values_wd","current_value","get_index_of_key","findIndex","set_violin_scale","scale","selectAll","_render_violins","set_n_bins","chart","_render_violin","set_violin_curve","curve_name","set_box_scale","_render_boxes","_render_axis","_render_ygrid","_render_key2_dividers","_render_tooltip","g","xaxwl_g","apply_xticklabel_angle","text","angle","apply_ygrid_mode","mode","major_lines","major_opacity","minor_lines","minor_opacity","key2_dividers_g","dividers_g","color","key_tpls","index","queried_data","x","divider_g","is_g_ready","key_string","bandwidth","max_count","x_num","datum","area","x0","x1","y","curve","boxes","box_width","group_box","outlier","whiskers","on","tooltip_hover","tooltip_element","new_node","existing_node","parentNode","insertBefore","nextSibling","k","tooltip_text","html","upper_container","direction","_render_grid_select","_render_xticklabel_angle_slider","_render_violin_curve_selector","_render_checkboxes","_render_scale_sliders","_render_key_selects","_render_n_bins_control","container","select_container","gap","grid_select_id","grid","grid_select","none_f","major","major_minor","slider_container","xticklabel_angle_slider_id","xticklabel_angle_slider","Number","curve_select_id","curve_select","container_div","show_key2_div","show_key2_checkbox_id","show_key2_checkbox","checked","show","toLowerCase","show_violins_div","show_violins_checkbox_id","show_violins_checkbox","show_violins","show_boxes_div","show_boxes_checkbox_id","show_boxes_checkbox","show_boxes","show_outliers_div","show_outliers_checkbox_id","show_outliers_checkbox","show_outliers","group","violin_container_div","violin_scale_slider_id","violin_width","violin_scale_slider","reset","box_container_div","box_scale_slider_id","box_scale_slider","key_selects","populate_key_select","key_select","select_id","j","ks","listeners","getElementsByClassName","dispatchEvent","violin_n_bins_slider_id","violin_resolution","violin_n_bins_slider","reset_all_violins","chartjs_chart_wrapper","canvas","histogram_wrapper","_density","_n_bins_default","_n_bins","_xlabel","xlabel","_n_decimals","_max_bins_multiplier","_bar_color","download_chart_as_png","toBase64Image","_tweak_c2s","offsetWidth","offsetHeight","animation","reponsive","svgContext","C2S","Chart","config","_config","encodeURIComponent","getSerializedSvg","getContext","contextId","__canvas","getAttribute","name","listener","eventListenerOptions","get_density","set_density","density","bin_centers","plot_data","half_bin_width","data_min","data_max","_get_plotting_data","datasets","label","_get_density_string","scales","title","update","get_n_bins","stepSize","plugins","tooltip","callbacks","_get_tooltip_title_callback","get_bar_color","set_bar_color","bar_color","backgroundColor","bin_width","apply","reduce","partialSum","val","n_decimals","items","dataIndex","chart_data","categoryPercentage","barPercentage","scales_options","offset","callback","labels","Boolean","font","plugins_options","legend","parsing","normalized","self","slider","density_checkbox_id","density_checkbox","color_picker_container","window","iro","ColorPicker","layoutDirection","layout","component","ui","Wheel","Slider","sliderType","rgbaString","analysis","form","area_name","row","export_data_container","form_items_container","diameter_chart_container","weight_chart_container","diameter_chart_wrapper","weight_chart_wrapper","set_up","form_node","render_form","appendChild","fragment","DocumentFragment","form_factory","form_row","item_factory","mint","q_column","value_wrapper","eq","eq_in","eq_out","is_term","form_item","activate_autocomplete","table","q_table","number_key","group_op","material","denomination","submit_group","search","e","preventDefault","form_submit","location","replace","pathname","operators_node","build_operators_node","form_obj","scroll_result","form_items","build_filter","scrollIntoView","behavior","block","inline","search_rows","limit","process_result","fn","columns","then","parsed_data","event_manager","publish","console","log","ref_type_number","p_mint","ref_type_material","ref_type_denomination","tmp_data","calculable","full_coins_reference_calculable","diameter_max","full_coins_reference_diameter_max","diameter_min","full_coins_reference_diameter_min","weight","full_coins_reference_weight","tmp_diameter_max","tmp_diameter_min","tmp_weight","keys","weights","diameters","diameter","ar_fields","order","lang","page_globals","WEB_CURRENT_LANG_CODE","Promise","resolve","sql_filter","parse_sql_filter","request_body","dedalo_get","count","data_manager","request","body","response","page","parse_catalog_data","result"],"sources":["../../lib/charts/chart-wrapper.js","../../lib/charts/d3/d3-chart-wrapper.js","../../lib/charts/d3/utils.js","../../lib/charts/compute-n-bins.js","../../lib/charts/utils.js","../../lib/charts/d3/boxvio-chart-wrapper.js","../../lib/charts/chartjs/chartjs-chart-wrapper.js","../../lib/charts/chartjs/histogram-wrapper.js","analysis.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Width (in pixels) of color picker\n * @type {number}\n */\nexport const COLOR_PICKER_WIDTH = 200\n\n/**\n * Default name for the chart -> when exporting,\n * `<name>.<format>`\n * @type {string}\n */\nconst DEFAULT_CHART_NAME = 'chart'\n\n/**\n * Color palette, totally stolen from matplotlib\n * @type {string[]}\n */\nexport const COLOR_PALETTE = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#17becf']\n\n\n/**\n * Chart wrapper class (download panel, plot, and control panel)\n * \n * The `render` method must be called for the chart to be rendered to the DOM!!!\n * \n * Within the provided div wrapper, it will create three divs:\n * 1. If download is supported, a div to containing the download section, with\n *    id `chart<id>_download_chart_container` class `download_chart_container`\n * 2. A div to contain the plot itself, with id `chart<id>_plot_wrapper` class `plot_wrapper` \n * 3. A div to contain the control panel, with id `chart<id>_control_panel` and class `control_panel`\n * \n * It clears the container div during render, so subclasses should work with the dom\n * after the render methods of this superclass (`render_plot` and `render_control_panel`) have been called.\n * In other words, subclasses should override those specific methods instead of the general `render` function\n * \n * Last reminder, the constructor is the place to do data processing exclusively. All rendering to the DOM\n * must be done in the specific render methods. Otherwise, bugs WILL appear.\n * @class\n * @abstract\n * @param {Element} div_wrapper\n * @param {Object} options configuration options\n * @param {boolean} options.display_download whether to display the download panel (default `false`)\n * @param {boolean} options.display_control_panel whether to display the control panel (default `false`)\n */\nexport function chart_wrapper(div_wrapper, options) {\n    if (this.constructor === chart_wrapper) {\n        throw new Error(\"Abstract class 'chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper._n_charts_created++;\n    /**\n     * Unique identifier for the chart.\n     * \n     * Subclasses MUST use this in order to assing IDs\n     * to DOM elements, in order to avoid bugs and cross-chart events\n     * @type {number}\n     * @protected\n     */\n    this.id = chart_wrapper._n_charts_created\n    /**\n     * Div element wrapping the chart itself and\n     * the controls\n     * @type {Element}\n     * @protected\n     */\n    this.div_wrapper = div_wrapper\n    /**\n     * Whether to display the download panel\n     * @type {boolean}\n     * @private\n     */\n    this._display_download = options.display_download || false\n    /**\n     * Div container for chart download\n     * @type {Element}\n     * @private\n     */\n    this._download_chart_container = undefined\n    /**\n     * Div inside the div_wrapper, that just wraps the drawing\n     * @type {Element}\n     * @protected\n     */\n    this.plot_container = undefined\n    /**\n     * Whether to display the control panel\n     * @type {boolean}\n     * @private\n     */\n     this._display_control_panel = options.display_control_panel || false\n    /**\n     * Div container for user controls\n     * Used freely by each subclass\n     * @type {Element}\n     * @protected\n     */\n    this.controls_container = undefined\n}\n\n/**\n * Amount of created charts\n * @type {number}\n * @static\n * @private\n */\nchart_wrapper._n_charts_created = 0;\n\n/**\n * Get a string representing the ID of the chart\n * @returns {string} the id as a string\n *          (`'chart1'`, `'chart2'`, ...)\n */\nchart_wrapper.prototype.id_string = function () {\n    return `chart${this.id}`\n}\n\n/**\n * Render the chart\n * \n * Empties the div wrapper and resets properties\n * \n * Subclasses must call this method at the top\n * of their own implementation\n * @name chart_wrapper#render\n * @function\n * @public\n */\nchart_wrapper.prototype.render = function () {\n    // Save this chart_wrapper intance\n    /**\n     * This chart_wrapper intance\n     * @type {chart_wrapper}\n     */\n    const self = this\n    // Remove all children in the div_wrapper\n    this.div_wrapper.replaceChildren()\n\n    // Create the chart download section\n    if (this._display_download) {\n        this._render_download_panel()\n    }\n\n    // Create the div for wrapping the plot\n    this.render_plot()\n\n    // Create the div for the control panel\n    if (this._display_control_panel) {\n        this.render_control_panel()\n    }\n\n}\n\n/**\n * Render the download panel to the DOM\n * @function\n * @private\n * @name chart_wrapper#_render_download_panel\n */\nchart_wrapper.prototype._render_download_panel = function () {\n    const supported_formats = this.get_supported_export_formats()\n    if (supported_formats.length) {\n        this.download_chart_container = common.create_dom_element({\n            element_type: 'div',\n            id: `${this.id_string()}_download_chart_container`,\n            class_name: 'o-purple download_chart_container',\n            style: {\n                'display': 'flex',\n                'flex-direction': 'row',\n                'justify-content': 'center',\n            },\n            parent: this.div_wrapper,\n        })\n        const format_select = common.create_dom_element({\n            element_type: 'select',\n            id: `${this.id_string()}_chart_export_format`,\n            style: {\n                'width': '75%',\n            },\n            parent: this.download_chart_container,\n            // TODO: add ARIA attributes?\n        })\n        for (const format of supported_formats) {\n            common.create_dom_element({\n                element_type: 'option',\n                value: format,\n                text_content: format.toUpperCase(),\n                parent: format_select,\n            })\n        }\n        const chart_download_button = common.create_dom_element({\n            element_type: 'button',\n            text_content: tstring.download || 'Download',\n            style: {\n                'width': '25%',\n            },\n            parent: this.download_chart_container,\n        })\n        chart_download_button.addEventListener('click', () => {\n            this.download_chart(format_select.value)\n        })\n    }\n}\n\n/**\n * Render the plot to the DOM\n * \n * Subclasses should override this method and make\n * use of the plot container\n * @function\n * @protected\n * @name chart_wrapper#render_plot\n */\nchart_wrapper.prototype.render_plot = function () {\n    this.plot_container = common.create_dom_element({\n        element_type: 'div',\n        id: `${this.id_string()}_plot_container`,\n        class_name: 'o-purple plot_container',\n        parent: this.div_wrapper,\n    })\n}\n\n/**\n * Render the control panel to the DOM\n * \n * Subclasses should override this method and make\n * use of the controls container\n * @function\n * @protected\n * @name chart_wrapper#render_control_panel\n */\nchart_wrapper.prototype.render_control_panel = function () {\n    this.controls_container = common.create_dom_element({\n        element_type: 'div',\n        id: `${this.id_string()}_control_panel`,\n        class_name: 'o-green control_panel',\n        parent: this.div_wrapper,\n    })\n}\n\n/**\n * Download the chart as an image\n * \n * For each supported format in the subclass,\n * @see chart_wrapper#get_supported_export_formats\n * the subclass must implement a method called\n * `download_chart_as_<format>`\n * @param {string} format the image format\n * @function\n * @abstract\n * @name chart_wrapper#download_chart\n */\nchart_wrapper.prototype.download_chart = function (format) {\n    /**\n     * File name for the chart\n     * @type {string}\n     */\n    const filename = `${DEFAULT_CHART_NAME}.${format}`\n    /**\n     * Function name for downloading with the particular format\n     * @type {string}\n     */\n    const download_func_name = `download_chart_as_${format}`\n    if (this[download_func_name] === undefined) {\n        throw new Error(`${download_func_name} is not implemented!`)\n    }\n    this[download_func_name](filename)\n}\n\n/**\n * Get the supported chart export formats\n * \n * Subclasses must return their own supported formats, if any, e.g.,\n * `['png', 'jpg', 'eps']`. If no format is supported, there is no\n * need to override this method.\n * @function\n * @returns {string[]} the supported formats\n * @name chart_wrapper#get_supported_export_formats\n */\nchart_wrapper.prototype.get_supported_export_formats = function () {\n    return []\n}","\"use strict\";\n\nimport { chart_wrapper } from \"../chart-wrapper\";\n\n/**\n * D3 chart wrapper class\n * \n * Appends an `svg` tag to the provided div.\n * \n * Subclasses MUST specify the viewBox of the svg, so that it responds to window resizing\n * The created svg tag has width=100%, spanning the width of the parent element. Subclasses\n * can alter this behavior by modifying the svg after the superclass `render_plot` method has been\n * called\n * @param {Element} div_wrapper the div containing the chart\n * @param {Object} options configuration options\n * @param {boolean} options.display_download whether to display the download panel (default `true`)\n * @param {boolean} options.display_control_panel whether to display the control panel (default `true`)\n * @class\n * @abstract\n * @extends chart_wrapper\n */\nexport function d3_chart_wrapper(div_wrapper, options) {\n    if (this.constructor === d3_chart_wrapper) {\n        throw new Error(\"Abstract class 'd3_chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper.call(this, div_wrapper, options)\n    /**\n     * D3 selection object for the root `svg` tag\n     * @protected\n     */\n    this.svg = undefined\n\n}\n// Set prototype chain\nObject.setPrototypeOf(d3_chart_wrapper.prototype, chart_wrapper.prototype)\n\n/**\n * Render the plot to the DOM\n * \n * Subclasses must call this method at the top\n * of their own implementation. Then, they can\n * make use of the svg d3.selection object\n * @function\n * @protected\n * @name chart_wrapper#render_plot\n */\nd3_chart_wrapper.prototype.render_plot = function () {\n    chart_wrapper.prototype.render_plot.call(this)\n\n    this.svg = d3.select(this.plot_container)\n        .append('svg')\n        // When drawing SVG to canvas with an `Image`, if we don't add version and xmlns the `Image` will never load :(\n        .attr('version', '1.1')\n        .attr('xmlns', 'http://www.w3.org/2000/svg')\n        .attr('width', '100%')\n}\n\n/**\n * Get the supported chart export formats\n * @function\n * @returns {string[]} the supported formats\n * @name d3_chart_wrapper#get_supported_export_formats\n */\nd3_chart_wrapper.prototype.get_supported_export_formats = function () {\n    return ['svg']\n}\n\n/**\n * Download the chart as svg\n * @param {string} filename the name of the file\n * @function\n * @name d3_chart_wrapper#_download_chart_as_svg\n */\nd3_chart_wrapper.prototype.download_chart_as_svg = function (filename) {\n    const svg_data = this.svg.node().outerHTML\n    const svg_blob = new Blob([svg_data], { type: \"image/svg+xml;charset=utf-8\" })\n    const url = URL.createObjectURL(svg_blob)\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: url,\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n    URL.revokeObjectURL(url)\n}","/**\n * Toggle visibility of a d3 selection element\n * @param {d3.selection} element the elememt\n */\nexport function toggle_visibility(element) {\n    if (element.attr('opacity') == 0) {\n        element.transition().attr('opacity', 1)\n    } else {\n        element.transition().attr('opacity', 0)\n    }\n}\n\n/**\n * Get an array of values, evenly spaced over an\n * interval\n * \n * https://gist.github.com/davebiagioni/1ac21feb1c2db04be4e6\n * @param {number} start start value\n * @param {number} stop stop value\n * @param {number} nsteps amount of steps\n * @returns {number[]} the values\n */\nexport function linspace(start, stop, nsteps){\n    const delta = (stop-start)/(nsteps-1)\n    return d3.range(nsteps).map((i) => start+i*delta)\n}\n\n/**\n * Map from name to d3 curve\n * https://github.com/d3/d3/blob/main/API.md#curves\n * @type {Object.<string, d3.curve>}\n */\nexport const CURVES = {\n    // cubic basis spline, repeating the end points\n    'Basis': d3.curveBasis,\n    // a closed cubic basis spline\n    'Basis closed': d3.curveBasisClosed,\n    // a cubic basis spline\n    'Basis open': d3.curveBasisOpen,\n    // a straightened cubic basis spline (works only with d3.line, not d3.area!)\n    'Bundle': d3.curveBundle,\n    // a cubic Bézier spline with horizontal tangents\n    'Bump X': d3.curveBumpX,\n    // a cubic Bézier spline with vertical tangents\n    'Bump Y': d3.curveBumpY,\n    // a cubic cardinal spline, with one-sided difference at each end\n    'Cardinal': d3.curveCardinal,\n    // a closed cubic cardinal spline\n    'Cardinal closed': d3.curveCardinalClosed,\n    // a cubic cardinal spline\n    'Cardinal open': d3.curveCardinalOpen,\n    // a cubic Catmull–Rom spline, with one-sided difference at each end\n    'Catmull-Rom': d3.curveCatmullRom,\n    // a closed cubic Catmull–Rom spline\n    'Catmull-Rom closed': d3.curveCatmullRomClosed,\n    // a cubic Catmull–Rom spline\n    'Catmull-Rom open': d3.curveCatmullRomOpen,\n    // a polyline\n    'Linear': d3.curveLinear,\n    // a closed polyline.\n    'Linear closed': d3.curveLinearClosed,\n    // a cubic spline that, given monotonicity in x, preserves it in y\n    'Monotone X': d3.curveMonotoneX,\n    // a cubic spline that, given monotonicity in y, preserves it in x\n    'Monotone Y': d3.curveMonotoneY,\n    // a natural cubic spline\n    'Natural': d3.curveNatural,\n    // a piecewise constant function\n    'Step': d3.curveStep,\n    // a piecewise constant function\n    'Step after': d3.curveStepAfter,\n    // a piecewise constant function\n    'Step before': d3.curveStepBefore,\n}\n","/**\n * Implements methods for computing the number of\n * bins based on the data values\n * \n * Each method takes an array of data values as input\n * and outputs the number of bins\n * @class\n */\nexport function compute_n_bins() {}\n\n/**\n * Compute number of bins with the square root rule\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.sqrt = function (values) {\n\treturn Math.ceil(Math.sqrt(values.length))\n}\n\n/**\n * Compute number of bins with the Sturges rule\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.sturges = function (values) {\n\treturn Math.ceil(Math.log2(values.length)) + 1\n}\n\n/**\n * Compute number of bins with the Rice rule\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.rice = function (values) {\n\treturn Math.ceil(2*Math.pow(values.length, 1/3))\n}\n\n/**\n * Compute number of bins with Doane's formula\n * \n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.doane = function (values) {\n\tconst n = values.length\n\tif (n < 2) {\n\t\tthrow new Error(\"Doane's rule needs at least 2 datapoints\")\n\t}\n\tconst sigma = Math.sqrt(6*(n-2)/((n+1)*(n+3)))\n\tconst std = d3.deviation(values)\n\tconst mean = d3.mean(values)\n\tconst sum = d3.sum(values)\n\t// The adjusted Fisher-Pearson skewness coefficient\n\t// https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/skewness.htm\n\tconst skew = (Math.sqrt(n*(n+1))/(n-2))*((sum-n*mean)/(n*Math.pow(std, 3)))\n\treturn 1 + Math.ceil(Math.log2(n)) + Math.ceil(Math.log2(1+Math.abs(skew)/sigma))\n}\n\n/**\n * Compute number of bins with Scott's normal\n * reference rule\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.scott = function (values) {\n\tif (values.length < 2) {\n\t\tthrow new Error(\n\t\t\t\"Cannot compute standard deviation of an array with less than 2 values\"\n\t\t)\n\t}\n\treturn Math.ceil(\n\t\t(d3.max(values)-d3.min(values))*Math.pow(values.length, 1/3)/(3.49*d3.deviation(values))\n\t)\n}\n\n/**\n * Compute number of bins with Freedman-Diaconis' choice\n * @param {number[]} values the datapoints\n * @returns {number} the number of bins \n */\ncompute_n_bins.freedman_diaconis = function (values) {\n\tconst quartile3 = d3.quantile(values, 0.75)\n\tconst quartile1 = d3.quantile(values, 0.25)\n\tconst iqr =  quartile3 - quartile1\n\tif (quartile1 === quartile3) {\n\t\tthrow new Error(\"IQR is 0!\")\n\t}\n\treturn Math.ceil(\n\t\t(d3.max(values)-d3.min(values))*Math.pow(values.length, 1/3)/(2*iqr)\n\t)\n}\n","/**\n * Get a deep copy of an object\n * @param {Object} obj the object\n * @returns a deep copy of the object\n */\nexport function deepcopy(obj) {\n\treturn JSON.parse(JSON.stringify(obj))\n}\n\n/**\n * Insert a dom element after another\n * @param {Eleemnt} new_node the new node \n * @param {Element} existing_node the one to add after of\n */\nexport function insert_after(new_node, existing_node) {\n    existing_node.parentNode.insertBefore(new_node, existing_node.nextSibling);\n}\n\n/**\n * Check if arrays are equal\n * @param {any[][]} arrs the arrays to compare\n * @return {boolean} `true` if they are equal,\n * \t\t   `false` otherwise\n */\nexport function array_equal(...arrs) {\n\tif (!arrs.length) {\n\t\tthrow new Error(\"There are no input arrays\")\n\t}\n\tconst size = arrs[0].length\n\tfor (const arr of arrs.slice(1)) {\n\t\tif (arr.length !== size) {\n\t\t\treturn false\n\t\t}\n\t}\n\tfor (let i = 0; i < size; i++) {\n\t\tconst value = arrs[0][i]\n\t\tfor (const arr of arrs.slice(1)) {\n\t\t\tif (arr[i] !== value) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}","\"use strict\";\n\nimport { d3_chart_wrapper } from \"./d3-chart-wrapper\";\nimport { COLOR_PALETTE } from \"../chart-wrapper\";\nimport { toggle_visibility, linspace, CURVES } from \"./utils\";\nimport { compute_n_bins } from \"../compute-n-bins\";\nimport { array_equal, deepcopy, insert_after } from \"../utils\"\n\n\n/**\n * CSS style for the tooltip\n * @type {Object.<string, string | number>}\n */\nconst TOOLTIP_STYLE = {\n    'text-align': 'left',\n    'padding': '0.7em',\n    'padding-left': '0.8em',\n    'font-size': '0.9em',\n    'display': 'none',\n}\n\n/**\n * Default flex gap\n * @type {string}\n */\nconst DEFAULT_FLEX_GAP = '1em'\n/**\n * Default flex gap (bif)\n * @type {string}\n */\nconst DEFAULT_FLEX_GAP_BIG = '3em'\n/**\n * Default margin\n * @type {string}\n */\nconst DEFAULT_MARGIN = '0.7em'\n/**\n * Default margin (big)\n * @type {string}\n */\nconst DEFAULT_MARGIN_BIG = '1em'\n\n/**\n * Name of the key change event\n * @type {string}\n */\nconst KEY_CHANGE_EVENT_NAME = 'ch_key_change'\n/**\n * Key change event\n * @type {Event}\n */\nconst KEY_CHANGE_EVENT = new Event(KEY_CHANGE_EVENT_NAME)\n/**\n * Class name for key change listeners\n * @type {string}\n */\nconst KEY_CHANGE_LISTENER_CLASS_NAME = `${KEY_CHANGE_EVENT_NAME}_listener`\n\n\n/**\n * TODO: make a superclass (in the middle of this and d3_chart_wrapper) called xy-chart-wrapper\n * which manages the axes, grid, and so on. This will be useful if we add other charts that make\n * use of x and y axis\n *\n * Boxplot + violin chart wrapper\n * \n * Inspired in:\n * - http://bl.ocks.org/asielen/d15a4f16fa618273e10f,\n * - https://d3-graph-gallery.com/graph/violin_basicHist.html,\n * - https://d3-graph-gallery.com/graph/boxplot_show_individual_points.html\n * \n * @param {Element} div_wrapper the div to work in\n * @param {{key: string[], values: number[]}[]} data the input data: an array of objects\n *        with key (array of components, from general to specific) and values (the datapoints)\n *        (KEY COMPONENTS MUST NOT INCLUDE `'_^PoT3sRanaCantora_'`, or things WILL break)\n * @param {string[]} key_titles the title for each key component\n * @param {Object} options configuration options\n * @param {boolean} options.display_download whether to display the download panel (default `false`)\n * @param {boolean} options.display_control_panel whether to display the control panel (default `false`)\n * @param {boolean} options.sort_xaxis whether to sort the xaxis (default `false`)\n * @param {string} options.ylabel the y-label (default `null`)\n * @param {boolean} options.overflow whether to go beyond the width of the plot container (default `false`)\n * @param {number} options.xticklabel_angle the angle (in degrees) for the xtick labels (default `0`)\n * @class\n * @extends d3_chart_wrapper\n */\nexport function boxvio_chart_wrapper(div_wrapper, data, key_titles, options) {\n    d3_chart_wrapper.call(this, div_wrapper, options)\n    /**\n     * Whether to go beyond the width of the plot container\n     * @type {boolean}\n     */\n    this._overflow = options.overflow || false\n    const sort_xaxis = options.sort_xaxis || false\n    if (!data.length) {\n        throw new Error(\"Data array is empty\")\n    }\n    /**\n     * Data: key (general to specific components), index, values,\n     * boxplot metrics, outliers, extent (min and max)\n     * @type {{\n     *  key: string[],\n     *  index: number\n     *  values: number[],\n     *  metrics: {\n     *      max: number,\n     *      upper_fence: number,\n     *      quartile3: number,\n     *      median: number,\n     *      mean: number,\n     *      iqr: number,\n     *      quartile1: number,\n     *      lower_fence: number,\n     *      min: number\n     *  },\n     *  outliers: number[],\n     *  extent: [number, number]\n     * }[]}\n     * @private\n     */\n    this._data = sort_xaxis\n                 ? data.sort((a, b) => a.key.join().localeCompare(b.key.join()))\n                 : data\n    for (const [i, ele] of this._data.entries()) {\n        ele.metrics = calc_metrics(ele.values)\n        ele.outliers = ele.values.filter(\n            (v) => v < ele.metrics.lower_fence || v > ele.metrics.upper_fence\n        )\n        ele.extent = d3.extent(ele.values)\n    }\n    /**\n     * Overall Maximum and minimum of the input data\n     * @type {[number, number]}\n     */\n    this._data_extent = d3.extent(this._data.map((ele) => ele.extent).flat())\n    /**\n     * Existing keys as strings\n     * @type {string[]}\n     * @private\n     */\n    this._key_strings = this._data.map((ele) => join_key(ele.key))\n    /**\n     * Number of components of the key\n     * @type {number}\n     * @private\n     */\n    this._key_size = data[0].key.length\n    /**\n     * Title for each key component\n     * @type {string[]}\n     * @private\n     */\n    this._key_titles = key_titles\n    /**\n     * Colors\n     * @type {string[]}\n     * @private\n     */\n    this._colors = this._data.map((_, i) => COLOR_PALETTE[i % COLOR_PALETTE.length])\n    /**\n     * The label for the y axis\n     * @type {string}\n     * @private\n     */\n    this._ylabel = options.ylabel || null\n    /**\n     * Padding for the y axis, to account for the label and ticks\n     * @type {number}\n     */\n    this.yaxis_padding = this._ylabel ? 62 : 35;\n    /**\n     * Full width of svg\n     * @type {number}\n     */\n    this._full_width = this._data.length < 150\n        ? 330.664701211*Math.sqrt(this._data.length) - 170.664701211 + this.yaxis_padding\n        : 26*this._data.length + this.yaxis_padding\n    /**\n     * Full height of svg\n     * @type {number}\n     */\n    this._full_height = 453\n    /**\n     * Non-graphic components of the chart: setting, scales,\n     * axis generators, spacing, etc.\n     * @private\n     * @type {{\n     *  margin: {\n     *      top: number,\n     *      right: number,\n     *      bottom: number,\n     *      left: number\n     *  },\n     *  width: number,\n     *  height: number,\n     *  yscale: d3.scaleLinear,\n     *  yticks_division: number,\n     *  yaxis: d3.axisGenerator,\n     *  violin_scale: {initial: number, value: number},\n     *  box_scale: {initial: number, value: number},\n     *  xscale: d3.scaleBand,\n     *  xaxis: d3.axisGenerator,\n     *  xticklabel_angle: number,\n     *  n_bins: {initial: number, value: number}[],\n     *  histogram: d3.binGenerator[],\n     *  bins: d3.Bin[][],\n     *  supported_curves: string[],\n     *  violin_curve: string\n     * }}\n     */\n    this._chart = {}\n    this._chart.margin = { top: 15, right: 4, bottom: 61, left: this.yaxis_padding }\n    this._chart.width = this._full_width - this._chart.margin.left - this._chart.margin.right\n    this._chart.height = this._full_height - this._chart.margin.top - this._chart.margin.bottom\n    this._chart.yscale = d3.scaleLinear()\n        .range([this._chart.height, 0])\n        .domain(this._data_extent)\n        .clamp(true)  // when input outside of domain, its output is clamped to range\n    this._chart.yticks_division = 2  // TODO: make this part of the input options object\n    // TODO: make number of decimals and number of ticks part of input options object\n    this._chart.yaxis = d3.axisLeft(this._chart.yscale)\n        .tickFormat((d, i) => i % this._chart.yticks_division ? '' : d.toFixed(1))\n        .ticks(19)\n    this._chart.violin_scale = {initial: 0.8, value: 0.8}\n    this._chart.box_scale = {initial: 0.3, value: 0.3}\n    this._chart.xscale = d3.scaleBand()\n        .domain(this._key_strings)\n        .range([0, this._chart.width])\n        // .padding(1-this._chart.violin_scale)     // This is important: it is the space between 2 groups. 0 means no padding. 1 is the maximum.\n    this._chart.xaxis = d3.axisBottom(this._chart.xscale)\n        .tickFormat((d) => split_key(d)[1])\n    this._chart.xticklabel_angle = options.xticklabel_angle || 0\n    this._chart.n_bins = this._data.map((ele) => {\n        const initial_value = compute_n_bins.sturges(ele.values)\n        return {\n            initial: initial_value,\n            value: initial_value,\n        }\n    })\n    this._chart.histogram = this._data.map((ele, i) => {\n        return d3.bin().domain(ele.extent)\n            .thresholds(\n                linspace(ele.extent[0], ele.extent[1], this._chart.n_bins[i].value+1)\n            )\n    })\n    this._chart.bins = this._data.map((ele, i) => {\n        return this._chart.histogram[i](ele.values)\n    })\n    this._chart.supported_curves = [\n        'Basis', 'Bump Y', 'Cardinal', 'Catmull-Rom', 'Linear',\n        'Monotone Y', 'Natural', 'Step'\n    ]\n    this._chart.violin_curve = CURVES[this._chart.supported_curves[0]]\n    /**\n     * Graphic components of the chart\n     * @private\n     * @type {{\n     *  root_g: d3.selection,\n     *  xaxwl_g: d3.selection\n     *  xaxis_g: d3.selection,\n     *  yaxwl_g: d3.selection,\n     *  yaxis_g: d3.selection,\n     *  key2_dividers_g: d3.selection,\n     *  violins_g: d3.selection,\n     *  violins: d3.selection[],\n     *  boxes_g: d3.selection,\n     *  outliers: d3.selection[],\n     *  tooltip_div: d3.selection\n     * }}\n     */\n    this._graphics = {\n        // Root g tag (translated to account for the margins)\n        root_g: null,\n        // g tag for the x-axis and label\n        yaxwl_g: null,\n        // g tag for the x-axis\n        xaxis_g: null,\n        // g tag for the y-axis and label\n        yaxwl_g: null,\n        // g tag for the y-axis\n        yaxis_g: null,\n        // g tag for the class dividers\n        cdividers_g: null,\n        // g tag grouping all violins\n        violins_g: null,\n        // individual g tag for each violin\n        violins: [],\n        // g tag grouping all boxes\n        boxes_g: null,\n        // per group: g tag grouping all outliers of each box\n        outliers: [],\n        // div tag of the tooltip\n        tooltip_div: null,\n    }\n    /**\n     * Control panel things\n     * TODO: if modifying a particular violin gets slow\n     * because we have to fetch it based on key, we can\n     * keep track of the selected one so that we only fetch\n     * if when the selected key changes. Or something like that\n     * @private\n     * @type {{\n     *  max_bins_multiplier: number,\n     *  selected_index: number\n     * }}\n     */\n    this._controls = {}\n    this._controls.max_bins_multiplier = 3\n    this._controls.selected_index = 0\n}\n// Set prototype chain\nObject.setPrototypeOf(boxvio_chart_wrapper.prototype, d3_chart_wrapper.prototype)\n\n/**\n * Query the data given a key template\n * @param {string[]} key_tpl the key template. Parts will be matched,\n * `null` counts as wildcard\n * @return {{\n *  key: string[],\n *  values: number[],\n *  metrics: {\n *      max: number,\n *      upper_fence: number,\n *      quartile3: number,\n *      median: number,\n *      mean: number,\n *      iqr: number,\n *      quartile1: number,\n *      lower_fence: number,\n *      min: number\n *  },\n *  outliers: number[],\n *  extent: [number, number]\n * }[]} the filtered data\n */\nboxvio_chart_wrapper.prototype._query_data = function (key_tpl) {\n    if (key_tpl.length !== this._key_size) {\n        throw new Error(\"Key template is of different size than the plot keys\")\n    }\n    return this._data.filter((ele) => {\n        const key = ele.key\n        for (let i = 0; i < key.length; i++) {\n            if (key_tpl[i] && key_tpl[i] !== key[i]) {\n                return false\n            }\n        }\n        return true\n    })\n}\n\n/**\n * Get key templates up to a key number\n * @param {number} i the key number. If 1, all existing keys\n *        will be returned. If 2, all existing keys with a wildcard in\n *        the last component will be returned. If 3, all existing keys\n *        with a wildcard in the last and second-to-last component will\n *        be returned.\n * @returns {string[][]} the templates\n */\nboxvio_chart_wrapper.prototype._get_key_templates = function (i) {\n    if (i < 1 || i > this._key_size) {\n        throw new Error(`Invalid key number ${i}`)\n    }\n    // Convert to real index\n    i = this._key_size - i\n    const templates_wd = this._data.map((ele) => {\n        return deepcopy(ele.key.slice(0,i+1)).concat(Array(this._key_size-i-1).fill(null))\n    })\n    if (!templates_wd.length) return templates_wd\n    // Remove duplicates\n    const templates = [templates_wd[0]]\n    let tmp_template = templates_wd[0]\n    for (const template of templates_wd.slice(1)) {\n        if (!array_equal(tmp_template, template)) {\n            templates.push(template)\n            tmp_template = template\n        }\n    }\n    return templates\n}\n\n/**\n * Get the possible values of the next key component, given a partial key.\n * E.g., if there are 4 components, and you provide the two leftmost ones\n * in the partial key, possible values for the third leftmost one will be\n * given\n * @param {string[]} pkey partial key\n * @returns {string[]} possible values for the next key component\n */\nboxvio_chart_wrapper.prototype._get_next_key_component_values = function (pkey) {\n    const psize = pkey.length\n    if (psize >= this._key_size) {\n        throw new Error(`Input key ${pkey} is longer than the data keys`)\n    }\n    const key_tpl = pkey.concat(Array(this._key_size-psize).fill(null))\n    const values_wd = this._query_data(key_tpl).map((ele) => ele.key[psize])\n    if (!values_wd.length) return values_wd\n    const values = [values_wd[0]]\n    let current_value = values_wd[0]\n    for (const value of values_wd.slice(1)) {\n        if (value !== current_value) {\n            values.push(value)\n            current_value = value\n        }\n    }\n    return values\n}\n\n/**\n * Get the index of a key\n * @param {string[]} key the key \n * @returns the index of the key\n */\nboxvio_chart_wrapper.prototype.get_index_of_key = function (key) {\n    const i = this._data.findIndex((ele) => ele.key.join() === key.join())\n    if (i === -1) {\n        throw new Error(`Key ${key} was not found in data`)\n    }\n    return i\n}\n\n/**\n * Set the scale for the violins\n * @function\n * @param {number} scale the scale [0, 1]\n * @name boxvio_chart_wrapper#set_violin_scale\n */\nboxvio_chart_wrapper.prototype.set_violin_scale = function (scale) {\n    this._chart.violin_scale.value = scale\n    // Remove the violin graphics, only leaving its root g tag (violins_g)\n    this._graphics.violins_g.selectAll('*').remove()\n    this._render_violins(true)\n}\n\n/**\n * Set the number of bins for a particular violin\n * \n * Updates the chart accordingly\n * @param {number} i the index of the violin\n * @param {number} n_bins number of bins\n * @name boxvio_chart_wrapper#set_n_bins\n */\nboxvio_chart_wrapper.prototype.set_n_bins = function (i, n_bins) {\n    const chart = this._chart\n    const extent = this._data[i].extent\n    chart.n_bins[i].value = n_bins\n    chart.histogram[i].thresholds(\n        linspace(extent[0], extent[1], n_bins+1)\n    )\n    chart.bins[i] = chart.histogram[i](this._data[i].values)\n    // Delete the oath of the existing violin and redraw\n    this._graphics.violins[i].selectAll('*').remove()\n    this._render_violin(i)\n}\n\n/**\n * Set the curve for the violins\n * \n * Updates the chart accordingly\n * @param {string} curve_name name of the curve \n * @name boxvio_chart_wrapper#set_violin_curve\n */\nboxvio_chart_wrapper.prototype.set_violin_curve = function (curve_name) {\n    this._chart.violin_curve = CURVES[curve_name]\n    // Remove the violin graphics, only leaving its root g tag (violins_g)\n    this._graphics.violins_g.selectAll('*').remove()\n    this._render_violins(true)\n}\n\n/**\n * Set the scale for the boxes\n * @function\n * @param {number} scale the scale [0, 1]\n * @name boxvio_chart_wrapper#set_box_scale\n */\nboxvio_chart_wrapper.prototype.set_box_scale = function (scale) {\n    this._chart.box_scale.value = scale\n    // Remove the box graphics, only leaving its root g tag (boxes_g)\n    this._graphics.boxes_g.selectAll('*').remove()\n    this._render_boxes(true)\n}\n\n/**\n * Render the plot\n * @function\n * @protected\n * @name boxvio_chart_wrapper#render_plot\n */\nboxvio_chart_wrapper.prototype.render_plot = function () {\n    d3_chart_wrapper.prototype.render_plot.call(this)\n\n    if (this._overflow) {\n        this.svg.attr('width', null)\n        this.svg.attr('height', '500px')\n        this.plot_container.style = \"overflow: auto;\"\n    }\n\n    // Set viewBox of svg\n    this.svg.attr('viewBox', `0 0 ${this._full_width} ${this._full_height}`)\n\n    // Root g tag\n    this._graphics.root_g = this.svg.append('g')\n        .attr('transform', `translate(${this._chart.margin.left},${this._chart.margin.top})`)\n\n    this._render_axis()\n    this._render_ygrid()\n    if (this._key_size > 1) {\n        this._render_key2_dividers()\n    }\n    this._render_violins()\n    this._render_boxes()\n    this._render_tooltip()\n\n}\n\n/**\n * Render the axis\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_axis\n */\nboxvio_chart_wrapper.prototype._render_axis = function () {\n    const g = this._graphics.root_g\n    // Render X axis\n    this._graphics.xaxwl_g = g.append('g')\n        .attr('transform', `translate(0,${this._chart.height})`)\n    const xaxwl_g = this._graphics.xaxwl_g\n    this._graphics.xaxis_g = xaxwl_g.append('g')\n        .call(this._chart.xaxis)\n    this.apply_xticklabel_angle()\n    // Render X axis label\n    xaxwl_g.append('text')\n        .attr('text-anchor', 'middle')\n        .attr('y', 50)\n        .attr('x', this._chart.width / 2)\n        .text(this._key_titles[this._key_titles.length-1])\n    \n    // Render y axis\n    this._graphics.yaxwl_g = g.append('g')\n    const yaxwl_g = this._graphics.yaxwl_g\n    this._graphics.yaxis_g = yaxwl_g.append('g')\n        .call(this._chart.yaxis)\n    // Render Y axis label\n    yaxwl_g.append('text')\n        .attr('text-anchor', 'middle')\n        .attr('transform', 'rotate(-90)')\n        .attr('y', -this._chart.margin.left + 20)\n        .attr('x', -this._chart.height / 2)\n        .text(this._ylabel)\n\n}\n\n/**\n * Apply an angle to the xtick labels\n * @function\n * @name boxvio_chart_wrapper#apply_xticklabel_angle\n */\nboxvio_chart_wrapper.prototype.apply_xticklabel_angle = function () {\n    const angle = this._chart.xticklabel_angle\n    const xaxis_g = this._graphics.xaxis_g\n    if (angle < 10) {\n        xaxis_g.selectAll('text')\n            .attr('text-anchor', 'middle')\n            .attr(\"dy\", \"0.8em\")\n            .attr(\"dx\", \"0\")\n            .attr('transform', `rotate(${-this._chart.xticklabel_angle})`)\n    } else {\n        xaxis_g.selectAll('text')\n            .attr('text-anchor', 'end')\n            .attr(\"dy\", `${-angle*angle*0.00006172839}em`)\n            .attr(\"dx\", \"-0.9em\")\n            .attr('transform',\n                `rotate(${-this._chart.xticklabel_angle})`\n            )\n        if (angle < 50) {\n            xaxis_g.selectAll('text')\n                .attr('dx', '-0.7em')\n        }\n    }\n}\n\n/**\n * Render the grid for the y-axis\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_ygrid\n */\nboxvio_chart_wrapper.prototype._render_ygrid = function () {\n    const ticks = this._graphics.yaxis_g.selectAll('g.tick')\n    ticks.append('line')\n        .attr('x1', 0)\n        .attr('y1', 0)\n        .attr('x2', this._chart.width)\n        .attr('y2', 0)\n        .attr('stroke', (_, i) => i % 2 ? '#E0E0E0' : '#D1D1D1')\n        .attr('stroke-width', (_, i) => i % 2 ? 0.5 : 0.8)\n        .attr('class', (_, i) => i % 2 ? 'minor' : 'major')\n        .attr('opacity', 0)  // disabled by default\n}\n\n/**\n * Apply a grid mode to the y axis\n * @param {'None' | 'Major' | 'Major + Minor'} mode the mode\n * @function\n * @name boxvio_chart_wrapper#apply_ygrid_mode\n */\nboxvio_chart_wrapper.prototype.apply_ygrid_mode = function (mode) {\n    const major_lines = this._graphics.yaxis_g.selectAll('g.tick line.major')\n    const major_opacity = major_lines.attr('opacity')\n    const minor_lines = this._graphics.yaxis_g.selectAll('g.tick line.minor')\n    const minor_opacity = minor_lines.attr('opacity')\n    switch (mode) {\n        case 'None':\n            if (major_opacity == 1) {\n                toggle_visibility(major_lines)\n            }\n            if (minor_opacity == 1) {\n                toggle_visibility(minor_lines)\n            }\n            break\n        case 'Major':\n            if (major_opacity == 0) {\n                toggle_visibility(major_lines)\n            }\n            if (minor_opacity == 1) {\n                toggle_visibility(minor_lines)\n            }\n            break\n        case 'Major + Minor':\n            if (major_opacity == 0) {\n                toggle_visibility(major_lines)\n            }\n            if (minor_opacity == 0) {\n                toggle_visibility(minor_lines)\n            }\n            break\n        default:\n            throw new Error(`Grid mode '${mode}' is not supported?`)\n    }\n}\n\n/**\n * Render the dividers for key2\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_key2_dividers\n */\nboxvio_chart_wrapper.prototype._render_key2_dividers = function () {\n    this._graphics.key2_dividers_g = this._graphics.root_g.append('g')\n    const dividers_g = this._graphics.key2_dividers_g\n    const color = 'gray'\n    const key_tpls = this._get_key_templates(2)\n\n    let i = 0;\n    for (const [index, key_tpl] of key_tpls.entries()) {\n        const queried_data = this._query_data(key_tpl)\n        const x = this._chart.xscale(this._key_strings[i])\n        const divider_g = dividers_g.append('g')\n            .attr('transform', `translate(${x},0)`)\n        if (index !== 0) {\n            divider_g.append('line')\n                .attr('x1', 0)\n                .attr('y1', 0)\n                .attr('x2', 0)\n                .attr('y2', this._chart.height)\n                .attr('stroke', color)\n                .attr('stroke-width', 0.9)\n                .attr('stroke-dasharray', this._chart.height/35)\n        }\n        divider_g.append('text')\n            .attr('text-anchor', 'end')\n            .attr('transform', 'rotate(-90)')\n            .attr('y', '1.3em')  // This is the horizontal axis now\n            .attr('x', '-0.6em')  // This is the vertical axis now\n            .attr('font-size', '0.8em')\n            .attr('fill', color)\n            .text(key_tpl[key_tpl.length-2])\n        // Increase the index by the number of groups in the class\n        i += queried_data.length\n    }\n}\n\n/**\n * Render the violins\n * @function\n * @private\n * @param {boolean} is_g_ready whether the g tag for violins is\n *        set up (default: `false`)\n * @name boxvio_chart_wrapper#_render_violins\n */\nboxvio_chart_wrapper.prototype._render_violins = function (is_g_ready=false) {\n    const chart = this._chart\n    const g = this._graphics.root_g\n\n    // Render\n    if (!is_g_ready) {\n        this._graphics.violins_g = g.append('g')\n    }\n    const violins_g = this._graphics.violins_g\n    for (const [i, key_string] of this._key_strings.entries()) {\n        this._graphics.violins[i] = violins_g.append('g')\n            .attr('transform', `translate(${chart.xscale(key_string)},0)`)\n        this._render_violin(i)\n    }\n\n}\n\n/**\n * Render a violin\n * @function\n * @private\n * @param {boolean} i the index of the violin\n * @name boxvio_chart_wrapper#_render_violins\n */\nboxvio_chart_wrapper.prototype._render_violin = function (i) {\n    const bins = this._chart.bins[i]\n    const violin_scale = this._chart.violin_scale.value\n    const bandwidth = this._chart.xscale.bandwidth()\n    const yscale = this._chart.yscale\n    const violin_curve = this._chart.violin_curve\n\n    // Get the largest count in a bin as it will be maximum width\n    const max_count = d3.max(bins, (bin) => bin.length)\n    // Make a linear scale to map bin counts to bandwidth\n    const x_num = d3.scaleLinear()\n        .range([0, bandwidth])\n        .domain([-max_count, max_count])\n\n    // Only render violin if there is more than 1 datapoint (otherwise there are NaNs around)\n    if (this._data[i].values.length > 1) {\n        this._graphics.violins[i]\n            .append('path')\n            .datum(bins)\n                .style('stroke', 'gray')\n                .style('stroke-width', 0.4)\n                .style('fill', '#d2d2d2')\n                .attr('d', d3.area()\n                    .x0((d) => x_num(-d.length*violin_scale))\n                    .x1((d) => x_num(d.length*violin_scale))\n                    .y((d) => yscale(d.x0))\n                    .curve(violin_curve)\n                )\n    }\n}\n\n/**\n * TODO: refactor\n * Render the boxes (including whiskers and outliers)\n * @function\n * @private\n * @param {boolean} is_g_ready whether the g tag for boxes is\n *        set up (default: `false`)\n * @name boxvio_chart_wrapper#_render_boxes\n */\nboxvio_chart_wrapper.prototype._render_boxes = function (is_g_ready=false) {\n\n    const chart = this._chart\n    const g = this._graphics.root_g\n\n    // Draw\n    if (!is_g_ready) {\n        this._graphics.boxes_g = g.append('g')\n    }\n    const boxes = this._graphics.boxes_g\n    const bandwidth = chart.xscale.bandwidth()\n    const box_width = this._chart.box_scale.value * bandwidth\n\n    const whiskers_lw = 2\n    const median_lw = 3\n\n    // Iterate over the groups\n    for (const [i, ele] of this._data.entries()) {\n\n        const metrics = ele.metrics\n        const color = this._colors[i]\n        const key = ele.key\n\n        const group_box = boxes.append('g')\n            .attr('transform', `translate(${chart.xscale(join_key(key)) + bandwidth / 2},0)`)\n\n        // Draw outliers\n        this._graphics.outliers[i] = group_box.append('g')\n        const outliers = this._graphics.outliers[i]\n        for (const outlier of ele.outliers) {\n            outliers.append('circle')\n                .attr('cx', 0)\n                .attr('cy', chart.yscale(outlier))\n                .attr('r', 4)\n                .style('fill', color)\n                .style('opacity', 0.7)\n        }\n\n        // Draw whiskers\n        const whiskers = group_box.append('g')\n        whiskers.append('line')  // vertical line\n            .attr('x1', 0)\n            .attr('y1', chart.yscale(metrics.lower_fence))\n            .attr('x2', 0)\n            .attr('y2', chart.yscale(metrics.upper_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n        whiskers.append('line') // lower horizontal\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.lower_fence))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.lower_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n        whiskers.append('line') // upper horizontal\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.upper_fence))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.upper_fence))\n            .attr('stroke', color)\n            .attr('stroke-width', whiskers_lw)\n\n        // Draw IQR box\n        const iqr = group_box.append('g')\n        // Only draw rectangle if there is more than 1 datapoint (otherwise NaNs appear)\n        if (ele.values.length > 1) {\n            iqr.append('rect')  // iqr rect\n            .attr('x', -box_width / 2)\n            .attr('y', chart.yscale(metrics.quartile3))\n            .attr('width', box_width)\n            .attr('height', chart.yscale(metrics.quartile1) - chart.yscale(metrics.quartile3))\n            .attr('fill', color)\n        }\n        iqr.append('line')  // median line\n            .attr('x1', -box_width / 2)\n            .attr('y1', chart.yscale(metrics.median))\n            .attr('x2', box_width / 2)\n            .attr('y2', chart.yscale(metrics.median))\n            .attr('stroke', 'black')\n            .attr('stroke-width', median_lw)\n        const circle = iqr.append('circle')  // median dot\n            .attr('cx', 0)\n            .attr('cy', chart.yscale(metrics.median))\n            .attr('r', 4.5)\n            .style('fill', 'white')\n            .attr('stroke', 'black')\n            .attr('stroke-width', 2)\n        // Circle events for tooltip\n        circle.on('mouseover', () => {\n            this._graphics.tooltip_div.style('display', null)\n            this.tooltip_hover(i)\n        }).on('mouseout', () => {\n            this._graphics.tooltip_div.style('display', 'none')\n        })\n    }\n\n}\n\n/**\n * Add the tooltip to the DOM\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_tooltip\n */\nboxvio_chart_wrapper.prototype._render_tooltip = function () {\n    const tooltip_element = common.create_dom_element({\n        element_type: 'div',\n        id: `${this.id_string()}_tooltip_div`,\n        class_name: 'o-red',\n    })\n    insert_after(tooltip_element, this.plot_container)\n    this._graphics.tooltip_div = d3.select(tooltip_element)\n    const tooltip_div = this._graphics.tooltip_div\n    for (const [k, v] of Object.entries(TOOLTIP_STYLE)) {\n        tooltip_div.style(k, v)\n    }\n        \n}\n\n/**\n * Set the tooltip to visible when we hover over\n * @param {number} i index of data\n * @function\n * @name boxvio_chart_wrapper#tooltip_hover\n */\nboxvio_chart_wrapper.prototype.tooltip_hover = function (i) {\n    const decimals = 3\n    const key = this._data[i].key\n    const values = this._data[i].values\n    const metrics = this._data[i].metrics\n    const tooltip_text = `<b>${key.join(', ')}</b>`\n        + '<span style=\"font-size: smaller;\">'\n        + `<br>Datapoints: ${values.length}`\n        + `<br>Mean: ${metrics.mean.toFixed(decimals)}`\n        + `<br>Max: ${metrics.max.toFixed(decimals)}`\n        + `<br>Q3: ${metrics.quartile3.toFixed(decimals)}`\n        + `<br>Median: ${metrics.median.toFixed(decimals)}`\n        + `<br>Q1: ${metrics.quartile1.toFixed(decimals)}`\n        + `<br>Min: ${metrics.min.toFixed(decimals)}`\n        + '</span>'\n    this._graphics.tooltip_div\n        .html(tooltip_text)\n}\n\n/**\n * Render the control panel\n * @function\n * @protected\n * @name boxvio_chart_wrapper#render_control_panel\n */\nboxvio_chart_wrapper.prototype.render_control_panel = function () {\n    d3_chart_wrapper.prototype.render_control_panel.call(this)\n\n    // TODO: refactor the first three (together)\n    const upper_container = common.create_dom_element({\n        element_type: 'div',\n        parent: this.controls_container,\n        style: {\n            'display': 'flex',\n            'direction': 'flex-row',\n            'justify-content': 'space-between',\n            'align-items': 'center',\n        },\n    })\n    this._render_grid_select(upper_container)\n    this._render_xticklabel_angle_slider(upper_container)\n    this._render_violin_curve_selector(upper_container)\n    this._render_checkboxes()\n    this._render_scale_sliders()\n    this._render_key_selects()\n    this._render_n_bins_control()\n\n}\n\n/**\n * Render the selector for grid mode\n * @function\n * @private\n * @param {Element} container the container element\n * @name boxvio_chart_wrapper#_render_grid_select\n */\nboxvio_chart_wrapper.prototype._render_grid_select = function (container) {\n    const select_container = common.create_dom_element({\n        element_type: 'div',\n        parent: container,\n        style: {\n            'display': 'flex',\n            'gap': DEFAULT_FLEX_GAP,\n        },\n    })\n    const grid_select_id = `${this.id_string()}_grid_select`\n    const grid_select_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: tstring.grid || 'Grid',\n        parent: select_container,\n        style: {'margin-block': 'auto'},\n    })\n    grid_select_label.setAttribute('for', grid_select_id)\n    const grid_select = common.create_dom_element({\n        element_type: 'select',\n        id: grid_select_id,\n        parent: select_container,\n        // TODO: add ARIA attributes?\n    })\n    common.create_dom_element({\n        element_type: 'option',\n        value: 'None',\n        text_content: tstring.none_f || 'None',\n        parent: grid_select,\n    })\n    common.create_dom_element({\n        element_type: 'option',\n        value: 'Major',\n        text_content: tstring.major || 'Major',\n        parent: grid_select,\n    })\n    common.create_dom_element({\n        element_type: 'option',\n        value: 'Major + Minor',\n        text_content: tstring.major_minor || 'Major + Minor',\n        parent: grid_select,\n    })\n    grid_select.addEventListener('change', () => {\n        const mode = grid_select.value\n        this.apply_ygrid_mode(mode)\n    })\n}\n\n/**\n * Render the slider for the xticklabel angle\n * @function\n * @private\n * @param {Element} container the container element\n * @name boxvio_chart_wrapper#_render_xticklabel_angle_slider\n */\nboxvio_chart_wrapper.prototype._render_xticklabel_angle_slider = function (container) {\n    const slider_container = common.create_dom_element({\n        element_type: 'div',\n        parent: container,\n        style: {\n            'display': 'flex',\n            'gap': DEFAULT_FLEX_GAP,\n        },\n    })\n    const xticklabel_angle_slider_id = `${this.id_string()}_xticklabel_angle_slider`\n    const xticklabel_angle_slider_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: tstring.xticklabel_angle || \"X-Tick label angle\",\n        parent: slider_container,\n        style: {'margin-block': 'auto'},\n    })\n    xticklabel_angle_slider_label.setAttribute('for', xticklabel_angle_slider_id)\n    /** @type {Element} */\n    const xticklabel_angle_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        id: xticklabel_angle_slider_id,\n        parent: slider_container,\n    })\n    xticklabel_angle_slider.setAttribute('min', 0)\n    xticklabel_angle_slider.setAttribute('max', 90)\n    xticklabel_angle_slider.value = this._chart.xticklabel_angle\n    xticklabel_angle_slider.addEventListener('input', () => {\n        this._chart.xticklabel_angle = Number(xticklabel_angle_slider.value)\n        this.apply_xticklabel_angle()\n    })\n}\n\n/**\n * Render the selector for the violin curve\n * @function\n * @private\n * @param {Element} container the container element\n * @name boxvio_chart_wrapper#_render_violin_curve_selector\n */\nboxvio_chart_wrapper.prototype._render_violin_curve_selector = function (container) {\n    const select_container = common.create_dom_element({\n        element_type: 'div',\n        parent: container,\n        style: {\n            'display': 'flex',\n            'gap': DEFAULT_FLEX_GAP,\n        },\n    })\n    const curve_select_id = `${this.id_string()}_curve_select`\n    const curve_select_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: tstring.violin_curve || 'Violin curve',\n        parent: select_container,\n        style: {'margin-block': 'auto'},\n    })\n    curve_select_label.setAttribute('for', curve_select_id)\n    const curve_select = common.create_dom_element({\n        element_type: 'select',\n        id: curve_select_id,\n        parent: select_container,\n        // TODO: add ARIA attributes?\n    })\n    for (const curve_name of this._chart.supported_curves) {\n        common.create_dom_element({\n            element_type: 'option',\n            value: curve_name,\n            text_content: curve_name,\n            parent: curve_select,\n        })\n    }\n    curve_select.addEventListener('change', () => {\n        this.set_violin_curve(curve_select.value)\n    })\n}\n\n/**\n * Render the checkboxes of the control panel\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_checkboxes\n */\nboxvio_chart_wrapper.prototype._render_checkboxes = function () {\n    // Container div\n    const container_div = common.create_dom_element({\n        element_type: 'div',\n        parent: this.controls_container,\n        style: {\n            'display': 'flex',\n            'direction': 'flex-row',\n            'justify-content': 'space-between',\n            'align-items': 'center',\n            'margin-top': DEFAULT_MARGIN,\n        },\n    })\n\n    // Show key 2\n    const show_key2_div = common.create_dom_element({\n        element_type: 'div',\n        parent: container_div,\n    })\n    const show_key2_checkbox_id = `${this.id_string()}_show_key2_checkbox`\n    /** @type {Element} */\n    const show_key2_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: show_key2_checkbox_id,\n        parent: show_key2_div,\n    })\n    show_key2_checkbox.checked = true\n    /** @type {Element} */\n    const show_key2_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: (tstring.show || 'Show')\n                      + ' '\n                      + this._key_titles[this._key_size-2].toLowerCase(),\n        parent: show_key2_div,\n    })\n    show_key2_label.setAttribute('for', show_key2_checkbox_id)\n    show_key2_checkbox.addEventListener('change', () => {\n        toggle_visibility(this._graphics.key2_dividers_g)\n    })\n    \n    // Show violins\n    const show_violins_div = common.create_dom_element({\n        element_type: 'div',\n        parent: container_div,\n    })\n    const show_violins_checkbox_id = `${this.id_string()}_show_violins_checkbox`\n    /** @type {Element} */\n    const show_violins_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: show_violins_checkbox_id,\n        parent: show_violins_div,\n    })\n    show_violins_checkbox.checked = true\n    /** @type {Element} */\n    const show_violins_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: tstring.show_violins || 'Show violins',\n        parent: show_violins_div,\n    })\n    show_violins_label.setAttribute('for', show_violins_checkbox_id)\n    show_violins_checkbox.addEventListener('change', () => {\n        toggle_visibility(this._graphics.violins_g)\n    })\n\n    // Show boxes\n    const show_boxes_div = common.create_dom_element({\n        element_type: 'div',\n        parent: container_div,\n    })\n    const show_boxes_checkbox_id = `${this.id_string()}_show_boxes_checkbox`\n    /** @type {Element} */\n    const show_boxes_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: show_boxes_checkbox_id,\n        parent: show_boxes_div,\n    })\n    show_boxes_checkbox.checked = true\n    /** @type {Element} */\n    const show_boxes_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: tstring.show_boxes || 'Show boxes',\n        parent: show_boxes_div,\n    })\n    show_boxes_label.setAttribute('for', show_boxes_checkbox_id)\n    show_boxes_checkbox.addEventListener('change', () => {\n        toggle_visibility(this._graphics.boxes_g)\n        // (DISABLED) Disable the checkbox for outliers (defined below)\n        // show_outliers_checkbox.disabled = !show_boxes_checkbox.checked\n    })\n\n    // Show outliers\n    const show_outliers_div = common.create_dom_element({\n        element_type: 'div',\n        parent: container_div,\n    })\n    const show_outliers_checkbox_id = `${this.id_string()}_show_outliers_checkbox`\n    /** @type {Element} */\n    const show_outliers_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: show_outliers_checkbox_id,\n        parent: show_outliers_div,\n    })\n    show_outliers_checkbox.checked = true\n    /** @type {Element} */\n    const show_outliers_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: tstring.show_outliers || 'Show outliers',\n        parent: show_outliers_div,\n    })\n    show_outliers_label.setAttribute('for', show_outliers_checkbox_id)\n    show_outliers_checkbox.addEventListener('change', () => {\n        for (const group of this._graphics.outliers) {\n            toggle_visibility(group)\n        }\n    })\n}\n\n/**\n * Render the sliders of the control panel that\n * control the scale of violins and boxes\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_scale_sliders\n */\nboxvio_chart_wrapper.prototype._render_scale_sliders = function () {\n    // Container div\n    const container_div = common.create_dom_element({\n        element_type: 'div',\n        parent: this.controls_container,\n        style: {\n            'display': 'flex',\n            'direction': 'flex-row',\n            'justify-content': 'space-between',\n            'align-items': 'center',\n        },\n    })\n\n    // Violin scale\n    const violin_container_div = common.create_dom_element({\n        element_type: 'div',\n        parent: container_div,\n        style: {\n            'display': 'flex',\n            'gap': DEFAULT_FLEX_GAP,\n        },\n    })\n    const violin_scale_slider_id = `${this.id_string()}_violin_scale_slider`\n    const violin_scale_slider_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: tstring.violin_width || 'Violin width',\n        parent: violin_container_div,\n        style: {\n            'margin-block': 'auto',\n        },\n    })\n    violin_scale_slider_label.setAttribute('for', violin_scale_slider_id)\n    /** @type {Element} */\n    const violin_scale_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        id: violin_scale_slider_id,\n        parent: violin_container_div,\n    })\n    violin_scale_slider.setAttribute('min', 0)\n    violin_scale_slider.setAttribute('max', 1)\n    violin_scale_slider.setAttribute('step', 0.05)\n    violin_scale_slider.value = this._chart.violin_scale.initial\n    violin_scale_slider.addEventListener('input', () => {\n        this.set_violin_scale(Number(violin_scale_slider.value))\n    })\n    /** @type {Element} */\n    const violin_scale_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: tstring.reset || 'Reset',\n        parent: violin_container_div,\n    })\n    violin_scale_slider_reset.addEventListener('click', () => {\n        violin_scale_slider.value = this._chart.violin_scale.initial\n        this.set_violin_scale(Number(violin_scale_slider.value))\n    })\n\n    // Box scale\n    const box_container_div = common.create_dom_element({\n        element_type: 'div',\n        parent: container_div,\n        style: {\n            'display': 'flex',\n            'gap': DEFAULT_FLEX_GAP,\n        },\n    })\n    const box_scale_slider_id = `${this.id_string()}_box_scale_slider`\n    const box_scale_slider_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: tstring.box_width || 'Box width',\n        parent: box_container_div,\n        style: {\n            'margin-block': 'auto',\n        },\n    })\n    box_scale_slider_label.setAttribute('for', box_scale_slider_id)\n    /** @type {Element} */\n    const box_scale_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        id: box_scale_slider_id,\n        parent: box_container_div,\n    })\n    box_scale_slider.setAttribute('min', 0)\n    box_scale_slider.setAttribute('max', 1)\n    box_scale_slider.setAttribute('step', 0.05)\n    box_scale_slider.value = this._chart.box_scale.initial\n    box_scale_slider.addEventListener('input', () => {\n        this.set_box_scale(Number(box_scale_slider.value))\n    })\n    /** @type {Element} */\n    const box_scale_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: tstring.reset || 'Reset',\n        parent: box_container_div,\n    })\n    box_scale_slider_reset.addEventListener('click', () => {\n        box_scale_slider.value = this._chart.box_scale.initial\n        this.set_box_scale(Number(box_scale_slider.value))\n    })\n}\n\n/**\n * Render the key select elements\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_key_select\n */\nboxvio_chart_wrapper.prototype._render_key_selects = function () {\n    const container = common.create_dom_element({\n        element_type: 'div',\n        parent: this.controls_container,\n        style: {\n            'display': 'flex',\n            'align-items': 'center',\n            'gap': DEFAULT_FLEX_GAP_BIG,\n            'margin-top': DEFAULT_MARGIN_BIG,\n        },\n    })\n    // Render selects for the different key components\n    const key_selects = []\n    /**\n     * Inner function for populating a key select tag\n     * Previous key tags must be populated already\n     * @param {number} i index of the key select \n     */\n    const populate_key_select = (i) => {\n        key_selects[i].replaceChildren()  // Delete existing children\n        const pkey = key_selects.slice(0, i).map((key_select) => key_select.value)\n        const values = this._get_next_key_component_values(pkey)\n        for (const value of values) {\n            common.create_dom_element({\n                element_type: 'option',\n                value: value,\n                text_content: value,\n                parent: key_selects[i],\n            })\n        }\n    }\n    for (let i = 0; i < this._key_size; i++) {\n        const select_container = common.create_dom_element({\n            element_type: 'div',\n            parent: container,\n            style: {\n                'display': 'flex',\n                'gap': DEFAULT_FLEX_GAP,\n            },\n        })\n        const select_id = `${this.id_string()}_key${this._key_size-i}_select`\n        const label = common.create_dom_element({\n            element_type: 'label',\n            text_content: this._key_titles[i],\n            parent: select_container,\n            style: {'margin-block': 'auto'},\n        })\n        label.setAttribute('for', select_id)\n        const key_select = common.create_dom_element({\n            element_type: 'select',\n            id: select_id,\n            parent: select_container,\n        })\n        key_selects.push(key_select)\n        populate_key_select(i)\n        key_select.addEventListener('change', () => {\n            // Repopulate the next key selects\n            for (let j = i+1; j < key_selects.length; j++) {\n                populate_key_select(j)\n            }\n            // Update the selected index\n            this._controls.selected_index = this.get_index_of_key(\n                key_selects.map((ks) => ks.value)\n            )\n\n            // Dispatch key change event to all listeners\n            const listeners\n                = this.controls_container.getElementsByClassName(KEY_CHANGE_LISTENER_CLASS_NAME)\n            for (const ele of listeners) {\n                ele.dispatchEvent(KEY_CHANGE_EVENT)\n            }\n            \n        })\n    }\n}\n\n/**\n * Render the control elements to change the number of bins\n * @function\n * @private\n * @name boxvio_chart_wrapper#_render_n_bins_control\n */\nboxvio_chart_wrapper.prototype._render_n_bins_control = function () {\n    const container = common.create_dom_element({\n        element_type: 'div',\n        parent: this.controls_container,\n        style: {\n            'display': 'flex',\n            'align-items': 'center',\n            'gap': DEFAULT_FLEX_GAP,\n            'margin-top': DEFAULT_MARGIN,\n        },\n    })\n    // Slider for n bins\n    const violin_n_bins_slider_id = `${this.id_string()}_violin_n_bins_slider`\n    const violin_n_bins_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: tstring.violin_resolution || 'Violin resolution',\n        parent: container,\n        style: {'margin-block': 'auto'},\n    })\n    violin_n_bins_label.setAttribute('for', violin_n_bins_slider_id)\n    const violin_n_bins_slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        class_name: KEY_CHANGE_LISTENER_CLASS_NAME,\n        id: violin_n_bins_slider_id,\n        parent: container,\n    })\n    violin_n_bins_slider.setAttribute('min', 2)\n    const reset = () => {\n        violin_n_bins_slider.setAttribute(\n            'max',\n            this._controls.max_bins_multiplier\n                * this._chart.n_bins[this._controls.selected_index].initial\n        )\n        violin_n_bins_slider.value = this._chart.n_bins[this._controls.selected_index].value\n    }\n    reset()\n    violin_n_bins_slider.addEventListener('input', () => {\n        this.set_n_bins(this._controls.selected_index, Number(violin_n_bins_slider.value))\n    })\n    violin_n_bins_slider.addEventListener(KEY_CHANGE_EVENT_NAME, () => {\n        reset()\n    })\n\n    // Reset n bins\n    const violin_n_bins_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: tstring.reset || 'Reset',\n        parent: container,\n    })\n    violin_n_bins_slider_reset.addEventListener('click', () => {\n        violin_n_bins_slider.value = this._chart.n_bins[this._controls.selected_index].initial\n        this.set_n_bins(this._controls.selected_index, Number(violin_n_bins_slider.value))\n    })\n\n    // Reset all n bins\n    const violin_all_n_bins_slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: tstring.reset_all_violins || 'Reset all violins',\n        parent: container,\n    })\n    violin_all_n_bins_slider_reset.addEventListener('click', () => {\n        // Update the value of the slider\n        violin_n_bins_slider.value = this._chart.n_bins[this._controls.selected_index].initial\n        for (const [i, n_bins] of this._chart.n_bins.entries()) {\n            this.set_n_bins(i, n_bins.initial)\n        }\n    })\n}\n\n\n// HELPER FUNCTIONS\n\n/**\n * Compute (boxplot) metrics for the data\n * @param {number[]} values the data values\n * @returns {{\n *  max: number,\n *  upper_fence: number,\n *  quartile3: number,\n *  median: number,\n *  mean: number,\n *  iqr: number,\n *  quartile1: number,\n *  lower_fence: number,\n *  min: number,\n * }}\n */\nfunction calc_metrics(values) {\n    const metrics = {\n        max: null,\n        upper_fence: null,\n        quartile3: null,\n        median: null,\n        mean: null,\n        iqr: null,\n        quartile1: null,\n        lower_fence: null,\n        min: null,\n    }\n\n    metrics.min = d3.min(values)\n    metrics.quartile1 = d3.quantile(values, 0.25)\n    metrics.median = d3.median(values)\n    metrics.mean = d3.mean(values)\n    metrics.quartile3 = d3.quantile(values, 0.75)\n    metrics.max = d3.max(values)\n    metrics.iqr = metrics.quartile3 - metrics.quartile1\n    metrics.lower_fence = metrics.quartile1 - 1.5 * metrics.iqr\n    metrics.upper_fence = metrics.quartile3 + 1.5 * metrics.iqr\n\n    return metrics\n}\n\n/**\n * Splitter string\n * @type {string}\n */\nconst SPLITTER = '_^PoT3sRanaCantora_'\n\n/**\n * Join key array into a string\n * @param {string[]} key the key\n * @returns {string} the join\n */\nfunction join_key(key) {\n    return key.join(SPLITTER)\n}\n\n/**\n * Split key string into array\n * @param {string} key the key join\n * @returns {string[]} the split key\n */\nfunction split_key(key) {\n    return key.split(SPLITTER)\n}","\"use strict\";\n\nimport { chart_wrapper } from \"../chart-wrapper.js\";\n\n/**\n * Chart.js chart wrapper class\n * @class\n * @abstract\n * @param {Element} div_wrapper the div conatining the chart\n * @param {Object} options configuration options\n * @param {boolean} options.display_download whether to display the download panel (default `false`)\n * @param {boolean} options.display_control_panel whether to display the control panel (default `false`)\n * @extends chart_wrapper\n */\nexport function chartjs_chart_wrapper(div_wrapper, options) {\n    if (this.constructor === chartjs_chart_wrapper) {\n        throw new Error(\"Abstract class 'chartjs_chart_wrapper' cannot be instantiated\")\n    }\n    chart_wrapper.call(this, div_wrapper, options)\n    /**\n     * Canvas instance, will be created during\n     * render\n     * @type {HTMLCanvasElement}\n     * @protected\n     */\n    this.canvas = undefined\n    /**\n     * Chart instance (chart.js)\n     * @protected\n     */\n    this.chart = undefined\n}\n// Set prototype chain\nObject.setPrototypeOf(chartjs_chart_wrapper.prototype, chart_wrapper.prototype)\n\n/**\n * Render the plot\n * \n * Subclasses must call this method at the top\n * of their own implementation. Then, they can make\n * use of the canvas and the chartjs chart instance\n * @name chartjs_chart_wrapper#render_plot\n * @function\n * @protected\n */\nchartjs_chart_wrapper.prototype.render_plot = function () {\n    chart_wrapper.prototype.render_plot.call(this)\n    // Create canvas\n    this.canvas = common.create_dom_element({\n        element_type: 'canvas',\n        id: 'result_graph',\n        class_name: 'o-blue',\n        parent: this.plot_container,\n    })\n    // Set chart instance to undefined\n    this.chart = undefined\n}\n\n/**\n * Get the supported chart export formats\n * @function\n * @returns {string[]} the supported formats\n * @name chartjs_chart_wrapper#get_supported_export_formats\n */\nchartjs_chart_wrapper.prototype.get_supported_export_formats = function () {\n    return ['png']\n}\n\n/**\n * Download the chart as png\n * @param {string} filename the name of the file\n * @function\n * @name chartjs_chart_wrapper#_download_chart_as_png\n */\nchartjs_chart_wrapper.prototype.download_chart_as_png = function (filename) {\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: this.chart.toBase64Image(),\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n}\n\n/**\n * FIXME: this is not working...\n * Download the chart as svg\n * @param {string} filename the name of the file\n * @function\n * @name chartjs_chart_wrapper#_download_chart_as_svg\n */\nchartjs_chart_wrapper.prototype.download_chart_as_svg = function (filename) {\n    // Tweak C2S library\n    this._tweak_c2s()\n    // Get original width and height\n    const width = this.canvas.offsetWidth\n    const height = this.canvas.offsetHeight\n    // TODO: Turn off responsiveness and animations\n    this.chart.options.animation = false\n    this.chart.options.reponsive = false\n    // Replicate chart in C2S space\n    const svgContext = C2S(width, height)\n    const svgChart = new Chart(svgContext, this.chart.config._config)\n    // Download\n    /**\n     * Temporary link\n     * @type {Element}\n     */\n    const tmpLink = common.create_dom_element({\n        element_type: 'a',\n        href: 'data:image/svg+xml;utf8,'\n            + encodeURIComponent(svgContext.getSerializedSvg()),\n    })\n    tmpLink.setAttribute('download', filename)\n    tmpLink.click()\n    tmpLink.remove()\n    // TODO: Turn on responsiveness and animations\n    this.chart.options.animation = true\n    this.chart.options.reponsive = true\n}\n\n/**\n * Some tweaks to the canvas2svg library are required for svg export to work\n * \n * Via: https://stackoverflow.com/questions/62249315/export-canvas-to-svg-file\n * @function\n * @private\n * @name chartjs_chart_wrapper#_tweak_c2s\n */\nchartjs_chart_wrapper.prototype._tweak_c2s = function () {\n    C2S.prototype.getContext = function (contextId) {\n        if (contextId === '2d' || contextId === '2D') {\n            return this;\n        }\n        return null;\n    }\n    C2S.prototype.style = function () {\n        return this.__canvas.style;\n    }\n    C2S.prototype.getAttribute = function (name) {\n        return this[name];\n    }\n    C2S.prototype.addEventListener = function (type, listener, eventListenerOptions) {\n        // nothing to do here, but we need this function :)\n    }\n}","\"use strict\";\n\nimport { chartjs_chart_wrapper } from \"./chartjs-chart-wrapper.js\";\nimport { COLOR_PICKER_WIDTH, COLOR_PALETTE } from \"../chart-wrapper.js\";\nimport { compute_n_bins } from \"../compute-n-bins.js\";\n\n/**\n * Histogram wrapper\n * @param {Element}  div_wrapper the div to work in\n * @param {number[]} data the data\n * @param {Object} options configuration options\n * @param {boolean} options.display_download whether to display the download panel (default `false`)\n * @param {boolean} options.display_control_panel whether to display the control panel (default `false`)\n * @param {string} options.xlabel the label for the x-axis (default `null` )\n * @class\n * @extends chartjs_chart_wrapper\n */\nexport function histogram_wrapper(div_wrapper, data, options) {\n    /*\n     * <Function>.call is a method that executes the defined function,\n     * but with the \"this\" variable pointing to the first argument,\n     * and the rest of the arguments being arguments of the function\n     * that is being \"called\". This essentially performs all of\n     * chart_wrapper's constructor logic on histogram_wrapper's \"this\".\n     */\n    chartjs_chart_wrapper.call(this, div_wrapper, options)\n\n    /**\n     * Data values\n     * @type {number[]}\n     * @private\n     */\n    this._data = data\n    /**\n     * Whether to perform a density plot\n     * @type {boolean}\n     * @private\n     */\n    this._density = false\n    /**\n     * Default number of bins\n     * @type {number}\n     * @private\n     */\n    this._n_bins_default = compute_n_bins.sqrt(this._data)\n    /**\n     * Number of bins in the histogram\n     * \n     * Defined as the square root of the\n     * amount of datapoints, computed\n     * during render\n     * @type {number}\n     * @private\n     */\n    this._n_bins = undefined\n    /** Label for the xaxis\n     * @type {string}\n     * @private\n    */\n    this._xlabel = options.xlabel || null\n    /**\n     * Number of decimals to display\n     * @type {number}\n     * @private\n     */\n    this._n_decimals = 3\n    /**\n     * Maximum number of bins as mutiplier of default\n     * @type {number}\n     * @private\n     */\n    this._max_bins_multiplier = 3\n    /**\n     * Default color for the bars in rgba\n     * @type {string}\n     * @private\n     */\n    this._bar_color = COLOR_PALETTE[0]\n}\n// Set prototype chain\nObject.setPrototypeOf(histogram_wrapper.prototype, chartjs_chart_wrapper.prototype)\n\n/**\n * Check whether we are doing a density plot\n * @returns {boolean} `true` if density plot,\n * \t\t\t`false` otherwise\n * @name histogram_wrapper#get_density\n * @function\n */\nhistogram_wrapper.prototype.get_density = function () {\n    return this._density\n}\n\n/**\n * Change the density plot attribute\n * @param density {boolean} `true` if density, `false` otherwise\n * @function\n * @name histogram_wrapper#set_density\n */\nhistogram_wrapper.prototype.set_density = function (density) {\n    this._density = density\n    if (!this.chart) {\n        return\n    }\n    // Update chart\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n    this.chart.data.datasets[0].label = this._get_density_string()\n    this.chart.data.datasets[0].data = plot_data\n    this.chart.options.scales.y.title.text = this._get_density_string()\n    this.chart.update()\n}\n\n/**\n * Get a string representing the plot mode\n * @returns {string} `'Density'` if we are in density\n * \t\t\tmode, `'Frequency'` otherwise\n * @function\n * @private\n * @name histogram_wrapper#_get_density_string\n */\nhistogram_wrapper.prototype._get_density_string = function () {\n    return this._density ? 'Density' : 'Frequency'\n}\n\n/**\n * Get the amount of bins in the histogram\n * @returns {number} the amount of bins\n * @function\n * @name histogram_wrapper#get_n_bins\n */\nhistogram_wrapper.prototype.get_n_bins = function () {\n    return this._n_bins\n}\n\n/**\n * Set a new number of bins for the histogram\n * \n * Updates chart instance accordingly\n * @param {number} n_bins amount of bins\n * @function\n * @name histogram_wrapper#set_n_bins\n */\nhistogram_wrapper.prototype.set_n_bins = function (n_bins) {\n    this._n_bins = n_bins\n    if (!this.chart) {\n        return\n    }\n    // Update chart\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n    this.chart.data.datasets[0].data = plot_data\n    this.chart.options.scales.x.min = data_min\n    this.chart.options.scales.x.max = data_max\n    this.chart.options.scales.x.ticks.stepSize = 2 * half_bin_width\n    this.chart.options.plugins.tooltip.callbacks.title =\n        this._get_tooltip_title_callback(bin_centers, half_bin_width)\n    this.chart.update()\n}\n\n/**\n * Get the color of the bars in the histogram\n * @returns {string} the bar color as an rgba string\n * @function\n * @name histogram_wrapper#get_bar_color\n */\nhistogram_wrapper.prototype.get_bar_color = function () {\n    return this._bar_color\n}\n\n/**\n * Set a new color for the bars in the histogram\n * \n * Updates the chart instance accordingly\n * @param {string} bar_color the new bar color for the histogram\n * @function\n * @name histogram_wrapper#set_bar_color\n */\nhistogram_wrapper.prototype.set_bar_color = function (bar_color) {\n    this._bar_color = bar_color\n    if (!this.chart) {\n        return\n    }\n    this.chart.data.datasets[0].backgroundColor = this._bar_color\n    this.chart.update()\n}\n\n/**\n * Get data needed to generate the chart\n * TODO: there is no need to recompute bin_centers unless the number of bins\n* \t\t has changed\n* @function\n* @name histogram_wrapper#_get_plotting_data\n* @private\n* \n* @returns {[number[], {x: number, y: number}[], number, number, number]}\n* \t\t\tthe bin centers, {bin centers, count per bin}, half of the bin width,\n* \t\t\tthe minimum and maximum of input data\n */\nhistogram_wrapper.prototype._get_plotting_data = function () {\n    const data_max = Math.max(...this._data)\n    const data_min = Math.min(...this._data)\n    const bin_width = (data_max - data_min) / this._n_bins\n    const half_bin_width = 0.5 * bin_width\n    /**\n     * Center of each bin\n     * @type {number[]}\n     */\n    const bin_centers = Array.apply(null, Array(this._n_bins)).map(\n        (value, index) => data_min + (2 * index + 1) * half_bin_width\n    )\n    // We bin with right-open intervals\n    /**\n     * Count per bin\n     * @type {number[]}\n     */\n    let entries = Array.apply(null, Array(this._n_bins)).map(() => 0)\n    for (let i = 0; i < this._data.length; i++) {\n        // If value is max, add it to last bin\n        if (this._data[i] === data_max) {\n            entries[this._n_bins - 1]++\n            continue\n        }\n        // Proceed as usual\n        for (let j = 0; j < this._n_bins; j++) {\n            if (this._data[i] >= bin_centers[j] - half_bin_width\n                && this._data[i] < bin_centers[j] + half_bin_width) {\n                entries[j]++\n                break\n            }\n        }\n    }\n    // Normalize if density\n    if (this._density) {\n        const sum = entries.reduce((partialSum, val) => partialSum + val, 0)\n        for (let j = 0; j < this._n_bins; j++) {\n            entries[j] /= (sum * bin_width);\n        }\n    }\n    return [\n        bin_centers,\n        bin_centers.map((val, i) => ({ x: val, y: entries[i] })),\n        half_bin_width,\n        data_min,\n        data_max,\n    ]\n}\n\n/**\n * Get callback function for tooltip title\n * @param {number[]} bin_centers the bin centers\n * @param {number} half_bin_width half of the bin width\n * @returns the callback function\n * @function\n * @private\n * @name histogram_wrapper#_get_tooltip_title_callback\n */\nhistogram_wrapper.prototype._get_tooltip_title_callback = function (bin_centers, half_bin_width) {\n    // Cannot use `this` inside inner function!!!\n    const xlabel = this._xlabel\n    const n_decimals = this._n_decimals\n    /**\n     * Callback function for the tooltip title\n     * @param {TooltipItem[]} items the tooltip item contexts\n     * @returns {string} the title of the tooltip\n     * @function\n     * @name histogram_wrapper#_get_tooltip_title_callback~inner\n     */\n    const callback = function (items) {\n        if (!items.length) {\n            return ''\n        }\n        const item = items[0]\n        const index = item.dataIndex\n        const min = bin_centers[index] - half_bin_width\n        const max = bin_centers[index] + half_bin_width\n        return `${xlabel}: ${min.toFixed(n_decimals)} `\n            + `- ${max.toFixed(n_decimals)}`\n    }\n    return callback\n}\n\n/**\n * Render the plot\n * @function\n * @protected\n * @name histogram_wrapper#render_plot\n */\nhistogram_wrapper.prototype.render_plot = function () {\n    chartjs_chart_wrapper.prototype.render_plot.call(this)\n\n    this._n_bins = this._n_bins_default\n    const [\n        bin_centers, plot_data, half_bin_width, data_min, data_max\n    ] = this._get_plotting_data()\n\n    // Split chart options\n    const chart_data = {\n        datasets: [{\n            label: this._get_density_string(),\n            data: plot_data,\n            categoryPercentage: 1,\n            barPercentage: 1,\n            backgroundColor: this._bar_color,\n        }],\n    }\n    const scales_options = {\n        x: {\n            type: 'linear',  // otherwise it goes to a category axis...\n            min: data_min,\n            max: data_max,\n            offset: false,\n            grid: {\n                offset: false,\n            },\n            ticks: {\n                stepSize: 2 * half_bin_width,\n                callback: (label, index, labels) => {\n                    return Number(label).toFixed(this._n_decimals)\n                }\n            },\n            title: {\n                display: Boolean(this._xlabel),  // Only display if there is a label\n                text: this._xlabel,\n                font: {\n                    size: 14\n                },\n            }\n        },\n        y: {\n            title: {\n                display: true,\n                text: this._get_density_string(),\n                font: {\n                    size: 14,\n                },\n            },\n        },\n    }\n    const plugins_options = {\n        legend: {\n            display: false,\n        },\n        tooltip: {\n            callbacks: {\n                title: this._get_tooltip_title_callback(bin_centers, half_bin_width),\n            },\n        },\n    }\n\n    // Render the graph\n    this.chart = new Chart(this.canvas, {\n        type: 'bar',\n        data: chart_data,\n        options: {\n            scales: scales_options,\n            plugins: plugins_options,\n            parsing: false,\n            normalized: true,\n        },\n    })\n}\n\n\n/**\n * Render the control panel\n * @function\n * @protected\n * @name histogram_wrapper#render_control_panel\n */\nhistogram_wrapper.prototype.render_control_panel = function () {\n    chartjs_chart_wrapper.prototype.render_control_panel.call(this)\n\n    // Save this histogram wrapper instance, because when we change scope\n    // we may still need to refer to it\n    /**\n     * This histogram_wrapper instance\n     * @type {histogram_wrapper}\n     */\n    const self = this\n    /**\n     * Slider for number of bins\n     * @type {Element}\n     */\n    const slider = common.create_dom_element({\n        element_type: 'input',\n        type: 'range',\n        value: this._n_bins_default,\n        parent: this.controls_container,\n    })\n    slider.setAttribute('min', 1)\n    slider.setAttribute('max', this._max_bins_multiplier * this._n_bins_default)\n    slider.addEventListener('input', () => {\n        this.set_n_bins(Number(slider.value))\n    })\n    /**\n     * Reset button for the slider\n     * @type {Element}\n     */\n    const slider_reset = common.create_dom_element({\n        element_type: 'button',\n        type: 'button',\n        text_content: 'Reset',\n        parent: this.controls_container,\n    })\n    slider_reset.addEventListener('click', () => {\n        slider.value = this._n_bins_default\n        this.set_n_bins(Number(slider.value))\n    })\n\n    const density_checkbox_id = `${this.id_string()}_density_checkbox`\n    /**\n     * Checkbox for density plot\n     * @type {Element}\n     */\n    const density_checkbox = common.create_dom_element({\n        element_type: 'input',\n        type: 'checkbox',\n        id: density_checkbox_id,\n        parent: this.controls_container,\n    })\n    /**\n     * Checkbox label for density plot\n     * @type {Element}\n     */\n    const density_checkbox_label = common.create_dom_element({\n        element_type: 'label',\n        text_content: 'Density',\n        parent: this.controls_container,\n    })\n    density_checkbox_label.setAttribute('for', density_checkbox_id)\n    density_checkbox.addEventListener('change', () => {\n        this.set_density(Boolean(density_checkbox.checked))\n    })\n    /** iro.js color picker */\n    const color_picker_container = common.create_dom_element({\n        element_type: 'div',\n        id: `${this.id_string()}_color_picker_container`,\n        parent: this.controls_container\n    })\n    const color_picker = new window.iro.ColorPicker(color_picker_container, {\n        color: this._bar_color,\n        width: COLOR_PICKER_WIDTH,\n        layoutDirection: 'horizontal',\n        layout: [\n            {\n                component: window.iro.ui.Wheel,\n            },\n            {\n                component: window.iro.ui.Slider,\n            },\n            {\n                component: window.iro.ui.Slider,\n                options: {\n                    sliderType: 'alpha',\n                }\n            },\n        ],\n    })\n    color_picker.on('color:change', function (color) {\n        self.set_bar_color(color.rgbaString)\n    })\n}","/*global tstring, page_globals, Promise, data_manager, common */\n/*eslint no-undef: \"error\"*/\n\n\"use strict\";\n\n\nimport { chart_wrapper } from \"../../lib/charts/chart-wrapper.js\";\nimport { boxvio_chart_wrapper } from \"../../lib/charts/d3/boxvio-chart-wrapper.js\";\nimport { histogram_wrapper } from \"../../lib/charts/chartjs/histogram-wrapper.js\";\n\n\nexport const analysis =  {\n\n\t// Form factory instance\n\tform: null,\n\n\tarea_name\t\t\t\t: null,\n\trow\t\t\t\t\t\t: null,\n\n\t// DOM containers\n\texport_data_container\t\t: null,\n\tform_items_container\t\t: null,\n\tdiameter_chart_container\t: null,\n\tweight_chart_container\t\t: null,\n\n\t/**\n\t * Chart wrapper instance for diameter\n\t * @type {chart_wrapper}\n\t */\n\tdiameter_chart_wrapper: null,\n\t/**\n\t * Chart wrapper instance for weight\n\t * @type {chart_wrapper}\n\t */\n\tweight_chart_wrapper: null,\n\n\n\tset_up : function(options) {\n\n\t\tconst self = this\n\n\t\t// options\n\t\t\tself.area_name\t\t\t\t\t= options.area_name\n\t\t\tself.export_data_container\t\t= options.export_data_container\n\t\t\tself.row\t\t\t\t\t\t= options.row\n\t\t\tself.form_items_container\t\t= options.form_items_container\n\t\t\tself.diameter_chart_container\t= options.diameter_chart_container\n\t\t\tself.weight_chart_container\t\t= options.weight_chart_container\n\n\t\t// form\n\t\tconst form_node = self.render_form()\n\t\tself.form_items_container.appendChild(form_node)\n\n\t\treturn true\n\t},//end set_up\n\n\t/**\n\t * RENDER FORM\n\t */\n\trender_form : function() {\n\n\t\tconst self = this\n\n\t\t// DocumentFragment is like a virtual DOM\n\t\tconst fragment = new DocumentFragment()\n\n\t\t// form_factory instance\n\t\t\tself.form = self.form || new form_factory()\n\n\t\tconst form_row = common.create_dom_element({\n\t\t\telement_type\t: \"div\",\n\t\t\tclass_name\t\t: \"form-row fields\",\n\t\t\tparent\t\t\t: fragment\n\t\t})\n\n\t\t// mint\n\t\t\tself.form.item_factory({\n\t\t\t\tid\t\t\t\t: \"mint\",\n\t\t\t\tname\t\t\t: \"mint\",\n\t\t\t\tlabel\t\t\t: tstring.mint || \"mint\",\n\t\t\t\tq_column\t\t: \"p_mint\",\n\t\t\t\tvalue_wrapper\t: ['[\"', '\"]'], // to obtain [\"value\"] in selected value only\n\t\t\t\teq\t\t\t\t: \"LIKE\",\n\t\t\t\teq_in\t\t\t: \"%\",\n\t\t\t\teq_out\t\t\t: \"%\",\n\t\t\t\tis_term\t\t\t: true,\n\t\t\t\tparent\t\t\t: form_row,\n\t\t\t\tcallback\t\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// number\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"number\",\n\t\t\t\tname \t\t: \"number\",\n\t\t\t\tq_column \t: \"term\",\n\t\t\t\tq_table \t: \"types\",\n\t\t\t\tlabel\t\t: tstring.number_key || \"Number & Key\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tgroup_op \t: '$or',\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// material\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"material\",\n\t\t\t\tname \t\t: \"material\",\n\t\t\t\tq_column \t: \"ref_type_material\",\n\t\t\t\tq_table \t: \"any\",\n\t\t\t\tlabel\t\t: tstring.material || \"material\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\n\t\t// denomination\n\t\t\tself.form.item_factory({\n\t\t\t\tid \t\t\t: \"denomination\",\n\t\t\t\tname \t\t: \"denomination\",\n\t\t\t\tq_column \t: \"ref_type_denomination\",\n\t\t\t\tq_table \t: \"any\",\n\t\t\t\tlabel\t\t: tstring.denomination || \"denomination\",\n\t\t\t\tis_term \t: false,\n\t\t\t\tparent\t\t: form_row,\n\t\t\t\tcallback\t: function(form_item) {\n\t\t\t\t\tself.form.activate_autocomplete({\n\t\t\t\t\t\tform_item\t: form_item,\n\t\t\t\t\t\ttable\t\t: 'catalog'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\n\t\t// submit button\n\t\t\tconst submit_group = common.create_dom_element({\n\t\t\t\telement_type\t: \"div\",\n\t\t\t\tclass_name\t\t: \"form-group field button_submit\",\n\t\t\t\tparent\t\t\t: fragment\n\t\t\t})\n\t\t\tconst submit_button = common.create_dom_element({\n\t\t\t\telement_type\t: \"input\",\n\t\t\t\ttype\t\t\t: \"submit\",\n\t\t\t\tid\t\t\t\t: \"submit\",\n\t\t\t\tvalue\t\t\t: tstring.search || \"Search\",\n\t\t\t\tclass_name\t\t: \"btn btn-light btn-block primary\",\n\t\t\t\tparent\t\t\t: submit_group\n\t\t\t})\n\t\t\tsubmit_button.addEventListener(\"click\", function (e) {\n\t\t\t\te.preventDefault()\n\t\t\t\tself.form_submit(form)\n\t\t\t})\n\n\t\t// reset button\n\t\t\tconst reset_button = common.create_dom_element({\n\t\t\t\telement_type\t: \"input\",\n\t\t\t\ttype\t\t\t: \"button\",\n\t\t\t\tid\t\t\t\t: \"button_reset\",\n\t\t\t\tvalue\t\t\t: tstring.reset || 'Reset',\n\t\t\t\tclass_name\t\t: \"btn btn-light btn-block secondary button_reset\",\n\t\t\t\tparent\t\t\t: submit_group\n\t\t\t})\n\t\t\treset_button.addEventListener(\"click\", function (e) {\n\t\t\t\te.preventDefault()\n\t\t\t\twindow.location.replace(window.location.pathname);\n\t\t\t})\n\n\t\t// operators\n\t\t\t// fragment.appendChild( forms.build_operators_node() )\n\t\t\tconst operators_node = self.form.build_operators_node()\n\t\t\tfragment.appendChild( operators_node )\n\n\t\t// the form element itself!\n\t\t\tconst form = common.create_dom_element({\n\t\t\t\telement_type\t: \"form\",\n\t\t\t\tid\t\t\t\t: \"search_form\",\n\t\t\t\tclass_name\t\t: \"form-inline\"\n\t\t\t})\n\t\t\tform.appendChild(fragment)\n\n\n\t\treturn form\n\t},//end render_form\n\n\t/**\n\t * FORM SUBMIT\n\t * Form submit launch search\n\t */\n\tform_submit : function(form_obj, options={}) {\n\t\t\n\t\tconst self = this\n\n\t\t// options\n\t\t\tconst scroll_result\t= typeof options.scroll_result===\"boolean\" ? options.scroll_result : true\n\t\t\tconst form_items\t= options.form_items || self.form.form_items\n\n\t\t// build filter\n\t\t\tconst filter = self.form.build_filter({\n\t\t\t\tform_items: form_items\n\t\t\t})\n\t\t\n\t\t// empty filter case\n\t\t\tif (!filter || filter.length<1) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t// scroll to head result\n\t\t\tif (scroll_result) {\n\t\t\t\tthis.diameter_chart_container.scrollIntoView(\n\t\t\t\t\t{behavior: \"smooth\", block: \"start\", inline: \"nearest\"}\n\t\t\t\t);\n\t\t\t}\n\n\t\t// search rows exec against API\n\t\t\tconst js_promise = self.search_rows({\n\t\t\t\tfilter\t\t\t: filter,\n\t\t\t\tlimit\t\t\t: 0,\n\t\t\t\tprocess_result\t: {\n\t\t\t\t\tfn\t\t: 'process_result::add_parents_and_children_recursive',\n\t\t\t\t\tcolumns\t: [{name : \"parents\"}]\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then((parsed_data)=>{\n\n\t\t\t\tevent_manager.publish('form_submit', parsed_data)\n\n\t\t\t\tconsole.log(parsed_data)\n\n\t\t\t\t// const diameters = parsed_data\n\t\t\t\t// \t.map((ele) => ele.full_coins_reference_diameter_max)\n\t\t\t\t// \t.flat()\n\t\t\t\t// \t.filter((v) => v)\n\t\t\t\t// console.log(diameters)\n\n\t\t\t\t// this.diameter_chart_wrapper = new histogram_wrapper(\n\t\t\t\t// \tthis.diameter_chart_container,\n\t\t\t\t// \tdiameters,\n\t\t\t\t// \t{\n\t\t\t\t// \t\txlabel: 'Diameter',\n\t\t\t\t// \t}\n\t\t\t\t// )\n\t\t\t\t// this.diameter_chart_wrapper.render()\n\n\t\t\t\tconst data = []\n\t\t\t\tfor (const [i, ele] of parsed_data.entries()) {\n\t\t\t\t\tconst number_key = ele.ref_type_number ? ele.ref_type_number : `Missing Number & Key (${i})`\n\t\t\t\t\tconst mint = ele.p_mint ? ele.p_mint[0] : `Missing mint (${i})`\n\t\t\t\t\tconst material = ele.ref_type_material ? ele.ref_type_material : `Missing material (${i})` \n\t\t\t\t\tconst denomination = ele.ref_type_denomination ? ele.ref_type_denomination : `Missing denomination ${i}`\n\t\t\t\t\t// if (!['12', '59', '62', '18','11a','14'].includes(name)) continue\n\t\t\t\t\t// if (!['59', '62'].includes(name)) continue\n\t\t\t\t\tconst tmp_data = {}\n\t\t\t\t\tconst calculable = ele.full_coins_reference_calculable\n\t\t\t\t\tconst diameter_max = ele.full_coins_reference_diameter_max\n\t\t\t\t\tconst diameter_min = ele.full_coins_reference_diameter_min\n\t\t\t\t\tconst weight = ele.full_coins_reference_weight\n\t\t\t\t\tif (diameter_max && diameter_max.length) {\n\t\t\t\t\t\tconst tmp_diameter_max = diameter_max.filter((v, i) => v && calculable[i])\n\t\t\t\t\t\tif (tmp_diameter_max.length) {\n\t\t\t\t\t\t\ttmp_data.diameter_max = tmp_diameter_max\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (diameter_min && diameter_min.length) {\n\t\t\t\t\t\tconst tmp_diameter_min = diameter_min.filter((v, i) => v && calculable[i])\n\t\t\t\t\t\tif (tmp_diameter_min.length) {\n\t\t\t\t\t\t\ttmp_data.diameter_min = tmp_diameter_min\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (weight && weight.length) {\n\t\t\t\t\t\tconst tmp_weight = weight.filter((v, i) => v && calculable[i])\n\t\t\t\t\t\tif (tmp_weight.length) {\n\t\t\t\t\t\t\ttmp_data.weight = tmp_weight\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Object.keys(tmp_data).length) {\n\t\t\t\t\t\ttmp_data.number_key = number_key\n\t\t\t\t\t\ttmp_data.mint = mint\n\t\t\t\t\t\ttmp_data.material = material\n\t\t\t\t\t\ttmp_data.denomination = denomination\n\t\t\t\t\t\tdata.push(tmp_data)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.log(data)\n\n\t\t\t\t// Weights\n\t\t\t\tconst weights = data.filter(\n\t\t\t\t\t(ele) => ele.weight\n\t\t\t\t).map(\n\t\t\t\t\t(ele) => {return {key: [ele.mint, ele.number_key], values: ele.weight}}\n\t\t\t\t)\n\t\t\t\t// console.log('Weights:')\n\t\t\t\t// console.log(weights)\n\t\t\t\tthis.weight_chart_wrapper = new boxvio_chart_wrapper(\n\t\t\t\t\tthis.weight_chart_container,\n\t\t\t\t\tweights,\n\t\t\t\t\t[tstring.mint || 'Mint', tstring.number_key || 'Number & Key'],\n\t\t\t\t\t{\n\t\t\t\t\t\tylabel: tstring.weight || 'Weight',\n\t\t\t\t\t\toverflow: true,\n\t\t\t\t\t\tdisplay_control_panel: true,\n\t\t\t\t\t\tdisplay_download: true,\n\t\t\t\t\t\tsort_xaxis: true,\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tthis.weight_chart_wrapper.render()\n\n\t\t\t\t// Diameters\n\t\t\t\tconst diameters = data.filter(\n\t\t\t\t\t(ele) => ele.diameter_max\n\t\t\t\t).map(\n\t\t\t\t\t(ele) => {return {key: [ele.mint, ele.number_key], values: ele.diameter_max}}\n\t\t\t\t)\n\t\t\t\t// console.log('Diameters:')\n\t\t\t\t// console.log(diameters)\n\t\t\t\tthis.diameter_chart_wrapper = new boxvio_chart_wrapper(\n\t\t\t\t\tthis.diameter_chart_container,\n\t\t\t\t\tdiameters,\n\t\t\t\t [tstring.mint || 'Mint', tstring.number_key || 'Number & Key'],\n\t\t\t\t\t{\n\t\t\t\t\t\tylabel: tstring.diameter || 'Diameter',\n\t\t\t\t\t\toverflow: true,\n\t\t\t\t\t\tdisplay_control_panel: true,\n\t\t\t\t\t\tdisplay_download: true,\n\t\t\t\t\t\tsort_xaxis: true,\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tthis.diameter_chart_wrapper.render()\n\n\t\t\t})\n\n\t},\n\n\t/**\n\t * SEARCH_ROWS\n\t * Call to API and load json data results of search\n\t */\n\tsearch_rows : function(options) {\n\n\t\tconst self = this\n\n\t\t// sort vars\n\t\t\tconst filter\t\t\t= options.filter || null\n\t\t\tconst ar_fields\t\t\t= options.ar_fields || [\"*\"]\n\t\t\tconst order\t\t\t\t= options.order || \"norder ASC\"\n\t\t\tconst lang\t\t\t\t= page_globals.WEB_CURRENT_LANG_CODE\n\t\t\tconst process_result\t= options.process_result || null\n\t\t\tconst limit\t\t\t\t= options.limit != undefined\n\t\t\t\t\t\t\t\t\t\t? options.limit\n\t\t\t\t\t\t\t\t\t\t: 30\n\t\t\n\t\treturn new Promise(function(resolve){\n\t\t\t// parse_sql_filter\n\t\t\t\tconst group = []\n\t\t\t// parsed filters\n\t\t\t\tconst sql_filter = self.form.parse_sql_filter(filter)\n\t\t\t// request\n\t\t\t\tconst request_body = {\n\t\t\t\t\tdedalo_get\t\t: 'records',\n\t\t\t\t\ttable\t\t\t: 'catalog',\n\t\t\t\t\tar_fields\t\t: ar_fields,\n\t\t\t\t\tlang\t\t\t: lang,\n\t\t\t\t\tsql_filter\t\t: sql_filter,\n\t\t\t\t\tlimit\t\t\t: limit,\n\t\t\t\t\tgroup\t\t\t: (group.length>0) ? group.join(\",\") : null,\n\t\t\t\t\tcount\t\t\t: false,\n\t\t\t\t\torder\t\t\t: order,\n\t\t\t\t\tprocess_result\t: process_result\n\t\t\t\t}\n\t\t\t\tdata_manager.request({\n\t\t\t\t\tbody : request_body\n\t\t\t\t})\n\t\t\t\t.then((response)=>{\n\t\t\t\t\t// data parsed\n\t\t\t\t\tconst data = page.parse_catalog_data(response.result)\n\n\t\t\t\t\tresolve(data)\n\t\t\t\t})\n\t\t})\n\n\t},\n\n}//end analysis\n\n"],"mappings":"gDAMO,MAaMA,EAAgB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WA2BpG,SAASC,EAAcC,EAAaC,GACvC,GAAIC,KAAKC,cAAgBJ,EACrB,MAAM,IAAIK,MAAM,yDAEpBL,EAAcM,oBASdH,KAAKI,GAAKP,EAAcM,kBAOxBH,KAAKF,YAAcA,EAMnBE,KAAKK,kBAAoBN,EAAQO,mBAAoB,EAMrDN,KAAKO,+BAA4BC,EAMjCR,KAAKS,oBAAiBD,EAMrBR,KAAKU,uBAAyBX,EAAQY,wBAAyB,EAOhEX,KAAKY,wBAAqBJ,CAC9B,CC7EO,SAASK,EAAiBf,EAAaC,GAC1C,GAAIC,KAAKC,cAAgBY,EACrB,MAAM,IAAIX,MAAM,4DAEpBL,EAAciB,KAAKd,KAAMF,EAAaC,GAKtCC,KAAKe,SAAMP,CAEf,CC5BO,SAASQ,EAAkBC,GACC,GAA3BA,EAAQC,KAAK,WACbD,EAAQE,aAAaD,KAAK,UAAW,GAErCD,EAAQE,aAAaD,KAAK,UAAW,EAE7C,CAYO,SAASE,EAASC,EAAOC,EAAMC,GAClC,MAAMC,GAASF,EAAKD,IAAQE,EAAO,GACnC,OAAOE,GAAGC,MAAMH,GAAQI,KAAKC,GAAMP,EAAMO,EAAEJ,GAC/C,CFiFA3B,EAAcM,kBAAoB,EAOlCN,EAAcgC,UAAUC,UAAY,WAChC,MAAO,QAAQ9B,KAAKI,IACxB,EAaAP,EAAcgC,UAAUE,OAAS,WAQ7B/B,KAAKF,YAAYkC,kBAGbhC,KAAKK,mBACLL,KAAKiC,yBAITjC,KAAKkC,cAGDlC,KAAKU,wBACLV,KAAKmC,sBAGb,EAQAtC,EAAcgC,UAAUI,uBAAyB,WAC7C,MAAMG,EAAoBpC,KAAKqC,+BAC/B,GAAID,EAAkBE,OAAQ,CAC1BtC,KAAKuC,yBAA2BC,OAAOC,mBAAmB,CACtDC,aAAc,MACdtC,GAAI,GAAGJ,KAAK8B,uCACZa,WAAY,oCACZC,MAAO,CACHC,QAAW,OACX,iBAAkB,MAClB,kBAAmB,UAEvBC,OAAQ9C,KAAKF,cAEjB,MAAMiD,EAAgBP,OAAOC,mBAAmB,CAC5CC,aAAc,SACdtC,GAAI,GAAGJ,KAAK8B,kCACZc,MAAO,CACHI,MAAS,OAEbF,OAAQ9C,KAAKuC,2BAGjB,IAAK,MAAMU,KAAUb,EACjBI,OAAOC,mBAAmB,CACtBC,aAAc,SACdQ,MAAOD,EACPE,aAAcF,EAAOG,cACrBN,OAAQC,IAGcP,OAAOC,mBAAmB,CACpDC,aAAc,SACdS,aAAcE,QAAQC,UAAY,WAClCV,MAAO,CACHI,MAAS,OAEbF,OAAQ9C,KAAKuC,2BAEKgB,iBAAiB,SAAS,KAC5CvD,KAAKwD,eAAeT,EAAcG,MAAK,GAEnD,CACA,EAWArD,EAAcgC,UAAUK,YAAc,WAClClC,KAAKS,eAAiB+B,OAAOC,mBAAmB,CAC5CC,aAAc,MACdtC,GAAI,GAAGJ,KAAK8B,6BACZa,WAAY,0BACZG,OAAQ9C,KAAKF,aAErB,EAWAD,EAAcgC,UAAUM,qBAAuB,WAC3CnC,KAAKY,mBAAqB4B,OAAOC,mBAAmB,CAChDC,aAAc,MACdtC,GAAI,GAAGJ,KAAK8B,4BACZa,WAAY,wBACZG,OAAQ9C,KAAKF,aAErB,EAcAD,EAAcgC,UAAU2B,eAAiB,SAAUP,GAK/C,MAAMQ,EAAW,SAAyBR,IAKpCS,EAAqB,qBAAqBT,IAChD,QAAiCzC,IAA7BR,KAAK0D,GACL,MAAM,IAAIxD,MAAM,GAAGwD,yBAEvB1D,KAAK0D,GAAoBD,EAC7B,EAYA5D,EAAcgC,UAAUQ,6BAA+B,WACnD,MAAO,EACX,ECvPAsB,OAAOC,eAAe/C,EAAiBgB,UAAWhC,EAAcgC,WAYhEhB,EAAiBgB,UAAUK,YAAc,WACrCrC,EAAcgC,UAAUK,YAAYpB,KAAKd,MAEzCA,KAAKe,IAAMU,GAAGoC,OAAO7D,KAAKS,gBACrBqD,OAAO,OAEP5C,KAAK,UAAW,OAChBA,KAAK,QAAS,8BACdA,KAAK,QAAS,OACvB,EAQAL,EAAiBgB,UAAUQ,6BAA+B,WACtD,MAAO,CAAC,MACZ,EAQAxB,EAAiBgB,UAAUkC,sBAAwB,SAAUN,GACzD,MAAMO,EAAWhE,KAAKe,IAAIkD,OAAOC,UAC3BC,EAAW,IAAIC,KAAK,CAACJ,GAAW,CAAEK,KAAM,gCACxCC,EAAMC,IAAIC,gBAAgBL,GAK1BM,EAAUjC,OAAOC,mBAAmB,CACtCC,aAAc,IACdgC,KAAMJ,IAEVG,EAAQE,aAAa,WAAYlB,GACjCgB,EAAQG,QACRH,EAAQI,SACRN,IAAIO,gBAAgBR,EACxB,ECzDO,MAAMS,EAAS,CAElBC,MAASvD,GAAGwD,WAEZ,eAAgBxD,GAAGyD,iBAEnB,aAAczD,GAAG0D,eAEjBC,OAAU3D,GAAG4D,YAEb,SAAU5D,GAAG6D,WAEb,SAAU7D,GAAG8D,WAEbC,SAAY/D,GAAGgE,cAEf,kBAAmBhE,GAAGiE,oBAEtB,gBAAiBjE,GAAGkE,kBAEpB,cAAelE,GAAGmE,gBAElB,qBAAsBnE,GAAGoE,sBAEzB,mBAAoBpE,GAAGqE,oBAEvBC,OAAUtE,GAAGuE,YAEb,gBAAiBvE,GAAGwE,kBAEpB,aAAcxE,GAAGyE,eAEjB,aAAczE,GAAG0E,eAEjBC,QAAW3E,GAAG4E,aAEdC,KAAQ7E,GAAG8E,UAEX,aAAc9E,GAAG+E,eAEjB,cAAe/E,GAAGgF,iBChEf,SAASC,IAAiB,CCgB1B,SAASC,KAAeC,GAC9B,IAAKA,EAAKtE,OACT,MAAM,IAAIpC,MAAM,6BAEjB,MAAM2G,EAAOD,EAAK,GAAGtE,OACrB,IAAK,MAAMwE,KAAOF,EAAKG,MAAM,GAC5B,GAAID,EAAIxE,SAAWuE,EAClB,OAAO,EAGT,IAAK,IAAIjF,EAAI,EAAGA,EAAIiF,EAAMjF,IAAK,CAC9B,MAAMsB,EAAQ0D,EAAK,GAAGhF,GACtB,IAAK,MAAMkF,KAAOF,EAAKG,MAAM,GAC5B,GAAID,EAAIlF,KAAOsB,EACd,OAAO,CAGX,CACC,OAAO,CACR,CD5BAwD,EAAeM,KAAO,SAAUC,GAC/B,OAAOC,KAAKC,KAAKD,KAAKF,KAAKC,EAAO3E,QACnC,EAOAoE,EAAeU,QAAU,SAAUH,GAClC,OAAOC,KAAKC,KAAKD,KAAKG,KAAKJ,EAAO3E,SAAW,CAC9C,EAOAoE,EAAeY,KAAO,SAAUL,GAC/B,OAAOC,KAAKC,KAAK,EAAED,KAAKK,IAAIN,EAAO3E,OAAQ,EAAE,GAC9C,EAQAoE,EAAec,MAAQ,SAAUP,GAChC,MAAMQ,EAAIR,EAAO3E,OACjB,GAAImF,EAAI,EACP,MAAM,IAAIvH,MAAM,4CAEjB,MAAMwH,EAAQR,KAAKF,KAAK,GAAGS,EAAE,KAAKA,EAAE,IAAIA,EAAE,KACpCE,EAAMlG,GAAGmG,UAAUX,GACnBY,EAAOpG,GAAGoG,KAAKZ,GACfa,EAAMrG,GAAGqG,IAAIb,GAGbc,EAAQb,KAAKF,KAAKS,GAAGA,EAAE,KAAKA,EAAE,KAAMK,EAAIL,EAAEI,IAAOJ,EAAEP,KAAKK,IAAII,EAAK,KACvE,OAAO,EAAIT,KAAKC,KAAKD,KAAKG,KAAKI,IAAMP,KAAKC,KAAKD,KAAKG,KAAK,EAAEH,KAAKc,IAAID,GAAML,GAC3E,EAQAhB,EAAeuB,MAAQ,SAAUhB,GAChC,GAAIA,EAAO3E,OAAS,EACnB,MAAM,IAAIpC,MACT,yEAGF,OAAOgH,KAAKC,MACV1F,GAAGyG,IAAIjB,GAAQxF,GAAG0G,IAAIlB,IAASC,KAAKK,IAAIN,EAAO3E,OAAQ,EAAE,IAAI,KAAKb,GAAGmG,UAAUX,IAElF,EAOAP,EAAe0B,kBAAoB,SAAUnB,GAC5C,MAAMoB,EAAY5G,GAAG6G,SAASrB,EAAQ,KAChCsB,EAAY9G,GAAG6G,SAASrB,EAAQ,KAChCuB,EAAOH,EAAYE,EACzB,GAAIA,IAAcF,EACjB,MAAM,IAAInI,MAAM,aAEjB,OAAOgH,KAAKC,MACV1F,GAAGyG,IAAIjB,GAAQxF,GAAG0G,IAAIlB,IAASC,KAAKK,IAAIN,EAAO3E,OAAQ,EAAE,IAAI,EAAEkG,GAElE,EE7EA,MAAMC,EAAgB,CAClB,aAAc,OACdC,QAAW,QACX,eAAgB,QAChB,YAAa,QACb7F,QAAW,QAOT8F,EAAmB,MAUnBC,EAAiB,QAWjBC,EAAwB,gBAKxBC,EAAmB,IAAIC,MAAMF,GAK7BG,EAAiC,yBA8BhC,SAASC,EAAqBnJ,EAAaoJ,EAAMC,EAAYpJ,GAChEc,EAAiBC,KAAKd,KAAMF,EAAaC,GAKzCC,KAAKoJ,UAAYrJ,EAAQsJ,WAAY,EACrC,MAAMC,EAAavJ,EAAQuJ,aAAc,EACzC,IAAKJ,EAAK5G,OACN,MAAM,IAAIpC,MAAM,uBAyBpBF,KAAKuJ,MAAQD,EACEJ,EAAKM,MAAK,CAACC,EAAGC,IAAMD,EAAEE,IAAIC,OAAOC,cAAcH,EAAEC,IAAIC,UACrDV,EACf,IAAK,MAAOtH,EAAGkI,KAAQ9J,KAAKuJ,MAAMQ,UAC9BD,EAAIE,QAAUC,EAAaH,EAAI7C,QAC/B6C,EAAII,SAAWJ,EAAI7C,OAAOkD,QACrBC,GAAMA,EAAIN,EAAIE,QAAQK,aAAeD,EAAIN,EAAIE,QAAQM,cAE1DR,EAAIS,OAAS9I,GAAG8I,OAAOT,EAAI7C,QAM/BjH,KAAKwK,aAAe/I,GAAG8I,OAAOvK,KAAKuJ,MAAM5H,KAAKmI,GAAQA,EAAIS,SAAQE,QAMlEzK,KAAK0K,aAAe1K,KAAKuJ,MAAM5H,KAAKmI,GAAQa,EAASb,EAAIH,OAMzD3J,KAAK4K,UAAY1B,EAAK,GAAGS,IAAIrH,OAM7BtC,KAAK6K,YAAc1B,EAMnBnJ,KAAK8K,QAAU9K,KAAKuJ,MAAM5H,KAAI,CAACoJ,EAAGnJ,IAAMhC,EAAcgC,EAAIhC,EAAc0C,UAMxEtC,KAAKgL,QAAUjL,EAAQkL,QAAU,KAKjCjL,KAAKkL,cAAgBlL,KAAKgL,QAAU,GAAK,GAKzChL,KAAKmL,YAAcnL,KAAKuJ,MAAMjH,OAAS,IACjC,cAAc4E,KAAKF,KAAKhH,KAAKuJ,MAAMjH,QAAU,cAAgBtC,KAAKkL,cAClE,GAAGlL,KAAKuJ,MAAMjH,OAAStC,KAAKkL,cAKlClL,KAAKoL,aAAe,IA6BpBpL,KAAKqL,OAAS,GACdrL,KAAKqL,OAAOC,OAAS,CAAEC,IAAK,GAAIC,MAAO,EAAGC,OAAQ,GAAIC,KAAM1L,KAAKkL,eACjElL,KAAKqL,OAAOrI,MAAQhD,KAAKmL,YAAcnL,KAAKqL,OAAOC,OAAOI,KAAO1L,KAAKqL,OAAOC,OAAOE,MACpFxL,KAAKqL,OAAOM,OAAS3L,KAAKoL,aAAepL,KAAKqL,OAAOC,OAAOC,IAAMvL,KAAKqL,OAAOC,OAAOG,OACrFzL,KAAKqL,OAAOO,OAASnK,GAAGoK,cACnBnK,MAAM,CAAC1B,KAAKqL,OAAOM,OAAQ,IAC3BG,OAAO9L,KAAKwK,cACZuB,OAAM,GACX/L,KAAKqL,OAAOW,gBAAkB,EAE9BhM,KAAKqL,OAAOY,MAAQxK,GAAGyK,SAASlM,KAAKqL,OAAOO,QACvCO,YAAW,CAACC,EAAGxK,IAAMA,EAAI5B,KAAKqL,OAAOW,gBAAkB,GAAKI,EAAEC,QAAQ,KACtEC,MAAM,IACXtM,KAAKqL,OAAOkB,aAAe,CAACC,QAAS,GAAKtJ,MAAO,IACjDlD,KAAKqL,OAAOoB,UAAY,CAACD,QAAS,GAAKtJ,MAAO,IAC9ClD,KAAKqL,OAAOqB,OAASjL,GAAGkL,YACnBb,OAAO9L,KAAK0K,cACZhJ,MAAM,CAAC,EAAG1B,KAAKqL,OAAOrI,QAE3BhD,KAAKqL,OAAOuB,MAAQnL,GAAGoL,WAAW7M,KAAKqL,OAAOqB,QACzCP,YAAYC,IAAMU,OAixCRnD,EAjxCkByC,EAkxC1BzC,EAAIoD,MAAMC,IAlxCmB,GAixCxC,IAAmBrD,CAjxCuB,IACtC3J,KAAKqL,OAAO4B,iBAAmBlN,EAAQkN,kBAAoB,EAC3DjN,KAAKqL,OAAO6B,OAASlN,KAAKuJ,MAAM5H,KAAKmI,IACjC,MAAMqD,EAAgBzG,EAAeU,QAAQ0C,EAAI7C,QACjD,MAAO,CACHuF,QAASW,EACTjK,MAAOiK,EACnB,IAEInN,KAAKqL,OAAO+B,UAAYpN,KAAKuJ,MAAM5H,KAAI,CAACmI,EAAKlI,IAClCH,GAAG4L,MAAMvB,OAAOhC,EAAIS,QACtB+C,WACGlM,EAAS0I,EAAIS,OAAO,GAAIT,EAAIS,OAAO,GAAIvK,KAAKqL,OAAO6B,OAAOtL,GAAGsB,MAAM,MAG/ElD,KAAKqL,OAAOkC,KAAOvN,KAAKuJ,MAAM5H,KAAI,CAACmI,EAAKlI,IAC7B5B,KAAKqL,OAAO+B,UAAUxL,GAAGkI,EAAI7C,UAExCjH,KAAKqL,OAAOmC,iBAAmB,CAC3B,QAAS,SAAU,WAAY,cAAe,SAC9C,aAAc,UAAW,QAE7BxN,KAAKqL,OAAOoC,aAAe1I,EAAO/E,KAAKqL,OAAOmC,iBAAiB,IAkB/DxN,KAAK0N,UAAY,CAEbC,OAAQ,KAERC,QAAS,KAETC,QAAS,KAETD,QAAS,KAETE,QAAS,KAETC,YAAa,KAEbC,UAAW,KAEXC,QAAS,GAETC,QAAS,KAEThE,SAAU,GAEViE,YAAa,MAcjBnO,KAAKoO,UAAY,GACjBpO,KAAKoO,UAAUC,oBAAsB,EACrCrO,KAAKoO,UAAUE,eAAiB,CACpC,CAopCA,SAASrE,EAAahD,GAClB,MAAM+C,EAAU,CACZ9B,IAAK,KACLoC,YAAa,KACbjC,UAAW,KACXkG,OAAQ,KACR1G,KAAM,KACNW,IAAK,KACLD,UAAW,KACX8B,YAAa,KACblC,IAAK,MAaT,OAVA6B,EAAQ7B,IAAM1G,GAAG0G,IAAIlB,GACrB+C,EAAQzB,UAAY9G,GAAG6G,SAASrB,EAAQ,KACxC+C,EAAQuE,OAAS9M,GAAG8M,OAAOtH,GAC3B+C,EAAQnC,KAAOpG,GAAGoG,KAAKZ,GACvB+C,EAAQ3B,UAAY5G,GAAG6G,SAASrB,EAAQ,KACxC+C,EAAQ9B,IAAMzG,GAAGyG,IAAIjB,GACrB+C,EAAQxB,IAAMwB,EAAQ3B,UAAY2B,EAAQzB,UAC1CyB,EAAQK,YAAcL,EAAQzB,UAAY,IAAMyB,EAAQxB,IACxDwB,EAAQM,YAAcN,EAAQ3B,UAAY,IAAM2B,EAAQxB,IAEjDwB,CACX,CA1qCArG,OAAOC,eAAeqF,EAAqBpH,UAAWhB,EAAiBgB,WAwBvEoH,EAAqBpH,UAAU2M,YAAc,SAAUC,GACnD,GAAIA,EAAQnM,SAAWtC,KAAK4K,UACxB,MAAM,IAAI1K,MAAM,wDAEpB,OAAOF,KAAKuJ,MAAMY,QAAQL,IACtB,MAAMH,EAAMG,EAAIH,IAChB,IAAK,IAAI/H,EAAI,EAAGA,EAAI+H,EAAIrH,OAAQV,IAC5B,GAAI6M,EAAQ7M,IAAM6M,EAAQ7M,KAAO+H,EAAI/H,GACjC,OAAO,EAGf,OAAO,IAEf,EAWAqH,EAAqBpH,UAAU6M,mBAAqB,SAAU9M,GAC1D,GAAIA,EAAI,GAAKA,EAAI5B,KAAK4K,UAClB,MAAM,IAAI1K,MAAM,sBAAsB0B,KAG1CA,EAAI5B,KAAK4K,UAAYhJ,EACrB,MAAM+M,EAAe3O,KAAKuJ,MAAM5H,KAAKmI,IACjC,ODzWiB8E,ECyWD9E,EAAIH,IAAI5C,MAAM,EAAEnF,EAAE,GDxWlCiN,KAAKC,MAAMD,KAAKE,UAAUH,KCwWYI,OAAOC,MAAMjP,KAAK4K,UAAUhJ,EAAE,GAAGsN,KAAK,ODzW7E,IAAkBN,CCyWgE,IAErF,IAAKD,EAAarM,OAAQ,OAAOqM,EAEjC,MAAMQ,EAAY,CAACR,EAAa,IAChC,IAAIS,EAAeT,EAAa,GAChC,IAAK,MAAMU,KAAYV,EAAa5H,MAAM,GACjCJ,EAAYyI,EAAcC,KAC3BF,EAAUG,KAAKD,GACfD,EAAeC,GAGvB,OAAOF,CACX,EAUAlG,EAAqBpH,UAAU0N,+BAAiC,SAAUC,GACtE,MAAMC,EAAQD,EAAKlN,OACnB,GAAImN,GAASzP,KAAK4K,UACd,MAAM,IAAI1K,MAAM,aAAasP,kCAEjC,MAAMf,EAAUe,EAAKR,OAAOC,MAAMjP,KAAK4K,UAAU6E,GAAOP,KAAK,OACvDQ,EAAY1P,KAAKwO,YAAYC,GAAS9M,KAAKmI,GAAQA,EAAIH,IAAI8F,KACjE,IAAKC,EAAUpN,OAAQ,OAAOoN,EAC9B,MAAMzI,EAAS,CAACyI,EAAU,IAC1B,IAAIC,EAAgBD,EAAU,GAC9B,IAAK,MAAMxM,KAASwM,EAAU3I,MAAM,GAC5B7D,IAAUyM,IACV1I,EAAOqI,KAAKpM,GACZyM,EAAgBzM,GAGxB,OAAO+D,CACX,EAOAgC,EAAqBpH,UAAU+N,iBAAmB,SAAUjG,GACxD,MAAM/H,EAAI5B,KAAKuJ,MAAMsG,WAAW/F,GAAQA,EAAIH,IAAIC,SAAWD,EAAIC,SAC/D,IAAW,IAAPhI,EACA,MAAM,IAAI1B,MAAM,OAAOyJ,2BAE3B,OAAO/H,CACX,EAQAqH,EAAqBpH,UAAUiO,iBAAmB,SAAUC,GACxD/P,KAAKqL,OAAOkB,aAAarJ,MAAQ6M,EAEjC/P,KAAK0N,UAAUM,UAAUgC,UAAU,KAAKnL,SACxC7E,KAAKiQ,iBAAgB,EACzB,EAUAhH,EAAqBpH,UAAUqO,WAAa,SAAUtO,EAAGsL,GACrD,MAAMiD,EAAQnQ,KAAKqL,OACbd,EAASvK,KAAKuJ,MAAM3H,GAAG2I,OAC7B4F,EAAMjD,OAAOtL,GAAGsB,MAAQgK,EACxBiD,EAAM/C,UAAUxL,GAAG0L,WACflM,EAASmJ,EAAO,GAAIA,EAAO,GAAI2C,EAAO,IAE1CiD,EAAM5C,KAAK3L,GAAKuO,EAAM/C,UAAUxL,GAAG5B,KAAKuJ,MAAM3H,GAAGqF,QAEjDjH,KAAK0N,UAAUO,QAAQrM,GAAGoO,UAAU,KAAKnL,SACzC7E,KAAKoQ,eAAexO,EACxB,EASAqH,EAAqBpH,UAAUwO,iBAAmB,SAAUC,GACxDtQ,KAAKqL,OAAOoC,aAAe1I,EAAOuL,GAElCtQ,KAAK0N,UAAUM,UAAUgC,UAAU,KAAKnL,SACxC7E,KAAKiQ,iBAAgB,EACzB,EAQAhH,EAAqBpH,UAAU0O,cAAgB,SAAUR,GACrD/P,KAAKqL,OAAOoB,UAAUvJ,MAAQ6M,EAE9B/P,KAAK0N,UAAUQ,QAAQ8B,UAAU,KAAKnL,SACtC7E,KAAKwQ,eAAc,EACvB,EAQAvH,EAAqBpH,UAAUK,YAAc,WACzCrB,EAAiBgB,UAAUK,YAAYpB,KAAKd,MAExCA,KAAKoJ,YACLpJ,KAAKe,IAAIG,KAAK,QAAS,MACvBlB,KAAKe,IAAIG,KAAK,SAAU,SACxBlB,KAAKS,eAAemC,MAAQ,mBAIhC5C,KAAKe,IAAIG,KAAK,UAAW,OAAOlB,KAAKmL,eAAenL,KAAKoL,gBAGzDpL,KAAK0N,UAAUC,OAAS3N,KAAKe,IAAI+C,OAAO,KACnC5C,KAAK,YAAa,aAAalB,KAAKqL,OAAOC,OAAOI,QAAQ1L,KAAKqL,OAAOC,OAAOC,QAElFvL,KAAKyQ,eACLzQ,KAAK0Q,gBACD1Q,KAAK4K,UAAY,GACjB5K,KAAK2Q,wBAET3Q,KAAKiQ,kBACLjQ,KAAKwQ,gBACLxQ,KAAK4Q,iBAET,EAQA3H,EAAqBpH,UAAU4O,aAAe,WAC1C,MAAMI,EAAI7Q,KAAK0N,UAAUC,OAEzB3N,KAAK0N,UAAUoD,QAAUD,EAAE/M,OAAO,KAC7B5C,KAAK,YAAa,eAAelB,KAAKqL,OAAOM,WAClD,MAAMmF,EAAU9Q,KAAK0N,UAAUoD,QAC/B9Q,KAAK0N,UAAUG,QAAUiD,EAAQhN,OAAO,KACnChD,KAAKd,KAAKqL,OAAOuB,OACtB5M,KAAK+Q,yBAELD,EAAQhN,OAAO,QACV5C,KAAK,cAAe,UACpBA,KAAK,IAAK,IACVA,KAAK,IAAKlB,KAAKqL,OAAOrI,MAAQ,GAC9BgO,KAAKhR,KAAK6K,YAAY7K,KAAK6K,YAAYvI,OAAO,IAGnDtC,KAAK0N,UAAUE,QAAUiD,EAAE/M,OAAO,KAClC,MAAM8J,EAAU5N,KAAK0N,UAAUE,QAC/B5N,KAAK0N,UAAUI,QAAUF,EAAQ9J,OAAO,KACnChD,KAAKd,KAAKqL,OAAOY,OAEtB2B,EAAQ9J,OAAO,QACV5C,KAAK,cAAe,UACpBA,KAAK,YAAa,eAClBA,KAAK,IAAgC,GAA1BlB,KAAKqL,OAAOC,OAAOI,MAC9BxK,KAAK,KAAMlB,KAAKqL,OAAOM,OAAS,GAChCqF,KAAKhR,KAAKgL,QAEnB,EAOA/B,EAAqBpH,UAAUkP,uBAAyB,WACpD,MAAME,EAAQjR,KAAKqL,OAAO4B,iBACpBY,EAAU7N,KAAK0N,UAAUG,QAC3BoD,EAAQ,GACRpD,EAAQmC,UAAU,QACb9O,KAAK,cAAe,UACpBA,KAAK,KAAM,SACXA,KAAK,KAAM,KACXA,KAAK,YAAa,WAAWlB,KAAKqL,OAAO4B,sBAE9CY,EAAQmC,UAAU,QACb9O,KAAK,cAAe,OACpBA,KAAK,MAAU+P,EAAMA,EAAM,YAAhB,MACX/P,KAAK,KAAM,UACXA,KAAK,YACF,WAAWlB,KAAKqL,OAAO4B,qBAE3BgE,EAAQ,IACRpD,EAAQmC,UAAU,QACb9O,KAAK,KAAM,UAG5B,EAQA+H,EAAqBpH,UAAU6O,cAAgB,WAC7B1Q,KAAK0N,UAAUI,QAAQkC,UAAU,UACzClM,OAAO,QACR5C,KAAK,KAAM,GACXA,KAAK,KAAM,GACXA,KAAK,KAAMlB,KAAKqL,OAAOrI,OACvB9B,KAAK,KAAM,GACXA,KAAK,UAAU,CAAC6J,EAAGnJ,IAAMA,EAAI,EAAI,UAAY,YAC7CV,KAAK,gBAAgB,CAAC6J,EAAGnJ,IAAMA,EAAI,EAAI,GAAM,KAC7CV,KAAK,SAAS,CAAC6J,EAAGnJ,IAAMA,EAAI,EAAI,QAAU,UAC1CV,KAAK,UAAW,EACzB,EAQA+H,EAAqBpH,UAAUqP,iBAAmB,SAAUC,GACxD,MAAMC,EAAcpR,KAAK0N,UAAUI,QAAQkC,UAAU,qBAC/CqB,EAAgBD,EAAYlQ,KAAK,WACjCoQ,EAActR,KAAK0N,UAAUI,QAAQkC,UAAU,qBAC/CuB,EAAgBD,EAAYpQ,KAAK,WACvC,OAAQiQ,GACJ,IAAK,OACoB,GAAjBE,GACArQ,EAAkBoQ,GAED,GAAjBG,GACAvQ,EAAkBsQ,GAEtB,MACJ,IAAK,QACoB,GAAjBD,GACArQ,EAAkBoQ,GAED,GAAjBG,GACAvQ,EAAkBsQ,GAEtB,MACJ,IAAK,gBACoB,GAAjBD,GACArQ,EAAkBoQ,GAED,GAAjBG,GACAvQ,EAAkBsQ,GAEtB,MACJ,QACI,MAAM,IAAIpR,MAAM,cAAciR,wBAE1C,EAQAlI,EAAqBpH,UAAU8O,sBAAwB,WACnD3Q,KAAK0N,UAAU8D,gBAAkBxR,KAAK0N,UAAUC,OAAO7J,OAAO,KAC9D,MAAM2N,EAAazR,KAAK0N,UAAU8D,gBAC5BE,EAAQ,OACRC,EAAW3R,KAAK0O,mBAAmB,GAEzC,IAAI9M,EAAI,EACR,IAAK,MAAOgQ,EAAOnD,KAAYkD,EAAS5H,UAAW,CAC/C,MAAM8H,EAAe7R,KAAKwO,YAAYC,GAChCqD,EAAI9R,KAAKqL,OAAOqB,OAAO1M,KAAK0K,aAAa9I,IACzCmQ,EAAYN,EAAW3N,OAAO,KAC/B5C,KAAK,YAAa,aAAa4Q,QACtB,IAAVF,GACAG,EAAUjO,OAAO,QACZ5C,KAAK,KAAM,GACXA,KAAK,KAAM,GACXA,KAAK,KAAM,GACXA,KAAK,KAAMlB,KAAKqL,OAAOM,QACvBzK,KAAK,SAAUwQ,GACfxQ,KAAK,eAAgB,IACrBA,KAAK,mBAAoBlB,KAAKqL,OAAOM,OAAO,IAErDoG,EAAUjO,OAAO,QACZ5C,KAAK,cAAe,OACpBA,KAAK,YAAa,eAClBA,KAAK,IAAK,SACVA,KAAK,IAAK,UACVA,KAAK,YAAa,SAClBA,KAAK,OAAQwQ,GACbV,KAAKvC,EAAQA,EAAQnM,OAAO,IAEjCV,GAAKiQ,EAAavP,MAC1B,CACA,EAUA2G,EAAqBpH,UAAUoO,gBAAkB,SAAU+B,GAAW,GAClE,MAAM7B,EAAQnQ,KAAKqL,OACbwF,EAAI7Q,KAAK0N,UAAUC,OAGpBqE,IACDhS,KAAK0N,UAAUM,UAAY6C,EAAE/M,OAAO,MAExC,MAAMkK,EAAYhO,KAAK0N,UAAUM,UACjC,IAAK,MAAOpM,EAAGqQ,KAAejS,KAAK0K,aAAaX,UAC5C/J,KAAK0N,UAAUO,QAAQrM,GAAKoM,EAAUlK,OAAO,KACxC5C,KAAK,YAAa,aAAaiP,EAAMzD,OAAOuF,SACjDjS,KAAKoQ,eAAexO,EAG5B,EASAqH,EAAqBpH,UAAUuO,eAAiB,SAAUxO,GACtD,MAAM2L,EAAOvN,KAAKqL,OAAOkC,KAAK3L,GACxB2K,EAAevM,KAAKqL,OAAOkB,aAAarJ,MACxCgP,EAAYlS,KAAKqL,OAAOqB,OAAOwF,YAC/BtG,EAAS5L,KAAKqL,OAAOO,OACrB6B,EAAezN,KAAKqL,OAAOoC,aAG3B0E,EAAY1Q,GAAGyG,IAAIqF,GAAOF,GAAQA,EAAI/K,SAEtC8P,EAAQ3Q,GAAGoK,cACZnK,MAAM,CAAC,EAAGwQ,IACVpG,OAAO,EAAEqG,EAAWA,IAGrBnS,KAAKuJ,MAAM3H,GAAGqF,OAAO3E,OAAS,GAC9BtC,KAAK0N,UAAUO,QAAQrM,GAClBkC,OAAO,QACPuO,MAAM9E,GACF3K,MAAM,SAAU,QAChBA,MAAM,eAAgB,IACtBA,MAAM,OAAQ,WACd1B,KAAK,IAAKO,GAAG6Q,OACTC,IAAInG,GAAMgG,GAAOhG,EAAE9J,OAAOiK,KAC1BiG,IAAIpG,GAAMgG,EAAMhG,EAAE9J,OAAOiK,KACzBkG,GAAGrG,GAAMR,EAAOQ,EAAEmG,MAClBG,MAAMjF,GAG3B,EAWAxE,EAAqBpH,UAAU2O,cAAgB,SAAUwB,GAAW,GAEhE,MAAM7B,EAAQnQ,KAAKqL,OACbwF,EAAI7Q,KAAK0N,UAAUC,OAGpBqE,IACDhS,KAAK0N,UAAUQ,QAAU2C,EAAE/M,OAAO,MAEtC,MAAM6O,EAAQ3S,KAAK0N,UAAUQ,QACvBgE,EAAY/B,EAAMzD,OAAOwF,YACzBU,EAAY5S,KAAKqL,OAAOoB,UAAUvJ,MAAQgP,EAMhD,IAAK,MAAOtQ,EAAGkI,KAAQ9J,KAAKuJ,MAAMQ,UAAW,CAEzC,MAAMC,EAAUF,EAAIE,QACd0H,EAAQ1R,KAAK8K,QAAQlJ,GACrB+H,EAAMG,EAAIH,IAEVkJ,EAAYF,EAAM7O,OAAO,KAC1B5C,KAAK,YAAa,aAAaiP,EAAMzD,OAAO/B,EAAShB,IAAQuI,EAAY,QAG9ElS,KAAK0N,UAAUxD,SAAStI,GAAKiR,EAAU/O,OAAO,KAC9C,MAAMoG,EAAWlK,KAAK0N,UAAUxD,SAAStI,GACzC,IAAK,MAAMkR,KAAWhJ,EAAII,SACtBA,EAASpG,OAAO,UACX5C,KAAK,KAAM,GACXA,KAAK,KAAMiP,EAAMvE,OAAOkH,IACxB5R,KAAK,IAAK,GACV0B,MAAM,OAAQ8O,GACd9O,MAAM,UAAW,IAI1B,MAAMmQ,EAAWF,EAAU/O,OAAO,KAClCiP,EAASjP,OAAO,QACX5C,KAAK,KAAM,GACXA,KAAK,KAAMiP,EAAMvE,OAAO5B,EAAQK,cAChCnJ,KAAK,KAAM,GACXA,KAAK,KAAMiP,EAAMvE,OAAO5B,EAAQM,cAChCpJ,KAAK,SAAUwQ,GACfxQ,KAAK,eAjCM,GAkChB6R,EAASjP,OAAO,QACX5C,KAAK,MAAO0R,EAAY,GACxB1R,KAAK,KAAMiP,EAAMvE,OAAO5B,EAAQK,cAChCnJ,KAAK,KAAM0R,EAAY,GACvB1R,KAAK,KAAMiP,EAAMvE,OAAO5B,EAAQK,cAChCnJ,KAAK,SAAUwQ,GACfxQ,KAAK,eAxCM,GAyChB6R,EAASjP,OAAO,QACX5C,KAAK,MAAO0R,EAAY,GACxB1R,KAAK,KAAMiP,EAAMvE,OAAO5B,EAAQM,cAChCpJ,KAAK,KAAM0R,EAAY,GACvB1R,KAAK,KAAMiP,EAAMvE,OAAO5B,EAAQM,cAChCpJ,KAAK,SAAUwQ,GACfxQ,KAAK,eA/CM,GAkDhB,MAAMsH,EAAMqK,EAAU/O,OAAO,KAEzBgG,EAAI7C,OAAO3E,OAAS,GACpBkG,EAAI1E,OAAO,QACV5C,KAAK,KAAM0R,EAAY,GACvB1R,KAAK,IAAKiP,EAAMvE,OAAO5B,EAAQ3B,YAC/BnH,KAAK,QAAS0R,GACd1R,KAAK,SAAUiP,EAAMvE,OAAO5B,EAAQzB,WAAa4H,EAAMvE,OAAO5B,EAAQ3B,YACtEnH,KAAK,OAAQwQ,GAElBlJ,EAAI1E,OAAO,QACN5C,KAAK,MAAO0R,EAAY,GACxB1R,KAAK,KAAMiP,EAAMvE,OAAO5B,EAAQuE,SAChCrN,KAAK,KAAM0R,EAAY,GACvB1R,KAAK,KAAMiP,EAAMvE,OAAO5B,EAAQuE,SAChCrN,KAAK,SAAU,SACfA,KAAK,eAjEI,GAkECsH,EAAI1E,OAAO,UACrB5C,KAAK,KAAM,GACXA,KAAK,KAAMiP,EAAMvE,OAAO5B,EAAQuE,SAChCrN,KAAK,IAAK,KACV0B,MAAM,OAAQ,SACd1B,KAAK,SAAU,SACfA,KAAK,eAAgB,GAEnB8R,GAAG,aAAa,KACnBhT,KAAK0N,UAAUS,YAAYvL,MAAM,UAAW,MAC5C5C,KAAKiT,cAAcrR,EAAC,IACrBoR,GAAG,YAAY,KACdhT,KAAK0N,UAAUS,YAAYvL,MAAM,UAAW,OAAM,GAE9D,CAEA,EAQAqG,EAAqBpH,UAAU+O,gBAAkB,WAC7C,MAAMsC,EAAkB1Q,OAAOC,mBAAmB,CAC9CC,aAAc,MACdtC,GAAI,GAAGJ,KAAK8B,0BACZa,WAAY,UDh1Bb,IAAsBwQ,EAAUC,EAAVD,ECk1BZD,GDl1BsBE,ECk1BLpT,KAAKS,gBDj1BrB4S,WAAWC,aAAaH,EAAUC,EAAcG,aCk1B9DvT,KAAK0N,UAAUS,YAAc1M,GAAGoC,OAAOqP,GACvC,MAAM/E,EAAcnO,KAAK0N,UAAUS,YACnC,IAAK,MAAOqF,EAAGpJ,KAAMzG,OAAOoG,QAAQtB,GAChC0F,EAAYvL,MAAM4Q,EAAGpJ,EAG7B,EAQAnB,EAAqBpH,UAAUoR,cAAgB,SAAUrR,GACrD,MACM+H,EAAM3J,KAAKuJ,MAAM3H,GAAG+H,IACpB1C,EAASjH,KAAKuJ,MAAM3H,GAAGqF,OACvB+C,EAAUhK,KAAKuJ,MAAM3H,GAAGoI,QACxByJ,EAAe,MAAM9J,EAAIC,KAAK,8DAEX3C,EAAO3E,mBACb0H,EAAQnC,KAAKwE,QAPf,cAQCrC,EAAQ9B,IAAImE,QARb,aASArC,EAAQ3B,UAAUgE,QATlB,iBAUIrC,EAAQuE,OAAOlC,QAVnB,aAWArC,EAAQzB,UAAU8D,QAXlB,cAYCrC,EAAQ7B,IAAIkE,QAZb,YAcjBrM,KAAK0N,UAAUS,YACVuF,KAAKD,EACd,EAQAxK,EAAqBpH,UAAUM,qBAAuB,WAClDtB,EAAiBgB,UAAUM,qBAAqBrB,KAAKd,MAGrD,MAAM2T,EAAkBnR,OAAOC,mBAAmB,CAC9CC,aAAc,MACdI,OAAQ9C,KAAKY,mBACbgC,MAAO,CACHC,QAAW,OACX+Q,UAAa,WACb,kBAAmB,gBACnB,cAAe,YAGvB5T,KAAK6T,oBAAoBF,GACzB3T,KAAK8T,gCAAgCH,GACrC3T,KAAK+T,8BAA8BJ,GACnC3T,KAAKgU,qBACLhU,KAAKiU,wBACLjU,KAAKkU,sBACLlU,KAAKmU,wBAET,EASAlL,EAAqBpH,UAAUgS,oBAAsB,SAAUO,GAC3D,MAAMC,EAAmB7R,OAAOC,mBAAmB,CAC/CC,aAAc,MACdI,OAAQsR,EACRxR,MAAO,CACHC,QAAW,OACXyR,IAAO3L,KAGT4L,EAAiB,GAAGvU,KAAK8B,0BACLU,OAAOC,mBAAmB,CAChDC,aAAc,QACdS,aAAcE,QAAQmR,MAAQ,OAC9B1R,OAAQuR,EACRzR,MAAO,CAAC,eAAgB,UAEV+B,aAAa,MAAO4P,GACtC,MAAME,EAAcjS,OAAOC,mBAAmB,CAC1CC,aAAc,SACdtC,GAAImU,EACJzR,OAAQuR,IAGZ7R,OAAOC,mBAAmB,CACtBC,aAAc,SACdQ,MAAO,OACPC,aAAcE,QAAQqR,QAAU,OAChC5R,OAAQ2R,IAEZjS,OAAOC,mBAAmB,CACtBC,aAAc,SACdQ,MAAO,QACPC,aAAcE,QAAQsR,OAAS,QAC/B7R,OAAQ2R,IAEZjS,OAAOC,mBAAmB,CACtBC,aAAc,SACdQ,MAAO,gBACPC,aAAcE,QAAQuR,aAAe,gBACrC9R,OAAQ2R,IAEZA,EAAYlR,iBAAiB,UAAU,KACnC,MAAM4N,EAAOsD,EAAYvR,MACzBlD,KAAKkR,iBAAiBC,EAAI,GAElC,EASAlI,EAAqBpH,UAAUiS,gCAAkC,SAAUM,GACvE,MAAMS,EAAmBrS,OAAOC,mBAAmB,CAC/CC,aAAc,MACdI,OAAQsR,EACRxR,MAAO,CACHC,QAAW,OACXyR,IAAO3L,KAGTmM,EAA6B,GAAG9U,KAAK8B,sCACLU,OAAOC,mBAAmB,CAC5DC,aAAc,QACdS,aAAcE,QAAQ4J,kBAAoB,qBAC1CnK,OAAQ+R,EACRjS,MAAO,CAAC,eAAgB,UAEE+B,aAAa,MAAOmQ,GAElD,MAAMC,EAA0BvS,OAAOC,mBAAmB,CACtDC,aAAc,QACd2B,KAAM,QACNjE,GAAI0U,EACJhS,OAAQ+R,IAEZE,EAAwBpQ,aAAa,MAAO,GAC5CoQ,EAAwBpQ,aAAa,MAAO,IAC5CoQ,EAAwB7R,MAAQlD,KAAKqL,OAAO4B,iBAC5C8H,EAAwBxR,iBAAiB,SAAS,KAC9CvD,KAAKqL,OAAO4B,iBAAmB+H,OAAOD,EAAwB7R,OAC9DlD,KAAK+Q,wBAAsB,GAEnC,EASA9H,EAAqBpH,UAAUkS,8BAAgC,SAAUK,GACrE,MAAMC,EAAmB7R,OAAOC,mBAAmB,CAC/CC,aAAc,MACdI,OAAQsR,EACRxR,MAAO,CACHC,QAAW,OACXyR,IAAO3L,KAGTsM,EAAkB,GAAGjV,KAAK8B,2BACLU,OAAOC,mBAAmB,CACjDC,aAAc,QACdS,aAAcE,QAAQoK,cAAgB,eACtC3K,OAAQuR,EACRzR,MAAO,CAAC,eAAgB,UAET+B,aAAa,MAAOsQ,GACvC,MAAMC,EAAe1S,OAAOC,mBAAmB,CAC3CC,aAAc,SACdtC,GAAI6U,EACJnS,OAAQuR,IAGZ,IAAK,MAAM/D,KAActQ,KAAKqL,OAAOmC,iBACjChL,OAAOC,mBAAmB,CACtBC,aAAc,SACdQ,MAAOoN,EACPnN,aAAcmN,EACdxN,OAAQoS,IAGhBA,EAAa3R,iBAAiB,UAAU,KACpCvD,KAAKqQ,iBAAiB6E,EAAahS,MAAK,GAEhD,EAQA+F,EAAqBpH,UAAUmS,mBAAqB,WAEhD,MAAMmB,EAAgB3S,OAAOC,mBAAmB,CAC5CC,aAAc,MACdI,OAAQ9C,KAAKY,mBACbgC,MAAO,CACHC,QAAW,OACX+Q,UAAa,WACb,kBAAmB,gBACnB,cAAe,SACf,aAAchL,KAKhBwM,EAAgB5S,OAAOC,mBAAmB,CAC5CC,aAAc,MACdI,OAAQqS,IAENE,EAAwB,GAAGrV,KAAK8B,iCAEhCwT,EAAqB9S,OAAOC,mBAAmB,CACjDC,aAAc,QACd2B,KAAM,WACNjE,GAAIiV,EACJvS,OAAQsS,IAEZE,EAAmBC,SAAU,EAEL/S,OAAOC,mBAAmB,CAC9CC,aAAc,QACdS,cAAeE,QAAQmS,MAAQ,QACf,IACAxV,KAAK6K,YAAY7K,KAAK4K,UAAU,GAAG6K,cACnD3S,OAAQsS,IAEIzQ,aAAa,MAAO0Q,GACpCC,EAAmB/R,iBAAiB,UAAU,KAC1CvC,EAAkBhB,KAAK0N,UAAU8D,gBAAe,IAIpD,MAAMkE,EAAmBlT,OAAOC,mBAAmB,CAC/CC,aAAc,MACdI,OAAQqS,IAENQ,EAA2B,GAAG3V,KAAK8B,oCAEnC8T,EAAwBpT,OAAOC,mBAAmB,CACpDC,aAAc,QACd2B,KAAM,WACNjE,GAAIuV,EACJ7S,OAAQ4S,IAEZE,EAAsBL,SAAU,EAEL/S,OAAOC,mBAAmB,CACjDC,aAAc,QACdS,aAAcE,QAAQwS,cAAgB,eACtC/S,OAAQ4S,IAEO/Q,aAAa,MAAOgR,GACvCC,EAAsBrS,iBAAiB,UAAU,KAC7CvC,EAAkBhB,KAAK0N,UAAUM,UAAS,IAI9C,MAAM8H,EAAiBtT,OAAOC,mBAAmB,CAC7CC,aAAc,MACdI,OAAQqS,IAENY,EAAyB,GAAG/V,KAAK8B,kCAEjCkU,EAAsBxT,OAAOC,mBAAmB,CAClDC,aAAc,QACd2B,KAAM,WACNjE,GAAI2V,EACJjT,OAAQgT,IAEZE,EAAoBT,SAAU,EAEL/S,OAAOC,mBAAmB,CAC/CC,aAAc,QACdS,aAAcE,QAAQ4S,YAAc,aACpCnT,OAAQgT,IAEKnR,aAAa,MAAOoR,GACrCC,EAAoBzS,iBAAiB,UAAU,KAC3CvC,EAAkBhB,KAAK0N,UAAUQ,QAAO,IAM5C,MAAMgI,EAAoB1T,OAAOC,mBAAmB,CAChDC,aAAc,MACdI,OAAQqS,IAENgB,EAA4B,GAAGnW,KAAK8B,qCAEpCsU,EAAyB5T,OAAOC,mBAAmB,CACrDC,aAAc,QACd2B,KAAM,WACNjE,GAAI+V,EACJrT,OAAQoT,IAEZE,EAAuBb,SAAU,EAEL/S,OAAOC,mBAAmB,CAClDC,aAAc,QACdS,aAAcE,QAAQgT,eAAiB,gBACvCvT,OAAQoT,IAEQvR,aAAa,MAAOwR,GACxCC,EAAuB7S,iBAAiB,UAAU,KAC9C,IAAK,MAAM+S,KAAStW,KAAK0N,UAAUxD,SAC/BlJ,EAAkBsV,EAC9B,GAEA,EASArN,EAAqBpH,UAAUoS,sBAAwB,WAEnD,MAAMkB,EAAgB3S,OAAOC,mBAAmB,CAC5CC,aAAc,MACdI,OAAQ9C,KAAKY,mBACbgC,MAAO,CACHC,QAAW,OACX+Q,UAAa,WACb,kBAAmB,gBACnB,cAAe,YAKjB2C,EAAuB/T,OAAOC,mBAAmB,CACnDC,aAAc,MACdI,OAAQqS,EACRvS,MAAO,CACHC,QAAW,OACXyR,IAAO3L,KAGT6N,EAAyB,GAAGxW,KAAK8B,kCACLU,OAAOC,mBAAmB,CACxDC,aAAc,QACdS,aAAcE,QAAQoT,cAAgB,eACtC3T,OAAQyT,EACR3T,MAAO,CACH,eAAgB,UAGE+B,aAAa,MAAO6R,GAE9C,MAAME,EAAsBlU,OAAOC,mBAAmB,CAClDC,aAAc,QACd2B,KAAM,QACNjE,GAAIoW,EACJ1T,OAAQyT,IAEZG,EAAoB/R,aAAa,MAAO,GACxC+R,EAAoB/R,aAAa,MAAO,GACxC+R,EAAoB/R,aAAa,OAAQ,KACzC+R,EAAoBxT,MAAQlD,KAAKqL,OAAOkB,aAAaC,QACrDkK,EAAoBnT,iBAAiB,SAAS,KAC1CvD,KAAK8P,iBAAiBkF,OAAO0B,EAAoBxT,OAAM,IAGzBV,OAAOC,mBAAmB,CACxDC,aAAc,SACd2B,KAAM,SACNlB,aAAcE,QAAQsT,OAAS,QAC/B7T,OAAQyT,IAEchT,iBAAiB,SAAS,KAChDmT,EAAoBxT,MAAQlD,KAAKqL,OAAOkB,aAAaC,QACrDxM,KAAK8P,iBAAiBkF,OAAO0B,EAAoBxT,OAAM,IAI3D,MAAM0T,EAAoBpU,OAAOC,mBAAmB,CAChDC,aAAc,MACdI,OAAQqS,EACRvS,MAAO,CACHC,QAAW,OACXyR,IAAO3L,KAGTkO,EAAsB,GAAG7W,KAAK8B,+BACLU,OAAOC,mBAAmB,CACrDC,aAAc,QACdS,aAAcE,QAAQuP,WAAa,YACnC9P,OAAQ8T,EACRhU,MAAO,CACH,eAAgB,UAGD+B,aAAa,MAAOkS,GAE3C,MAAMC,EAAmBtU,OAAOC,mBAAmB,CAC/CC,aAAc,QACd2B,KAAM,QACNjE,GAAIyW,EACJ/T,OAAQ8T,IAEZE,EAAiBnS,aAAa,MAAO,GACrCmS,EAAiBnS,aAAa,MAAO,GACrCmS,EAAiBnS,aAAa,OAAQ,KACtCmS,EAAiB5T,MAAQlD,KAAKqL,OAAOoB,UAAUD,QAC/CsK,EAAiBvT,iBAAiB,SAAS,KACvCvD,KAAKuQ,cAAcyE,OAAO8B,EAAiB5T,OAAM,IAGtBV,OAAOC,mBAAmB,CACrDC,aAAc,SACd2B,KAAM,SACNlB,aAAcE,QAAQsT,OAAS,QAC/B7T,OAAQ8T,IAEWrT,iBAAiB,SAAS,KAC7CuT,EAAiB5T,MAAQlD,KAAKqL,OAAOoB,UAAUD,QAC/CxM,KAAKuQ,cAAcyE,OAAO8B,EAAiB5T,OAAM,GAEzD,EAQA+F,EAAqBpH,UAAUqS,oBAAsB,WACjD,MAAME,EAAY5R,OAAOC,mBAAmB,CACxCC,aAAc,MACdI,OAAQ9C,KAAKY,mBACbgC,MAAO,CACHC,QAAW,OACX,cAAe,SACfyR,IAtwCiB,MAuwCjB,aA7vCe,SAiwCjByC,EAAc,GAMdC,EAAuBpV,IACzBmV,EAAYnV,GAAGI,kBACf,MAAMwN,EAAOuH,EAAYhQ,MAAM,EAAGnF,GAAGD,KAAKsV,GAAeA,EAAW/T,QAC9D+D,EAASjH,KAAKuP,+BAA+BC,GACnD,IAAK,MAAMtM,KAAS+D,EAChBzE,OAAOC,mBAAmB,CACtBC,aAAc,SACdQ,MAAOA,EACPC,aAAcD,EACdJ,OAAQiU,EAAYnV,IAEpC,EAEI,IAAK,IAAIA,EAAI,EAAGA,EAAI5B,KAAK4K,UAAWhJ,IAAK,CACrC,MAAMyS,EAAmB7R,OAAOC,mBAAmB,CAC/CC,aAAc,MACdI,OAAQsR,EACRxR,MAAO,CACHC,QAAW,OACXyR,IAAO3L,KAGTuO,EAAY,GAAGlX,KAAK8B,kBAAkB9B,KAAK4K,UAAUhJ,WAC7CY,OAAOC,mBAAmB,CACpCC,aAAc,QACdS,aAAcnD,KAAK6K,YAAYjJ,GAC/BkB,OAAQuR,EACRzR,MAAO,CAAC,eAAgB,UAEtB+B,aAAa,MAAOuS,GAC1B,MAAMD,EAAazU,OAAOC,mBAAmB,CACzCC,aAAc,SACdtC,GAAI8W,EACJpU,OAAQuR,IAEZ0C,EAAYzH,KAAK2H,GACjBD,EAAoBpV,GACpBqV,EAAW1T,iBAAiB,UAAU,KAElC,IAAK,IAAI4T,EAAIvV,EAAE,EAAGuV,EAAIJ,EAAYzU,OAAQ6U,IACtCH,EAAoBG,GAGxBnX,KAAKoO,UAAUE,eAAiBtO,KAAK4P,iBACjCmH,EAAYpV,KAAKyV,GAAOA,EAAGlU,SAI/B,MAAMmU,EACArX,KAAKY,mBAAmB0W,uBAAuBtO,GACrD,IAAK,MAAMc,KAAOuN,EACdvN,EAAIyN,cAAczO,EAClC,GAGA,CACA,EAQAG,EAAqBpH,UAAUsS,uBAAyB,WACpD,MAAMC,EAAY5R,OAAOC,mBAAmB,CACxCC,aAAc,MACdI,OAAQ9C,KAAKY,mBACbgC,MAAO,CACHC,QAAW,OACX,cAAe,SACfyR,IAAO3L,EACP,aAAcC,KAIhB4O,EAA0B,GAAGxX,KAAK8B,mCACZU,OAAOC,mBAAmB,CAClDC,aAAc,QACdS,aAAcE,QAAQoU,mBAAqB,oBAC3C3U,OAAQsR,EACRxR,MAAO,CAAC,eAAgB,UAER+B,aAAa,MAAO6S,GACxC,MAAME,EAAuBlV,OAAOC,mBAAmB,CACnDC,aAAc,QACd2B,KAAM,QACN1B,WAAYqG,EACZ5I,GAAIoX,EACJ1U,OAAQsR,IAEZsD,EAAqB/S,aAAa,MAAO,GACzC,MAAMgS,EAAQ,KACVe,EAAqB/S,aACjB,MACA3E,KAAKoO,UAAUC,oBACTrO,KAAKqL,OAAO6B,OAAOlN,KAAKoO,UAAUE,gBAAgB9B,SAE5DkL,EAAqBxU,MAAQlD,KAAKqL,OAAO6B,OAAOlN,KAAKoO,UAAUE,gBAAgBpL,KAAA,EAEnFyT,IACAe,EAAqBnU,iBAAiB,SAAS,KAC3CvD,KAAKkQ,WAAWlQ,KAAKoO,UAAUE,eAAgB0G,OAAO0C,EAAqBxU,OAAM,IAErFwU,EAAqBnU,iBAAiBsF,GAAuB,KACzD8N,GAAK,IAI0BnU,OAAOC,mBAAmB,CACzDC,aAAc,SACd2B,KAAM,SACNlB,aAAcE,QAAQsT,OAAS,QAC/B7T,OAAQsR,IAEe7Q,iBAAiB,SAAS,KACjDmU,EAAqBxU,MAAQlD,KAAKqL,OAAO6B,OAAOlN,KAAKoO,UAAUE,gBAAgB9B,QAC/ExM,KAAKkQ,WAAWlQ,KAAKoO,UAAUE,eAAgB0G,OAAO0C,EAAqBxU,OAAM,IAI9CV,OAAOC,mBAAmB,CAC7DC,aAAc,SACd2B,KAAM,SACNlB,aAAcE,QAAQsU,mBAAqB,oBAC3C7U,OAAQsR,IAEmB7Q,iBAAiB,SAAS,KAErDmU,EAAqBxU,MAAQlD,KAAKqL,OAAO6B,OAAOlN,KAAKoO,UAAUE,gBAAgB9B,QAC/E,IAAK,MAAO5K,EAAGsL,KAAWlN,KAAKqL,OAAO6B,OAAOnD,UACzC/J,KAAKkQ,WAAWtO,EAAGsL,EAAOV,QACtC,GAEA,EAkDA,MAAMQ,EAAW,sBAOjB,SAASrC,EAAShB,GACd,OAAOA,EAAIC,KAAKoD,EACpB,CCl+CO,SAAS4K,EAAsB9X,EAAaC,GAC/C,GAAIC,KAAKC,cAAgB2X,EACrB,MAAM,IAAI1X,MAAM,iEAEpBL,EAAciB,KAAKd,KAAMF,EAAaC,GAOtCC,KAAK6X,YAASrX,EAKdR,KAAKmQ,WAAQ3P,CACjB,CCdO,SAASsX,EAAkBhY,EAAaoJ,EAAMnJ,GAQjD6X,EAAsB9W,KAAKd,KAAMF,EAAaC,GAO9CC,KAAKuJ,MAAQL,EAMblJ,KAAK+X,UAAW,EAMhB/X,KAAKgY,gBAAkBtR,EAAeM,KAAKhH,KAAKuJ,OAUhDvJ,KAAKiY,aAAUzX,EAKfR,KAAKkY,QAAUnY,EAAQoY,QAAU,KAMjCnY,KAAKoY,YAAc,EAMnBpY,KAAKqY,qBAAuB,EAM5BrY,KAAKsY,WAAa1Y,EAAc,EACpC,CD7CA+D,OAAOC,eAAegU,EAAsB/V,UAAWhC,EAAcgC,WAYrE+V,EAAsB/V,UAAUK,YAAc,WAC1CrC,EAAcgC,UAAUK,YAAYpB,KAAKd,MAEzCA,KAAK6X,OAASrV,OAAOC,mBAAmB,CACpCC,aAAc,SACdtC,GAAI,eACJuC,WAAY,SACZG,OAAQ9C,KAAKS,iBAGjBT,KAAKmQ,WAAQ3P,CACjB,EAQAoX,EAAsB/V,UAAUQ,6BAA+B,WAC3D,MAAO,CAAC,MACZ,EAQAuV,EAAsB/V,UAAU0W,sBAAwB,SAAU9U,GAK9D,MAAMgB,EAAUjC,OAAOC,mBAAmB,CACtCC,aAAc,IACdgC,KAAM1E,KAAKmQ,MAAMqI,kBAErB/T,EAAQE,aAAa,WAAYlB,GACjCgB,EAAQG,QACRH,EAAQI,QACZ,EASA+S,EAAsB/V,UAAUkC,sBAAwB,SAAUN,GAE9DzD,KAAKyY,aAEL,MAAMzV,EAAQhD,KAAK6X,OAAOa,YACpB/M,EAAS3L,KAAK6X,OAAOc,aAE3B3Y,KAAKmQ,MAAMpQ,QAAQ6Y,WAAY,EAC/B5Y,KAAKmQ,MAAMpQ,QAAQ8Y,WAAY,EAE/B,MAAMC,EAAaC,IAAI/V,EAAO2I,GACb,IAAIqN,MAAMF,EAAY9Y,KAAKmQ,MAAM8I,OAAOC,SAMzD,MAAMzU,EAAUjC,OAAOC,mBAAmB,CACtCC,aAAc,IACdgC,KAAM,2BACAyU,mBAAmBL,EAAWM,sBAExC3U,EAAQE,aAAa,WAAYlB,GACjCgB,EAAQG,QACRH,EAAQI,SAER7E,KAAKmQ,MAAMpQ,QAAQ6Y,WAAY,EAC/B5Y,KAAKmQ,MAAMpQ,QAAQ8Y,WAAY,CACnC,EAUAjB,EAAsB/V,UAAU4W,WAAa,WACzCM,IAAIlX,UAAUwX,WAAa,SAAUC,GACjC,MAAkB,OAAdA,GAAoC,OAAdA,EACftZ,KAEJ,IACf,EACI+Y,IAAIlX,UAAUe,MAAQ,WAClB,OAAO5C,KAAKuZ,SAAS3W,KAC7B,EACImW,IAAIlX,UAAU2X,aAAe,SAAUC,GACnC,OAAOzZ,KAAKyZ,EACpB,EACIV,IAAIlX,UAAU0B,iBAAmB,SAAUc,EAAMqV,EAAUC,GAE/D,CACA,ECrEAhW,OAAOC,eAAekU,EAAkBjW,UAAW+V,EAAsB/V,WASzEiW,EAAkBjW,UAAU+X,YAAc,WACtC,OAAO5Z,KAAK+X,QAChB,EAQAD,EAAkBjW,UAAUgY,YAAc,SAAUC,GAEhD,GADA9Z,KAAK+X,SAAW+B,GACX9Z,KAAKmQ,MACN,OAGJ,MACI4J,EAAaC,EAAWC,EAAgBC,EAAUC,GAClDna,KAAKoa,qBACTpa,KAAKmQ,MAAMjH,KAAKmR,SAAS,GAAGC,MAAQta,KAAKua,sBACzCva,KAAKmQ,MAAMjH,KAAKmR,SAAS,GAAGnR,KAAO8Q,EACnCha,KAAKmQ,MAAMpQ,QAAQya,OAAO/H,EAAEgI,MAAMzJ,KAAOhR,KAAKua,sBAC9Cva,KAAKmQ,MAAMuK,QACf,EAUA5C,EAAkBjW,UAAU0Y,oBAAsB,WAC9C,OAAOva,KAAK+X,SAAW,UAAY,WACvC,EAQAD,EAAkBjW,UAAU8Y,WAAa,WACrC,OAAO3a,KAAKiY,OAChB,EAUAH,EAAkBjW,UAAUqO,WAAa,SAAUhD,GAE/C,GADAlN,KAAKiY,QAAU/K,GACVlN,KAAKmQ,MACN,OAGJ,MACI4J,EAAaC,EAAWC,EAAgBC,EAAUC,GAClDna,KAAKoa,qBACTpa,KAAKmQ,MAAMjH,KAAKmR,SAAS,GAAGnR,KAAO8Q,EACnCha,KAAKmQ,MAAMpQ,QAAQya,OAAO1I,EAAE3J,IAAM+R,EAClCla,KAAKmQ,MAAMpQ,QAAQya,OAAO1I,EAAE5J,IAAMiS,EAClCna,KAAKmQ,MAAMpQ,QAAQya,OAAO1I,EAAExF,MAAMsO,SAAW,EAAIX,EACjDja,KAAKmQ,MAAMpQ,QAAQ8a,QAAQC,QAAQC,UAAUN,MACzCza,KAAKgb,4BAA4BjB,EAAaE,GAClDja,KAAKmQ,MAAMuK,QACf,EAQA5C,EAAkBjW,UAAUoZ,cAAgB,WACxC,OAAOjb,KAAKsY,UAChB,EAUAR,EAAkBjW,UAAUqZ,cAAgB,SAAUC,GAClDnb,KAAKsY,WAAa6C,EACbnb,KAAKmQ,QAGVnQ,KAAKmQ,MAAMjH,KAAKmR,SAAS,GAAGe,gBAAkBpb,KAAKsY,WACnDtY,KAAKmQ,MAAMuK,SACf,EAcA5C,EAAkBjW,UAAUuY,mBAAqB,WAC7C,MAAMD,EAAWjT,KAAKgB,OAAOlI,KAAKuJ,OAC5B2Q,EAAWhT,KAAKiB,OAAOnI,KAAKuJ,OAC5B8R,GAAalB,EAAWD,GAAYla,KAAKiY,QACzCgC,EAAiB,GAAMoB,EAKvBtB,EAAc9K,MAAMqM,MAAM,KAAMrM,MAAMjP,KAAKiY,UAAUtW,KACvD,CAACuB,EAAO0O,IAAUsI,GAAY,EAAItI,EAAQ,GAAKqI,IAOnD,IAAIlQ,EAAUkF,MAAMqM,MAAM,KAAMrM,MAAMjP,KAAKiY,UAAUtW,KAAI,IAAM,IAC/D,IAAK,IAAIC,EAAI,EAAGA,EAAI5B,KAAKuJ,MAAMjH,OAAQV,IAEnC,GAAI5B,KAAKuJ,MAAM3H,KAAOuY,GAKtB,IAAK,IAAIhD,EAAI,EAAGA,EAAInX,KAAKiY,QAASd,IAC9B,GAAInX,KAAKuJ,MAAM3H,IAAMmY,EAAY5C,GAAK8C,GAC/Bja,KAAKuJ,MAAM3H,GAAKmY,EAAY5C,GAAK8C,EAAgB,CACpDlQ,EAAQoN,KACR,KAChB,OATYpN,EAAQ/J,KAAKiY,QAAU,KAa/B,GAAIjY,KAAK+X,SAAU,CACf,MAAMjQ,EAAMiC,EAAQwR,QAAO,CAACC,EAAYC,IAAQD,EAAaC,GAAK,GAClE,IAAK,IAAItE,EAAI,EAAGA,EAAInX,KAAKiY,QAASd,IAC9BpN,EAAQoN,IAAOrP,EAAMuT,CAEjC,CACI,MAAO,CACHtB,EACAA,EAAYpY,KAAI,CAAC8Z,EAAK7Z,KAAC,CAAQkQ,EAAG2J,EAAKhJ,EAAG1I,EAAQnI,OAClDqY,EACAC,EACAC,EAER,EAWArC,EAAkBjW,UAAUmZ,4BAA8B,SAAUjB,EAAaE,GAE7E,MAAM9B,EAASnY,KAAKkY,QACdwD,EAAa1b,KAAKoY,YAmBxB,OAXiB,SAAUuD,GACvB,IAAKA,EAAMrZ,OACP,MAAO,GAEX,MACMsP,EADO+J,EAAM,GACAC,UACbzT,EAAM4R,EAAYnI,GAASqI,EAC3B/R,EAAM6R,EAAYnI,GAASqI,EACjC,MAAO,GAAG9B,MAAWhQ,EAAIkE,QAAQqP,QACtBxT,EAAImE,QAAQqP,IAC/B,CAEA,EAQA5D,EAAkBjW,UAAUK,YAAc,WACtC0V,EAAsB/V,UAAUK,YAAYpB,KAAKd,MAEjDA,KAAKiY,QAAUjY,KAAKgY,gBACpB,MACI+B,EAAaC,EAAWC,EAAgBC,EAAUC,GAClDna,KAAKoa,qBAGHyB,EAAa,CACfxB,SAAU,CAAC,CACPC,MAAOta,KAAKua,sBACZrR,KAAM8Q,EACN8B,mBAAoB,EACpBC,cAAe,EACfX,gBAAiBpb,KAAKsY,cAGxB0D,EAAiB,CACnBlK,EAAG,CACCzN,KAAM,SACN8D,IAAK+R,EACLhS,IAAKiS,EACL8B,QAAQ,EACRzH,KAAM,CACFyH,QAAQ,GAEZ3P,MAAO,CACHsO,SAAU,EAAIX,EACdiC,SAAU,CAAC5B,EAAO1I,EAAOuK,IACdnH,OAAOsF,GAAOjO,QAAQrM,KAAKoY,cAG1CqC,MAAO,CACH5X,QAASuZ,QAAQpc,KAAKkY,SACtBlH,KAAMhR,KAAKkY,QACXmE,KAAM,CACFxV,KAAM,MAIlB4L,EAAG,CACCgI,MAAO,CACH5X,SAAS,EACTmO,KAAMhR,KAAKua,sBACX8B,KAAM,CACFxV,KAAM,OAKhByV,EAAkB,CACpBC,OAAQ,CACJ1Z,SAAS,GAEbiY,QAAS,CACLC,UAAW,CACPN,MAAOza,KAAKgb,4BAA4BjB,EAAaE,MAMjEja,KAAKmQ,MAAQ,IAAI6I,MAAMhZ,KAAK6X,OAAQ,CAChCxT,KAAM,MACN6E,KAAM2S,EACN9b,QAAS,CACLya,OAAQwB,EACRnB,QAASyB,EACTE,SAAS,EACTC,YAAY,IAGxB,EASA3E,EAAkBjW,UAAUM,qBAAuB,WAC/CyV,EAAsB/V,UAAUM,qBAAqBrB,KAAKd,MAQ1D,MAAM0c,EAAO1c,KAKP2c,EAASna,OAAOC,mBAAmB,CACrCC,aAAc,QACd2B,KAAM,QACNnB,MAAOlD,KAAKgY,gBACZlV,OAAQ9C,KAAKY,qBAEjB+b,EAAOhY,aAAa,MAAO,GAC3BgY,EAAOhY,aAAa,MAAO3E,KAAKqY,qBAAuBrY,KAAKgY,iBAC5D2E,EAAOpZ,iBAAiB,SAAS,KAC7BvD,KAAKkQ,WAAW8E,OAAO2H,EAAOzZ,OAAM,IAMnBV,OAAOC,mBAAmB,CAC3CC,aAAc,SACd2B,KAAM,SACNlB,aAAc,QACdL,OAAQ9C,KAAKY,qBAEJ2C,iBAAiB,SAAS,KACnCoZ,EAAOzZ,MAAQlD,KAAKgY,gBACpBhY,KAAKkQ,WAAW8E,OAAO2H,EAAOzZ,OAAM,IAGxC,MAAM0Z,EAAsB,GAAG5c,KAAK8B,+BAK9B+a,EAAmBra,OAAOC,mBAAmB,CAC/CC,aAAc,QACd2B,KAAM,WACNjE,GAAIwc,EACJ9Z,OAAQ9C,KAAKY,qBAMc4B,OAAOC,mBAAmB,CACrDC,aAAc,QACdS,aAAc,UACdL,OAAQ9C,KAAKY,qBAEM+D,aAAa,MAAOiY,GAC3CC,EAAiBtZ,iBAAiB,UAAU,KACxCvD,KAAK6Z,YAAYuC,QAAQS,EAAiBtH,SAAQ,IAGtD,MAAMuH,EAAyBta,OAAOC,mBAAmB,CACrDC,aAAc,MACdtC,GAAI,GAAGJ,KAAK8B,qCACZgB,OAAQ9C,KAAKY,qBAEI,IAAImc,OAAOC,IAAIC,YAAYH,EAAwB,CACpEpL,MAAO1R,KAAKsY,WACZtV,MPtb0B,IOub1Bka,gBAAiB,aACjBC,OAAQ,CACJ,CACIC,UAAWL,OAAOC,IAAIK,GAAGC,OAE7B,CACIF,UAAWL,OAAOC,IAAIK,GAAGE,QAE7B,CACIH,UAAWL,OAAOC,IAAIK,GAAGE,OACzBxd,QAAS,CACLyd,WAAY,aAKfxK,GAAG,gBAAgB,SAAUtB,GACtCgL,EAAKxB,cAAcxJ,EAAM+L,WACjC,GACA,ECrcY,MAACC,EAAY,CAGxBC,KAAM,KAENC,UAAe,KACfC,IAAW,KAGXC,sBAAyB,KACzBC,qBAAwB,KACxBC,yBAA2B,KAC3BC,uBAA0B,KAM1BC,uBAAwB,KAKxBC,qBAAsB,KAGtBC,OAAS,SAASre,GAEjB,MAAM2c,EAAO1c,KAGZ0c,EAAKkB,UAAgB7d,EAAQ6d,UAC7BlB,EAAKoB,sBAAyB/d,EAAQ+d,sBACtCpB,EAAKmB,IAAW9d,EAAQ8d,IACxBnB,EAAKqB,qBAAwBhe,EAAQge,qBACrCrB,EAAKsB,yBAA2Bje,EAAQie,yBACxCtB,EAAKuB,uBAA0Ble,EAAQke,uBAGxC,MAAMI,EAAY3B,EAAK4B,cAGvB,OAFA5B,EAAKqB,qBAAqBQ,YAAYF,IAE/B,CACT,EAKCC,YAAc,WAEb,MAAM5B,EAAO1c,KAGPwe,EAAW,IAAIC,iBAGpB/B,EAAKiB,KAAOjB,EAAKiB,MAAQ,IAAIe,aAE9B,MAAMC,EAAWnc,OAAOC,mBAAmB,CAC1CC,aAAe,MACfC,WAAc,kBACdG,OAAW0b,IAIX9B,EAAKiB,KAAKiB,aAAa,CACtBxe,GAAQ,OACRqZ,KAAS,OACTa,MAAUjX,QAAQwb,MAAQ,OAC1BC,SAAY,SACZC,cAAgB,CAAC,KAAM,MACvBC,GAAQ,OACRC,MAAU,IACVC,OAAW,IACXC,SAAY,EACZrc,OAAW6b,EACXzC,SAAY,SAASkD,GACpB1C,EAAKiB,KAAK0B,sBAAsB,CAC/BD,UAAYA,EACZE,MAAS,WAEf;AAIG5C,EAAKiB,KAAKiB,aAAa,CACtBxe,GAAQ,SACRqZ,KAAS,SACTqF,SAAY,OACZS,QAAW,QACXjF,MAASjX,QAAQmc,YAAc,eAC/BL,SAAW,EACXrc,OAAU6b,EACVc,SAAY,MACZvD,SAAW,SAASkD,GACnB1C,EAAKiB,KAAK0B,sBAAsB,CAC/BD,UAAYA,EACZE,MAAS,WAEf,IAIG5C,EAAKiB,KAAKiB,aAAa,CACtBxe,GAAQ,WACRqZ,KAAS,WACTqF,SAAY,oBACZS,QAAW,MACXjF,MAASjX,QAAQqc,UAAY,WAC7BP,SAAW,EACXrc,OAAU6b,EACVzC,SAAW,SAASkD,GACnB1C,EAAKiB,KAAK0B,sBAAsB,CAC/BD,UAAYA,EACZE,MAAS,WAEf,IAIG5C,EAAKiB,KAAKiB,aAAa,CACtBxe,GAAQ,eACRqZ,KAAS,eACTqF,SAAY,wBACZS,QAAW,MACXjF,MAASjX,QAAQsc,cAAgB,eACjCR,SAAW,EACXrc,OAAU6b,EACVzC,SAAW,SAASkD,GACnB1C,EAAKiB,KAAK0B,sBAAsB,CAC/BD,UAAYA,EACZE,MAAS,WAEf,IAIG,MAAMM,EAAepd,OAAOC,mBAAmB,CAC9CC,aAAe,MACfC,WAAc,iCACdG,OAAW0b,IAEUhc,OAAOC,mBAAmB,CAC/CC,aAAe,QACf2B,KAAS,SACTjE,GAAQ,SACR8C,MAAUG,QAAQwc,QAAU,SAC5Bld,WAAc,kCACdG,OAAW8c,IAEErc,iBAAiB,SAAS,SAAUuc,GACjDA,EAAEC,iBACFrD,EAAKsD,YAAYrC,EACrB,IAGwBnb,OAAOC,mBAAmB,CAC9CC,aAAe,QACf2B,KAAS,SACTjE,GAAQ,eACR8C,MAAUG,QAAQsT,OAAS,QAC3BhU,WAAc,iDACdG,OAAW8c,IAECrc,iBAAiB,SAAS,SAAUuc,GAChDA,EAAEC,iBACFhD,OAAOkD,SAASC,QAAQnD,OAAOkD,SAASE,SAC5C,IAIG,MAAMC,EAAiB1D,EAAKiB,KAAK0C,uBACjC7B,EAASD,YAAa6B,GAGtB,MAAMzC,EAAOnb,OAAOC,mBAAmB,CACtCC,aAAe,OACftC,GAAQ,cACRuC,WAAc,gBAKhB,OAHCgb,EAAKY,YAAYC,GAGXb,CACT,EAMCqC,YAAc,SAASM,EAAUvgB,EAAQ,IAExC,MAAM2c,EAAO1c,KAGNugB,EAA+C,kBAAxBxgB,EAAQwgB,eAA4BxgB,EAAQwgB,cACnEC,EAAazgB,EAAQygB,YAAc9D,EAAKiB,KAAK6C,WAG7CrW,EAASuS,EAAKiB,KAAK8C,aAAa,CACrCD,WAAYA,IAIb,IAAKrW,GAAUA,EAAO7H,OAAO,EAC5B,OAAO,EAIJie,GACHvgB,KAAKge,yBAAyB0C,eAC7B,CAACC,SAAU,SAAUC,MAAO,QAASC,OAAQ,YAK5BnE,EAAKoE,YAAY,CACnC3W,OAAWA,EACX4W,MAAU,EACVC,eAAiB,CAChBC,GAAM,qDACNC,QAAU,CAAC,CAACzH,KAAO,eAGpB0H,MAAMC,IAENC,cAAcC,QAAQ,cAAeF,GAErCG,QAAQC,IAAIJ,GAiBZ,MAAMlY,EAAO,GACb,IAAK,MAAOtH,EAAGkI,KAAQsX,EAAYrX,UAAW,CAC7C,MAAMyV,EAAa1V,EAAI2X,gBAAkB3X,EAAI2X,gBAAkB,yBAAyB7f,KAClFid,EAAO/U,EAAI4X,OAAS5X,EAAI4X,OAAO,GAAK,iBAAiB9f,KACrD8d,EAAW5V,EAAI6X,kBAAoB7X,EAAI6X,kBAAoB,qBAAqB/f,KAChF+d,EAAe7V,EAAI8X,sBAAwB9X,EAAI8X,sBAAwB,wBAAwBhgB,IAG/FigB,EAAW,GACXC,EAAahY,EAAIiY,gCACjBC,EAAelY,EAAImY,kCACnBC,EAAepY,EAAIqY,kCACnBC,EAAStY,EAAIuY,4BACnB,GAAIL,GAAgBA,EAAa1f,OAAQ,CACxC,MAAMggB,EAAmBN,EAAa7X,QAAO,CAACC,EAAGxI,IAAMwI,GAAK0X,EAAWlgB,KACnE0gB,EAAiBhgB,SACpBuf,EAASG,aAAeM,EAE/B,CACK,GAAIJ,GAAgBA,EAAa5f,OAAQ,CACxC,MAAMigB,EAAmBL,EAAa/X,QAAO,CAACC,EAAGxI,IAAMwI,GAAK0X,EAAWlgB,KACnE2gB,EAAiBjgB,SACpBuf,EAASK,aAAeK,EAE/B,CACK,GAAIH,GAAUA,EAAO9f,OAAQ,CAC5B,MAAMkgB,EAAaJ,EAAOjY,QAAO,CAACC,EAAGxI,IAAMwI,GAAK0X,EAAWlgB,KACvD4gB,EAAWlgB,SACduf,EAASO,OAASI,EAEzB,CACS7e,OAAO8e,KAAKZ,GAAUvf,SACzBuf,EAASrC,WAAaA,EACtBqC,EAAShD,KAAOA,EAChBgD,EAASnC,SAAWA,EACpBmC,EAASlC,aAAeA,EACxBzW,EAAKoG,KAAKuS,GAEhB,CACIN,QAAQC,IAAItY,GAGZ,MAAMwZ,EAAUxZ,EAAKiB,QACnBL,GAAQA,EAAIsY,SACZzgB,KACAmI,IAAgB,CAACH,IAAK,CAACG,EAAI+U,KAAM/U,EAAI0V,YAAavY,OAAQ6C,EAAIsY,WAIhEpiB,KAAKme,qBAAuB,IAAIlV,EAC/BjJ,KAAKie,uBACLyE,EACA,CAACrf,QAAQwb,MAAQ,OAAQxb,QAAQmc,YAAc,gBAC/C,CACCvU,OAAQ5H,QAAQ+e,QAAU,SAC1B/Y,UAAU,EACV1I,uBAAuB,EACvBL,kBAAkB,EAClBgJ,YAAY,IAGdtJ,KAAKme,qBAAqBpc,SAG1B,MAAM4gB,EAAYzZ,EAAKiB,QACrBL,GAAQA,EAAIkY,eACZrgB,KACAmI,IAAgB,CAACH,IAAK,CAACG,EAAI+U,KAAM/U,EAAI0V,YAAavY,OAAQ6C,EAAIkY,iBAIhEhiB,KAAKke,uBAAyB,IAAIjV,EACjCjJ,KAAKge,yBACL2E,EACA,CAACtf,QAAQwb,MAAQ,OAAQxb,QAAQmc,YAAc,gBAC/C,CACCvU,OAAQ5H,QAAQuf,UAAY,WAC5BvZ,UAAU,EACV1I,uBAAuB,EACvBL,kBAAkB,EAClBgJ,YAAY,IAGdtJ,KAAKke,uBAAuBnc,QAAM,GAItC,EAMC+e,YAAc,SAAS/gB,GAEtB,MAAM2c,EAAO1c,KAGNmK,EAAWpK,EAAQoK,QAAU,KAC7B0Y,EAAc9iB,EAAQ8iB,WAAa,CAAC,KACpCC,EAAW/iB,EAAQ+iB,OAAS,aAC5BC,EAAUC,aAAaC,sBACvBjC,EAAiBjhB,EAAQihB,gBAAkB,KAC3CD,EAA4BvgB,MAAjBT,EAAQghB,MAChBhhB,EAAQghB,MACR,GAEV,OAAO,IAAImC,SAAQ,SAASC,GAE1B,MAAM7M,EAAQ,GAER8M,EAAa1G,EAAKiB,KAAK0F,iBAAiBlZ,GAExCmZ,EAAe,CACpBC,WAAc,UACdjE,MAAU,UACVuD,UAAaA,EACbE,KAASA,EACTK,WAAcA,EACdrC,MAAUA,EACVzK,MAAWA,EAAMhU,OAAO,EAAKgU,EAAM1M,KAAK,KAAO,KAC/C4Z,OAAU,EACVV,MAAUA,EACV9B,eAAiBA,GAElByC,aAAaC,QAAQ,CACpBC,KAAOL,IAEPnC,MAAMyC,IAEN,MAAM1a,EAAO2a,KAAKC,mBAAmBF,EAASG,QAE9CZ,EAAQja,EAAI,GAEjB,GAEA,G"}